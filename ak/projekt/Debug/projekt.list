
projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a48  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08006bd8  08006bd8  00016bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e08  08006e08  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006e08  08006e08  00016e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e10  08006e10  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e10  08006e10  00016e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e14  08006e14  00016e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  20000070  08006e88  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  08006e88  000202d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f2de  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000221e  00000000  00000000  0002f3c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e00  00000000  00000000  000315e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000afb  00000000  00000000  000323e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000289d3  00000000  00000000  00032edb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010471  00000000  00000000  0005b8ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fca5e  00000000  00000000  0006bd1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000045d8  00000000  00000000  00168780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0016cd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006bc0 	.word	0x08006bc0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006bc0 	.word	0x08006bc0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <Delay>:
#include "stm32l4xx_hal.h"
#include "main.h"
#include "lcd.h"

void Delay(uint32_t nCount)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  for(; nCount != 0; nCount--);
 8000594:	e002      	b.n	800059c <Delay+0x10>
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	3b01      	subs	r3, #1
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d1f9      	bne.n	8000596 <Delay+0xa>
}
 80005a2:	bf00      	nop
 80005a4:	bf00      	nop
 80005a6:	370c      	adds	r7, #12
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr

080005b0 <lcd_delay>:
void lcd_delay(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	Delay(200);
 80005b4:	20c8      	movs	r0, #200	; 0xc8
 80005b6:	f7ff ffe9 	bl	800058c <Delay>
}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <lcd_cmd>:

void lcd_cmd(char out_char)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->BRR  = LCD_RS_Pin;
 80005ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005d2:	629a      	str	r2, [r3, #40]	; 0x28

	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 80005d4:	4b5e      	ldr	r3, [pc, #376]	; (8000750 <lcd_cmd+0x190>)
 80005d6:	2280      	movs	r2, #128	; 0x80
 80005d8:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 80005da:	4b5e      	ldr	r3, [pc, #376]	; (8000754 <lcd_cmd+0x194>)
 80005dc:	2220      	movs	r2, #32
 80005de:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 80005e0:	4b5c      	ldr	r3, [pc, #368]	; (8000754 <lcd_cmd+0x194>)
 80005e2:	2210      	movs	r2, #16
 80005e4:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 80005e6:	4b5b      	ldr	r3, [pc, #364]	; (8000754 <lcd_cmd+0x194>)
 80005e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005ec:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 80005ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005f6:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 80005f8:	f7ff ffda 	bl	80005b0 <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 80005fc:	4b54      	ldr	r3, [pc, #336]	; (8000750 <lcd_cmd+0x190>)
 80005fe:	695b      	ldr	r3, [r3, #20]
 8000600:	4a53      	ldr	r2, [pc, #332]	; (8000750 <lcd_cmd+0x190>)
 8000602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000606:	6153      	str	r3, [r2, #20]

	if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	f003 0310 	and.w	r3, r3, #16
 800060e:	2b00      	cmp	r3, #0
 8000610:	d003      	beq.n	800061a <lcd_cmd+0x5a>
 8000612:	4b50      	ldr	r3, [pc, #320]	; (8000754 <lcd_cmd+0x194>)
 8000614:	2220      	movs	r2, #32
 8000616:	619a      	str	r2, [r3, #24]
 8000618:	e003      	b.n	8000622 <lcd_cmd+0x62>
 800061a:	4b4e      	ldr	r3, [pc, #312]	; (8000754 <lcd_cmd+0x194>)
 800061c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000620:	619a      	str	r2, [r3, #24]
	if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	f003 0320 	and.w	r3, r3, #32
 8000628:	2b00      	cmp	r3, #0
 800062a:	d003      	beq.n	8000634 <lcd_cmd+0x74>
 800062c:	4b49      	ldr	r3, [pc, #292]	; (8000754 <lcd_cmd+0x194>)
 800062e:	2210      	movs	r2, #16
 8000630:	619a      	str	r2, [r3, #24]
 8000632:	e003      	b.n	800063c <lcd_cmd+0x7c>
 8000634:	4b47      	ldr	r3, [pc, #284]	; (8000754 <lcd_cmd+0x194>)
 8000636:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800063a:	619a      	str	r2, [r3, #24]
	if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000642:	2b00      	cmp	r3, #0
 8000644:	d004      	beq.n	8000650 <lcd_cmd+0x90>
 8000646:	4b43      	ldr	r3, [pc, #268]	; (8000754 <lcd_cmd+0x194>)
 8000648:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800064c:	619a      	str	r2, [r3, #24]
 800064e:	e003      	b.n	8000658 <lcd_cmd+0x98>
 8000650:	4b40      	ldr	r3, [pc, #256]	; (8000754 <lcd_cmd+0x194>)
 8000652:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000656:	619a      	str	r2, [r3, #24]
	if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065c:	2b00      	cmp	r3, #0
 800065e:	da05      	bge.n	800066c <lcd_cmd+0xac>
 8000660:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000664:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000668:	619a      	str	r2, [r3, #24]
 800066a:	e004      	b.n	8000676 <lcd_cmd+0xb6>
 800066c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000670:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000674:	619a      	str	r2, [r3, #24]

	lcd_delay();
 8000676:	f7ff ff9b 	bl	80005b0 <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 800067a:	4b35      	ldr	r3, [pc, #212]	; (8000750 <lcd_cmd+0x190>)
 800067c:	2280      	movs	r2, #128	; 0x80
 800067e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000680:	4b34      	ldr	r3, [pc, #208]	; (8000754 <lcd_cmd+0x194>)
 8000682:	2220      	movs	r2, #32
 8000684:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000686:	4b33      	ldr	r3, [pc, #204]	; (8000754 <lcd_cmd+0x194>)
 8000688:	2210      	movs	r2, #16
 800068a:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 800068c:	4b31      	ldr	r3, [pc, #196]	; (8000754 <lcd_cmd+0x194>)
 800068e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000692:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000694:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000698:	f44f 7280 	mov.w	r2, #256	; 0x100
 800069c:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 800069e:	f7ff ff87 	bl	80005b0 <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 80006a2:	4b2b      	ldr	r3, [pc, #172]	; (8000750 <lcd_cmd+0x190>)
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	4a2a      	ldr	r2, [pc, #168]	; (8000750 <lcd_cmd+0x190>)
 80006a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006ac:	6153      	str	r3, [r2, #20]

	if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	f003 0301 	and.w	r3, r3, #1
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d003      	beq.n	80006c0 <lcd_cmd+0x100>
 80006b8:	4b26      	ldr	r3, [pc, #152]	; (8000754 <lcd_cmd+0x194>)
 80006ba:	2220      	movs	r2, #32
 80006bc:	619a      	str	r2, [r3, #24]
 80006be:	e003      	b.n	80006c8 <lcd_cmd+0x108>
 80006c0:	4b24      	ldr	r3, [pc, #144]	; (8000754 <lcd_cmd+0x194>)
 80006c2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80006c6:	619a      	str	r2, [r3, #24]
	if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	f003 0302 	and.w	r3, r3, #2
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d003      	beq.n	80006da <lcd_cmd+0x11a>
 80006d2:	4b20      	ldr	r3, [pc, #128]	; (8000754 <lcd_cmd+0x194>)
 80006d4:	2210      	movs	r2, #16
 80006d6:	619a      	str	r2, [r3, #24]
 80006d8:	e003      	b.n	80006e2 <lcd_cmd+0x122>
 80006da:	4b1e      	ldr	r3, [pc, #120]	; (8000754 <lcd_cmd+0x194>)
 80006dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80006e0:	619a      	str	r2, [r3, #24]
	if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	f003 0304 	and.w	r3, r3, #4
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d004      	beq.n	80006f6 <lcd_cmd+0x136>
 80006ec:	4b19      	ldr	r3, [pc, #100]	; (8000754 <lcd_cmd+0x194>)
 80006ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006f2:	619a      	str	r2, [r3, #24]
 80006f4:	e003      	b.n	80006fe <lcd_cmd+0x13e>
 80006f6:	4b17      	ldr	r3, [pc, #92]	; (8000754 <lcd_cmd+0x194>)
 80006f8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80006fc:	619a      	str	r2, [r3, #24]
	if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	f003 0308 	and.w	r3, r3, #8
 8000704:	2b00      	cmp	r3, #0
 8000706:	d005      	beq.n	8000714 <lcd_cmd+0x154>
 8000708:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800070c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000710:	619a      	str	r2, [r3, #24]
 8000712:	e004      	b.n	800071e <lcd_cmd+0x15e>
 8000714:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000718:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800071c:	619a      	str	r2, [r3, #24]

	lcd_delay();
 800071e:	f7ff ff47 	bl	80005b0 <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <lcd_cmd+0x190>)
 8000724:	2280      	movs	r2, #128	; 0x80
 8000726:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000728:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <lcd_cmd+0x194>)
 800072a:	2220      	movs	r2, #32
 800072c:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <lcd_cmd+0x194>)
 8000730:	2210      	movs	r2, #16
 8000732:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000734:	4b07      	ldr	r3, [pc, #28]	; (8000754 <lcd_cmd+0x194>)
 8000736:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800073a:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 800073c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000740:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000744:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	48000800 	.word	0x48000800
 8000754:	48000400 	.word	0x48000400

08000758 <lcd_char_cp>:

void lcd_char_cp(char out_char)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->ODR |= LCD_RS_Pin;
 8000762:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000766:	695b      	ldr	r3, [r3, #20]
 8000768:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800076c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000770:	6153      	str	r3, [r2, #20]

	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 8000772:	4b5e      	ldr	r3, [pc, #376]	; (80008ec <lcd_char_cp+0x194>)
 8000774:	2280      	movs	r2, #128	; 0x80
 8000776:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 8000778:	4b5d      	ldr	r3, [pc, #372]	; (80008f0 <lcd_char_cp+0x198>)
 800077a:	2220      	movs	r2, #32
 800077c:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 800077e:	4b5c      	ldr	r3, [pc, #368]	; (80008f0 <lcd_char_cp+0x198>)
 8000780:	2210      	movs	r2, #16
 8000782:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 8000784:	4b5a      	ldr	r3, [pc, #360]	; (80008f0 <lcd_char_cp+0x198>)
 8000786:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800078a:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 800078c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000790:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000794:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 8000796:	f7ff ff0b 	bl	80005b0 <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 800079a:	4b54      	ldr	r3, [pc, #336]	; (80008ec <lcd_char_cp+0x194>)
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	4a53      	ldr	r2, [pc, #332]	; (80008ec <lcd_char_cp+0x194>)
 80007a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a4:	6153      	str	r3, [r2, #20]

	if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	f003 0310 	and.w	r3, r3, #16
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d003      	beq.n	80007b8 <lcd_char_cp+0x60>
 80007b0:	4b4f      	ldr	r3, [pc, #316]	; (80008f0 <lcd_char_cp+0x198>)
 80007b2:	2220      	movs	r2, #32
 80007b4:	619a      	str	r2, [r3, #24]
 80007b6:	e003      	b.n	80007c0 <lcd_char_cp+0x68>
 80007b8:	4b4d      	ldr	r3, [pc, #308]	; (80008f0 <lcd_char_cp+0x198>)
 80007ba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80007be:	619a      	str	r2, [r3, #24]
	if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	f003 0320 	and.w	r3, r3, #32
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d003      	beq.n	80007d2 <lcd_char_cp+0x7a>
 80007ca:	4b49      	ldr	r3, [pc, #292]	; (80008f0 <lcd_char_cp+0x198>)
 80007cc:	2210      	movs	r2, #16
 80007ce:	619a      	str	r2, [r3, #24]
 80007d0:	e003      	b.n	80007da <lcd_char_cp+0x82>
 80007d2:	4b47      	ldr	r3, [pc, #284]	; (80008f0 <lcd_char_cp+0x198>)
 80007d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80007d8:	619a      	str	r2, [r3, #24]
	if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d004      	beq.n	80007ee <lcd_char_cp+0x96>
 80007e4:	4b42      	ldr	r3, [pc, #264]	; (80008f0 <lcd_char_cp+0x198>)
 80007e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007ea:	619a      	str	r2, [r3, #24]
 80007ec:	e003      	b.n	80007f6 <lcd_char_cp+0x9e>
 80007ee:	4b40      	ldr	r3, [pc, #256]	; (80008f0 <lcd_char_cp+0x198>)
 80007f0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80007f4:	619a      	str	r2, [r3, #24]
	if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 80007f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	da05      	bge.n	800080a <lcd_char_cp+0xb2>
 80007fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000802:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000806:	619a      	str	r2, [r3, #24]
 8000808:	e004      	b.n	8000814 <lcd_char_cp+0xbc>
 800080a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800080e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000812:	619a      	str	r2, [r3, #24]

	lcd_delay();
 8000814:	f7ff fecc 	bl	80005b0 <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000818:	4b34      	ldr	r3, [pc, #208]	; (80008ec <lcd_char_cp+0x194>)
 800081a:	2280      	movs	r2, #128	; 0x80
 800081c:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 800081e:	4b34      	ldr	r3, [pc, #208]	; (80008f0 <lcd_char_cp+0x198>)
 8000820:	2220      	movs	r2, #32
 8000822:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000824:	4b32      	ldr	r3, [pc, #200]	; (80008f0 <lcd_char_cp+0x198>)
 8000826:	2210      	movs	r2, #16
 8000828:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 800082a:	4b31      	ldr	r3, [pc, #196]	; (80008f0 <lcd_char_cp+0x198>)
 800082c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000830:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000832:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000836:	f44f 7280 	mov.w	r2, #256	; 0x100
 800083a:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 800083c:	f7ff feb8 	bl	80005b0 <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000840:	4b2a      	ldr	r3, [pc, #168]	; (80008ec <lcd_char_cp+0x194>)
 8000842:	695b      	ldr	r3, [r3, #20]
 8000844:	4a29      	ldr	r2, [pc, #164]	; (80008ec <lcd_char_cp+0x194>)
 8000846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800084a:	6153      	str	r3, [r2, #20]

	if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	2b00      	cmp	r3, #0
 8000854:	d003      	beq.n	800085e <lcd_char_cp+0x106>
 8000856:	4b26      	ldr	r3, [pc, #152]	; (80008f0 <lcd_char_cp+0x198>)
 8000858:	2220      	movs	r2, #32
 800085a:	619a      	str	r2, [r3, #24]
 800085c:	e003      	b.n	8000866 <lcd_char_cp+0x10e>
 800085e:	4b24      	ldr	r3, [pc, #144]	; (80008f0 <lcd_char_cp+0x198>)
 8000860:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000864:	619a      	str	r2, [r3, #24]
	if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	f003 0302 	and.w	r3, r3, #2
 800086c:	2b00      	cmp	r3, #0
 800086e:	d003      	beq.n	8000878 <lcd_char_cp+0x120>
 8000870:	4b1f      	ldr	r3, [pc, #124]	; (80008f0 <lcd_char_cp+0x198>)
 8000872:	2210      	movs	r2, #16
 8000874:	619a      	str	r2, [r3, #24]
 8000876:	e003      	b.n	8000880 <lcd_char_cp+0x128>
 8000878:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <lcd_char_cp+0x198>)
 800087a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800087e:	619a      	str	r2, [r3, #24]
	if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	f003 0304 	and.w	r3, r3, #4
 8000886:	2b00      	cmp	r3, #0
 8000888:	d004      	beq.n	8000894 <lcd_char_cp+0x13c>
 800088a:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <lcd_char_cp+0x198>)
 800088c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000890:	619a      	str	r2, [r3, #24]
 8000892:	e003      	b.n	800089c <lcd_char_cp+0x144>
 8000894:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <lcd_char_cp+0x198>)
 8000896:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800089a:	619a      	str	r2, [r3, #24]
	if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	f003 0308 	and.w	r3, r3, #8
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d005      	beq.n	80008b2 <lcd_char_cp+0x15a>
 80008a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008ae:	619a      	str	r2, [r3, #24]
 80008b0:	e004      	b.n	80008bc <lcd_char_cp+0x164>
 80008b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80008ba:	619a      	str	r2, [r3, #24]

	lcd_delay();
 80008bc:	f7ff fe78 	bl	80005b0 <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 80008c0:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <lcd_char_cp+0x194>)
 80008c2:	2280      	movs	r2, #128	; 0x80
 80008c4:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 80008c6:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <lcd_char_cp+0x198>)
 80008c8:	2220      	movs	r2, #32
 80008ca:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 80008cc:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <lcd_char_cp+0x198>)
 80008ce:	2210      	movs	r2, #16
 80008d0:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 80008d2:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <lcd_char_cp+0x198>)
 80008d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008d8:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 80008da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	48000800 	.word	0x48000800
 80008f0:	48000400 	.word	0x48000400

080008f4 <lcd_out_cp>:

void lcd_out_cp(char *out_char)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	while(*out_char)
 80008fc:	e008      	b.n	8000910 <lcd_out_cp+0x1c>
	{
		lcd_char_cp(*out_char++);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	1c5a      	adds	r2, r3, #1
 8000902:	607a      	str	r2, [r7, #4]
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff ff26 	bl	8000758 <lcd_char_cp>
        lcd_delay();
 800090c:	f7ff fe50 	bl	80005b0 <lcd_delay>
	while(*out_char)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d1f2      	bne.n	80008fe <lcd_out_cp+0xa>
	}

}
 8000918:	bf00      	nop
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <lcd_init>:


void lcd_init(char bits, char font, char lines)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b082      	sub	sp, #8
 8000926:	af00      	add	r7, sp, #0
 8000928:	4603      	mov	r3, r0
 800092a:	71fb      	strb	r3, [r7, #7]
 800092c:	460b      	mov	r3, r1
 800092e:	71bb      	strb	r3, [r7, #6]
 8000930:	4613      	mov	r3, r2
 8000932:	717b      	strb	r3, [r7, #5]
    HAL_Delay(250);
 8000934:	20fa      	movs	r0, #250	; 0xfa
 8000936:	f001 f9df 	bl	8001cf8 <HAL_Delay>
		lcd_cmd(_RETURN_HOME);
 800093a:	2002      	movs	r0, #2
 800093c:	f7ff fe40 	bl	80005c0 <lcd_cmd>
    HAL_Delay(50);
 8000940:	2032      	movs	r0, #50	; 0x32
 8000942:	f001 f9d9 	bl	8001cf8 <HAL_Delay>
    lcd_cmd(0x20 | bits | font | lines);
 8000946:	79fa      	ldrb	r2, [r7, #7]
 8000948:	79bb      	ldrb	r3, [r7, #6]
 800094a:	4313      	orrs	r3, r2
 800094c:	b2da      	uxtb	r2, r3
 800094e:	797b      	ldrb	r3, [r7, #5]
 8000950:	4313      	orrs	r3, r2
 8000952:	b2db      	uxtb	r3, r3
 8000954:	f043 0320 	orr.w	r3, r3, #32
 8000958:	b2db      	uxtb	r3, r3
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff fe30 	bl	80005c0 <lcd_cmd>
    HAL_Delay(50);
 8000960:	2032      	movs	r0, #50	; 0x32
 8000962:	f001 f9c9 	bl	8001cf8 <HAL_Delay>
    lcd_cmd(_LCD_INIT);
 8000966:	2006      	movs	r0, #6
 8000968:	f7ff fe2a 	bl	80005c0 <lcd_cmd>
    HAL_Delay(50);
 800096c:	2032      	movs	r0, #50	; 0x32
 800096e:	f001 f9c3 	bl	8001cf8 <HAL_Delay>
    lcd_cmd(0x0E);
 8000972:	200e      	movs	r0, #14
 8000974:	f7ff fe24 	bl	80005c0 <lcd_cmd>
    HAL_Delay(50);
 8000978:	2032      	movs	r0, #50	; 0x32
 800097a:	f001 f9bd 	bl	8001cf8 <HAL_Delay>
    lcd_cmd(0x0C);
 800097e:	200c      	movs	r0, #12
 8000980:	f7ff fe1e 	bl	80005c0 <lcd_cmd>
    HAL_Delay(50);
 8000984:	2032      	movs	r0, #50	; 0x32
 8000986:	f001 f9b7 	bl	8001cf8 <HAL_Delay>
    lcd_cmd(0x01);
 800098a:	2001      	movs	r0, #1
 800098c:	f7ff fe18 	bl	80005c0 <lcd_cmd>
    HAL_Delay(100);
 8000990:	2064      	movs	r0, #100	; 0x64
 8000992:	f001 f9b1 	bl	8001cf8 <HAL_Delay>
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b082      	sub	sp, #8
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	4603      	mov	r3, r0
 80009a6:	460a      	mov	r2, r1
 80009a8:	71fb      	strb	r3, [r7, #7]
 80009aa:	4613      	mov	r3, r2
 80009ac:	71bb      	strb	r3, [r7, #6]
	if(row == 1)
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d106      	bne.n	80009c2 <lcd_gotoxy+0x24>
	{
		lcd_cmd(0x80 + (column - 1));
 80009b4:	79bb      	ldrb	r3, [r7, #6]
 80009b6:	337f      	adds	r3, #127	; 0x7f
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff fe00 	bl	80005c0 <lcd_cmd>
 80009c0:	e008      	b.n	80009d4 <lcd_gotoxy+0x36>
	}
	else if(row == 2)
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	2b02      	cmp	r3, #2
 80009c6:	d105      	bne.n	80009d4 <lcd_gotoxy+0x36>
	{
		lcd_cmd(0xC0 + (column - 1));
 80009c8:	79bb      	ldrb	r3, [r7, #6]
 80009ca:	3b41      	subs	r3, #65	; 0x41
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fdf6 	bl	80005c0 <lcd_cmd>
	}
    HAL_Delay(5);
 80009d4:	2005      	movs	r0, #5
 80009d6:	f001 f98f 	bl	8001cf8 <HAL_Delay>

}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <lcd_print>:
	lcd_gotoxy(row, column);
	lcd_char_cp(out_char);
}

void lcd_print(unsigned char row, unsigned char column, char *out_char)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b082      	sub	sp, #8
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	4603      	mov	r3, r0
 80009ea:	603a      	str	r2, [r7, #0]
 80009ec:	71fb      	strb	r3, [r7, #7]
 80009ee:	460b      	mov	r3, r1
 80009f0:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 80009f2:	79ba      	ldrb	r2, [r7, #6]
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	4611      	mov	r1, r2
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff ffd0 	bl	800099e <lcd_gotoxy>

	lcd_out_cp(out_char);
 80009fe:	6838      	ldr	r0, [r7, #0]
 8000a00:	f7ff ff78 	bl	80008f4 <lcd_out_cp>
	HAL_Delay(5);
 8000a04:	2005      	movs	r0, #5
 8000a06:	f001 f977 	bl	8001cf8 <HAL_Delay>

}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <lcd_clear>:
void lcd_clear(void) {
 8000a12:	b580      	push	{r7, lr}
 8000a14:	af00      	add	r7, sp, #0

	lcd_cmd(_CLEAR);
 8000a16:	2001      	movs	r0, #1
 8000a18:	f7ff fdd2 	bl	80005c0 <lcd_cmd>
    HAL_Delay(5);
 8000a1c:	2005      	movs	r0, #5
 8000a1e:	f001 f96b 	bl	8001cf8 <HAL_Delay>

}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <wypisz_tabele>:




void wypisz_tabele()
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b090      	sub	sp, #64	; 0x40
 8000a2c:	af02      	add	r7, sp, #8
	char pierwsza[20] = "id: ";
 8000a2e:	4a4a      	ldr	r2, [pc, #296]	; (8000b58 <wypisz_tabele+0x130>)
 8000a30:	f107 0318 	add.w	r3, r7, #24
 8000a34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a38:	6018      	str	r0, [r3, #0]
 8000a3a:	3304      	adds	r3, #4
 8000a3c:	7019      	strb	r1, [r3, #0]
 8000a3e:	f107 031d 	add.w	r3, r7, #29
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	f8c3 200b 	str.w	r2, [r3, #11]

	dodajZnak(pierwsza, '1');
 8000a4e:	f107 0318 	add.w	r3, r7, #24
 8000a52:	2131      	movs	r1, #49	; 0x31
 8000a54:	4618      	mov	r0, r3
 8000a56:	f000 f887 	bl	8000b68 <dodajZnak>
	int l_cyfr = liczba_cyfr(tablica[0]);
 8000a5a:	4b40      	ldr	r3, [pc, #256]	; (8000b5c <wypisz_tabele+0x134>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 f8a6 	bl	8000bb0 <liczba_cyfr>
 8000a64:	62f8      	str	r0, [r7, #44]	; 0x2c
	for(int i=0; i<l_cyfr; i++)
 8000a66:	2300      	movs	r3, #0
 8000a68:	637b      	str	r3, [r7, #52]	; 0x34
 8000a6a:	e008      	b.n	8000a7e <wypisz_tabele+0x56>
	{
		dodajZnak(pierwsza, ' ');
 8000a6c:	f107 0318 	add.w	r3, r7, #24
 8000a70:	2120      	movs	r1, #32
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 f878 	bl	8000b68 <dodajZnak>
	for(int i=0; i<l_cyfr; i++)
 8000a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	637b      	str	r3, [r7, #52]	; 0x34
 8000a7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a82:	429a      	cmp	r2, r3
 8000a84:	dbf2      	blt.n	8000a6c <wypisz_tabele+0x44>
	}

	dodajZnak(pierwsza, '|');
 8000a86:	f107 0318 	add.w	r3, r7, #24
 8000a8a:	217c      	movs	r1, #124	; 0x7c
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 f86b 	bl	8000b68 <dodajZnak>
	dodajZnak(pierwsza, ' ');
 8000a92:	f107 0318 	add.w	r3, r7, #24
 8000a96:	2120      	movs	r1, #32
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f000 f865 	bl	8000b68 <dodajZnak>
	dodajZnak(pierwsza, '2');
 8000a9e:	f107 0318 	add.w	r3, r7, #24
 8000aa2:	2132      	movs	r1, #50	; 0x32
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f000 f85f 	bl	8000b68 <dodajZnak>
	l_cyfr = liczba_cyfr(tablica[1]);
 8000aaa:	4b2c      	ldr	r3, [pc, #176]	; (8000b5c <wypisz_tabele+0x134>)
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 f87e 	bl	8000bb0 <liczba_cyfr>
 8000ab4:	62f8      	str	r0, [r7, #44]	; 0x2c
	for(int i=0; i<l_cyfr; i++)
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	633b      	str	r3, [r7, #48]	; 0x30
 8000aba:	e008      	b.n	8000ace <wypisz_tabele+0xa6>
	{
		dodajZnak(pierwsza, ' ');
 8000abc:	f107 0318 	add.w	r3, r7, #24
 8000ac0:	2120      	movs	r1, #32
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 f850 	bl	8000b68 <dodajZnak>
	for(int i=0; i<l_cyfr; i++)
 8000ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aca:	3301      	adds	r3, #1
 8000acc:	633b      	str	r3, [r7, #48]	; 0x30
 8000ace:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	dbf2      	blt.n	8000abc <wypisz_tabele+0x94>
	}

	dodajZnak(pierwsza, '|');
 8000ad6:	f107 0318 	add.w	r3, r7, #24
 8000ada:	217c      	movs	r1, #124	; 0x7c
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 f843 	bl	8000b68 <dodajZnak>
	dodajZnak(pierwsza, ' ');
 8000ae2:	f107 0318 	add.w	r3, r7, #24
 8000ae6:	2120      	movs	r1, #32
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f000 f83d 	bl	8000b68 <dodajZnak>
	dodajZnak(pierwsza, '3');
 8000aee:	f107 0318 	add.w	r3, r7, #24
 8000af2:	2133      	movs	r1, #51	; 0x33
 8000af4:	4618      	mov	r0, r3
 8000af6:	f000 f837 	bl	8000b68 <dodajZnak>


	char buff[20];

	lcd_clear();
 8000afa:	f7ff ff8a 	bl	8000a12 <lcd_clear>
	lcd_print(1, 1, pierwsza);
 8000afe:	f107 0318 	add.w	r3, r7, #24
 8000b02:	461a      	mov	r2, r3
 8000b04:	2101      	movs	r1, #1
 8000b06:	2001      	movs	r0, #1
 8000b08:	f7ff ff6b 	bl	80009e2 <lcd_print>
	sprintf(buff, "    %d | %d | %d", tablica[0], tablica[1], tablica[2]);
 8000b0c:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <wypisz_tabele+0x134>)
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <wypisz_tabele+0x134>)
 8000b12:	6859      	ldr	r1, [r3, #4]
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <wypisz_tabele+0x134>)
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	1d38      	adds	r0, r7, #4
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	4910      	ldr	r1, [pc, #64]	; (8000b60 <wypisz_tabele+0x138>)
 8000b20:	f004 ff5c 	bl	80059dc <siprintf>
	lcd_print(2, 1, buff);
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	461a      	mov	r2, r3
 8000b28:	2101      	movs	r1, #1
 8000b2a:	2002      	movs	r0, #2
 8000b2c:	f7ff ff59 	bl	80009e2 <lcd_print>

	while(1)
	{
		if(strcmp(przycisk(), "SELECT")==0)
 8000b30:	f000 fc44 	bl	80013bc <przycisk>
 8000b34:	4603      	mov	r3, r0
 8000b36:	490b      	ldr	r1, [pc, #44]	; (8000b64 <wypisz_tabele+0x13c>)
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff fb49 	bl	80001d0 <strcmp>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d004      	beq.n	8000b4e <wypisz_tabele+0x126>
		{
			break;
		}
		HAL_Delay(300);
 8000b44:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b48:	f001 f8d6 	bl	8001cf8 <HAL_Delay>
		if(strcmp(przycisk(), "SELECT")==0)
 8000b4c:	e7f0      	b.n	8000b30 <wypisz_tabele+0x108>
			break;
 8000b4e:	bf00      	nop
	}
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	08006bf4 	.word	0x08006bf4
 8000b5c:	20000178 	.word	0x20000178
 8000b60:	08006bd8 	.word	0x08006bd8
 8000b64:	08006bec 	.word	0x08006bec

08000b68 <dodajZnak>:

void dodajZnak(char tablica[], char znak)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	460b      	mov	r3, r1
 8000b72:	70fb      	strb	r3, [r7, #3]
    int i = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]

    while (tablica[i] != '\0')
 8000b78:	e002      	b.n	8000b80 <dodajZnak+0x18>
    {
        i++;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	60fb      	str	r3, [r7, #12]
    while (tablica[i] != '\0')
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d1f6      	bne.n	8000b7a <dodajZnak+0x12>
    }

    tablica[i] = znak;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	4413      	add	r3, r2
 8000b92:	78fa      	ldrb	r2, [r7, #3]
 8000b94:	701a      	strb	r2, [r3, #0]
    tablica[i + 1] = '\0';
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	701a      	strb	r2, [r3, #0]
}
 8000ba2:	bf00      	nop
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
	...

08000bb0 <liczba_cyfr>:

int liczba_cyfr(int liczba)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	int liczba_cyfr = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]

	if(liczba<10)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b09      	cmp	r3, #9
 8000bc0:	dc0c      	bgt.n	8000bdc <liczba_cyfr+0x2c>
	{
		return 1;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e00e      	b.n	8000be4 <liczba_cyfr+0x34>
	}

	while (liczba != 0)
	{
		liczba /= 10;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a09      	ldr	r2, [pc, #36]	; (8000bf0 <liczba_cyfr+0x40>)
 8000bca:	fb82 1203 	smull	r1, r2, r2, r3
 8000bce:	1092      	asrs	r2, r2, #2
 8000bd0:	17db      	asrs	r3, r3, #31
 8000bd2:	1ad3      	subs	r3, r2, r3
 8000bd4:	607b      	str	r3, [r7, #4]
	    liczba_cyfr++;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	60fb      	str	r3, [r7, #12]
	while (liczba != 0)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d1f1      	bne.n	8000bc6 <liczba_cyfr+0x16>
	}

	return liczba_cyfr;
 8000be2:	68fb      	ldr	r3, [r7, #12]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	66666667 	.word	0x66666667

08000bf4 <wybierz_id>:

int wybierz_id()
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
	int id=1;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	60fb      	str	r3, [r7, #12]
	char buff[10];

	lcd_clear();
 8000bfe:	f7ff ff08 	bl	8000a12 <lcd_clear>
	lcd_print(1, 1, "Wybierz ID: 1-3");
 8000c02:	4a35      	ldr	r2, [pc, #212]	; (8000cd8 <wybierz_id+0xe4>)
 8000c04:	2101      	movs	r1, #1
 8000c06:	2001      	movs	r0, #1
 8000c08:	f7ff feeb 	bl	80009e2 <lcd_print>
	lcd_print(2, 1, "ID = 1");
 8000c0c:	4a33      	ldr	r2, [pc, #204]	; (8000cdc <wybierz_id+0xe8>)
 8000c0e:	2101      	movs	r1, #1
 8000c10:	2002      	movs	r0, #2
 8000c12:	f7ff fee6 	bl	80009e2 <lcd_print>

	while(1)
	{
		if(strcmp(przycisk(), "RIGHT")==0)
 8000c16:	f000 fbd1 	bl	80013bc <przycisk>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	4930      	ldr	r1, [pc, #192]	; (8000ce0 <wybierz_id+0xec>)
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fad6 	bl	80001d0 <strcmp>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d11b      	bne.n	8000c62 <wybierz_id+0x6e>
		{
			id++;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	60fb      	str	r3, [r7, #12]
			if(id > 3)
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	2b03      	cmp	r3, #3
 8000c34:	dd01      	ble.n	8000c3a <wybierz_id+0x46>
			{
				id = 3;
 8000c36:	2303      	movs	r3, #3
 8000c38:	60fb      	str	r3, [r7, #12]
			}
			sprintf(buff, "ID = %d", id);
 8000c3a:	463b      	mov	r3, r7
 8000c3c:	68fa      	ldr	r2, [r7, #12]
 8000c3e:	4929      	ldr	r1, [pc, #164]	; (8000ce4 <wybierz_id+0xf0>)
 8000c40:	4618      	mov	r0, r3
 8000c42:	f004 fecb 	bl	80059dc <siprintf>
			lcd_clear();
 8000c46:	f7ff fee4 	bl	8000a12 <lcd_clear>
			lcd_print(1, 1, "Wybierz ID: 1-3");
 8000c4a:	4a23      	ldr	r2, [pc, #140]	; (8000cd8 <wybierz_id+0xe4>)
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	2001      	movs	r0, #1
 8000c50:	f7ff fec7 	bl	80009e2 <lcd_print>
			lcd_print(2, 1, buff);
 8000c54:	463b      	mov	r3, r7
 8000c56:	461a      	mov	r2, r3
 8000c58:	2101      	movs	r1, #1
 8000c5a:	2002      	movs	r0, #2
 8000c5c:	f7ff fec1 	bl	80009e2 <lcd_print>
 8000c60:	e02f      	b.n	8000cc2 <wybierz_id+0xce>
		}
		else if(strcmp(przycisk(), "LEFT")==0)
 8000c62:	f000 fbab 	bl	80013bc <przycisk>
 8000c66:	4603      	mov	r3, r0
 8000c68:	491f      	ldr	r1, [pc, #124]	; (8000ce8 <wybierz_id+0xf4>)
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fab0 	bl	80001d0 <strcmp>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d11b      	bne.n	8000cae <wybierz_id+0xba>
		{
			id--;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
			if(id < 1)
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	dc01      	bgt.n	8000c86 <wybierz_id+0x92>
			{
				id = 1;
 8000c82:	2301      	movs	r3, #1
 8000c84:	60fb      	str	r3, [r7, #12]
			}
			sprintf(buff, "ID = %d", id);
 8000c86:	463b      	mov	r3, r7
 8000c88:	68fa      	ldr	r2, [r7, #12]
 8000c8a:	4916      	ldr	r1, [pc, #88]	; (8000ce4 <wybierz_id+0xf0>)
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f004 fea5 	bl	80059dc <siprintf>
			lcd_clear();
 8000c92:	f7ff febe 	bl	8000a12 <lcd_clear>
			lcd_print(1, 1, "Wybierz ID: 1-3");
 8000c96:	4a10      	ldr	r2, [pc, #64]	; (8000cd8 <wybierz_id+0xe4>)
 8000c98:	2101      	movs	r1, #1
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f7ff fea1 	bl	80009e2 <lcd_print>
			lcd_print(2, 1, buff);
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	2002      	movs	r0, #2
 8000ca8:	f7ff fe9b 	bl	80009e2 <lcd_print>
 8000cac:	e009      	b.n	8000cc2 <wybierz_id+0xce>
		}
		else if(strcmp(przycisk(), "SELECT")==0)
 8000cae:	f000 fb85 	bl	80013bc <przycisk>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	490d      	ldr	r1, [pc, #52]	; (8000cec <wybierz_id+0xf8>)
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fa8a 	bl	80001d0 <strcmp>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d004      	beq.n	8000ccc <wybierz_id+0xd8>
		{
			break;
		}
		HAL_Delay(300);
 8000cc2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000cc6:	f001 f817 	bl	8001cf8 <HAL_Delay>
		if(strcmp(przycisk(), "RIGHT")==0)
 8000cca:	e7a4      	b.n	8000c16 <wybierz_id+0x22>
			break;
 8000ccc:	bf00      	nop
	}

	return id;
 8000cce:	68fb      	ldr	r3, [r7, #12]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	08006c08 	.word	0x08006c08
 8000cdc:	08006c18 	.word	0x08006c18
 8000ce0:	08006c20 	.word	0x08006c20
 8000ce4:	08006c28 	.word	0x08006c28
 8000ce8:	08006c30 	.word	0x08006c30
 8000cec:	08006bec 	.word	0x08006bec

08000cf0 <zgaduj>:

void zgaduj(int dolny_zakres, int gorny_zakres, int wylosowana_liczba, int id_gracza)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08c      	sub	sp, #48	; 0x30
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
 8000cfc:	603b      	str	r3, [r7, #0]
	int liczba_prob = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	62fb      	str	r3, [r7, #44]	; 0x2c
	int typowana_liczba = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62bb      	str	r3, [r7, #40]	; 0x28

	char buff[20];
	sprintf(buff, "%d", typowana_liczba);
 8000d06:	f107 0310 	add.w	r3, r7, #16
 8000d0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d0c:	49ae      	ldr	r1, [pc, #696]	; (8000fc8 <zgaduj+0x2d8>)
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f004 fe64 	bl	80059dc <siprintf>

	lcd_clear();
 8000d14:	f7ff fe7d 	bl	8000a12 <lcd_clear>
	lcd_print(1, 1, "Twoja liczba:");
 8000d18:	4aac      	ldr	r2, [pc, #688]	; (8000fcc <zgaduj+0x2dc>)
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	f7ff fe60 	bl	80009e2 <lcd_print>
	lcd_print(2, 1, buff);
 8000d22:	f107 0310 	add.w	r3, r7, #16
 8000d26:	461a      	mov	r2, r3
 8000d28:	2101      	movs	r1, #1
 8000d2a:	2002      	movs	r0, #2
 8000d2c:	f7ff fe59 	bl	80009e2 <lcd_print>


	while(1)
	{
		if(strcmp(przycisk(), "RIGHT")==0)
 8000d30:	f000 fb44 	bl	80013bc <przycisk>
 8000d34:	4603      	mov	r3, r0
 8000d36:	49a6      	ldr	r1, [pc, #664]	; (8000fd0 <zgaduj+0x2e0>)
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fa49 	bl	80001d0 <strcmp>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d11e      	bne.n	8000d82 <zgaduj+0x92>
		{
			typowana_liczba++;
 8000d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d46:	3301      	adds	r3, #1
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28
			if(typowana_liczba > gorny_zakres)
 8000d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	dd01      	ble.n	8000d56 <zgaduj+0x66>
			{
				typowana_liczba = gorny_zakres;
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	62bb      	str	r3, [r7, #40]	; 0x28
			}
			sprintf(buff, "%d", typowana_liczba);
 8000d56:	f107 0310 	add.w	r3, r7, #16
 8000d5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d5c:	499a      	ldr	r1, [pc, #616]	; (8000fc8 <zgaduj+0x2d8>)
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f004 fe3c 	bl	80059dc <siprintf>
			lcd_clear();
 8000d64:	f7ff fe55 	bl	8000a12 <lcd_clear>
			lcd_print(1, 1, "Twoja liczba:");
 8000d68:	4a98      	ldr	r2, [pc, #608]	; (8000fcc <zgaduj+0x2dc>)
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	f7ff fe38 	bl	80009e2 <lcd_print>
			lcd_print(2, 1, buff);
 8000d72:	f107 0310 	add.w	r3, r7, #16
 8000d76:	461a      	mov	r2, r3
 8000d78:	2101      	movs	r1, #1
 8000d7a:	2002      	movs	r0, #2
 8000d7c:	f7ff fe31 	bl	80009e2 <lcd_print>
 8000d80:	e119      	b.n	8000fb6 <zgaduj+0x2c6>
		}
		else if(strcmp(przycisk(), "UP")==0)
 8000d82:	f000 fb1b 	bl	80013bc <przycisk>
 8000d86:	4603      	mov	r3, r0
 8000d88:	4992      	ldr	r1, [pc, #584]	; (8000fd4 <zgaduj+0x2e4>)
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fa20 	bl	80001d0 <strcmp>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d11e      	bne.n	8000dd4 <zgaduj+0xe4>
		{
			typowana_liczba += 10;
 8000d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d98:	330a      	adds	r3, #10
 8000d9a:	62bb      	str	r3, [r7, #40]	; 0x28
			if(typowana_liczba > gorny_zakres)
 8000d9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	dd01      	ble.n	8000da8 <zgaduj+0xb8>
			{
				typowana_liczba = gorny_zakres;
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	62bb      	str	r3, [r7, #40]	; 0x28
			}
			sprintf(buff, "%d", typowana_liczba);
 8000da8:	f107 0310 	add.w	r3, r7, #16
 8000dac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000dae:	4986      	ldr	r1, [pc, #536]	; (8000fc8 <zgaduj+0x2d8>)
 8000db0:	4618      	mov	r0, r3
 8000db2:	f004 fe13 	bl	80059dc <siprintf>
			lcd_clear();
 8000db6:	f7ff fe2c 	bl	8000a12 <lcd_clear>
			lcd_print(1, 1, "Twoja liczba:");
 8000dba:	4a84      	ldr	r2, [pc, #528]	; (8000fcc <zgaduj+0x2dc>)
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f7ff fe0f 	bl	80009e2 <lcd_print>
			lcd_print(2, 1, buff);
 8000dc4:	f107 0310 	add.w	r3, r7, #16
 8000dc8:	461a      	mov	r2, r3
 8000dca:	2101      	movs	r1, #1
 8000dcc:	2002      	movs	r0, #2
 8000dce:	f7ff fe08 	bl	80009e2 <lcd_print>
 8000dd2:	e0f0      	b.n	8000fb6 <zgaduj+0x2c6>
		}
		else if(strcmp(przycisk(), "LEFT")==0)
 8000dd4:	f000 faf2 	bl	80013bc <przycisk>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	497f      	ldr	r1, [pc, #508]	; (8000fd8 <zgaduj+0x2e8>)
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff f9f7 	bl	80001d0 <strcmp>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d11e      	bne.n	8000e26 <zgaduj+0x136>
		{
			typowana_liczba--;
 8000de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dea:	3b01      	subs	r3, #1
 8000dec:	62bb      	str	r3, [r7, #40]	; 0x28
			if(typowana_liczba < dolny_zakres)
 8000dee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	da01      	bge.n	8000dfa <zgaduj+0x10a>
			{
				typowana_liczba = dolny_zakres;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	62bb      	str	r3, [r7, #40]	; 0x28
			}
			sprintf(buff, "%d", typowana_liczba);
 8000dfa:	f107 0310 	add.w	r3, r7, #16
 8000dfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e00:	4971      	ldr	r1, [pc, #452]	; (8000fc8 <zgaduj+0x2d8>)
 8000e02:	4618      	mov	r0, r3
 8000e04:	f004 fdea 	bl	80059dc <siprintf>
			lcd_clear();
 8000e08:	f7ff fe03 	bl	8000a12 <lcd_clear>
			lcd_print(1, 1, "Twoja liczba:");
 8000e0c:	4a6f      	ldr	r2, [pc, #444]	; (8000fcc <zgaduj+0x2dc>)
 8000e0e:	2101      	movs	r1, #1
 8000e10:	2001      	movs	r0, #1
 8000e12:	f7ff fde6 	bl	80009e2 <lcd_print>
			lcd_print(2, 1, buff);
 8000e16:	f107 0310 	add.w	r3, r7, #16
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	2002      	movs	r0, #2
 8000e20:	f7ff fddf 	bl	80009e2 <lcd_print>
 8000e24:	e0c7      	b.n	8000fb6 <zgaduj+0x2c6>
		}
		else if(strcmp(przycisk(), "DOWN")==0)
 8000e26:	f000 fac9 	bl	80013bc <przycisk>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	496b      	ldr	r1, [pc, #428]	; (8000fdc <zgaduj+0x2ec>)
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff f9ce 	bl	80001d0 <strcmp>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d11e      	bne.n	8000e78 <zgaduj+0x188>
		{
			typowana_liczba -= 10;
 8000e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e3c:	3b0a      	subs	r3, #10
 8000e3e:	62bb      	str	r3, [r7, #40]	; 0x28
			if(typowana_liczba < dolny_zakres)
 8000e40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	da01      	bge.n	8000e4c <zgaduj+0x15c>
			{
				typowana_liczba = dolny_zakres;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	62bb      	str	r3, [r7, #40]	; 0x28
			}
			sprintf(buff, "%d", typowana_liczba);
 8000e4c:	f107 0310 	add.w	r3, r7, #16
 8000e50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e52:	495d      	ldr	r1, [pc, #372]	; (8000fc8 <zgaduj+0x2d8>)
 8000e54:	4618      	mov	r0, r3
 8000e56:	f004 fdc1 	bl	80059dc <siprintf>
			lcd_clear();
 8000e5a:	f7ff fdda 	bl	8000a12 <lcd_clear>
			lcd_print(1, 1, "Twoja liczba:");
 8000e5e:	4a5b      	ldr	r2, [pc, #364]	; (8000fcc <zgaduj+0x2dc>)
 8000e60:	2101      	movs	r1, #1
 8000e62:	2001      	movs	r0, #1
 8000e64:	f7ff fdbd 	bl	80009e2 <lcd_print>
			lcd_print(2, 1, buff);
 8000e68:	f107 0310 	add.w	r3, r7, #16
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	2101      	movs	r1, #1
 8000e70:	2002      	movs	r0, #2
 8000e72:	f7ff fdb6 	bl	80009e2 <lcd_print>
 8000e76:	e09e      	b.n	8000fb6 <zgaduj+0x2c6>
		}
		else if(strcmp(przycisk(), "SELECT")==0)
 8000e78:	f000 faa0 	bl	80013bc <przycisk>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	4958      	ldr	r1, [pc, #352]	; (8000fe0 <zgaduj+0x2f0>)
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff f9a5 	bl	80001d0 <strcmp>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	f040 8094 	bne.w	8000fb6 <zgaduj+0x2c6>
		{
			liczba_prob++;
 8000e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e90:	3301      	adds	r3, #1
 8000e92:	62fb      	str	r3, [r7, #44]	; 0x2c

			if(typowana_liczba == wylosowana_liczba)
 8000e94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d135      	bne.n	8000f08 <zgaduj+0x218>
			{
				tablica[id_gracza-1]++;
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	4a50      	ldr	r2, [pc, #320]	; (8000fe4 <zgaduj+0x2f4>)
 8000ea2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ea6:	3201      	adds	r2, #1
 8000ea8:	494e      	ldr	r1, [pc, #312]	; (8000fe4 <zgaduj+0x2f4>)
 8000eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				sprintf(buff, "Liczba prob: %d", liczba_prob);
 8000eae:	f107 0310 	add.w	r3, r7, #16
 8000eb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000eb4:	494c      	ldr	r1, [pc, #304]	; (8000fe8 <zgaduj+0x2f8>)
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f004 fd90 	bl	80059dc <siprintf>
				lcd_clear();
 8000ebc:	f7ff fda9 	bl	8000a12 <lcd_clear>
				lcd_print(1, 1, "Udalo sie!");
 8000ec0:	4a4a      	ldr	r2, [pc, #296]	; (8000fec <zgaduj+0x2fc>)
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	f7ff fd8c 	bl	80009e2 <lcd_print>
				lcd_print(2, 1, buff);
 8000eca:	f107 0310 	add.w	r3, r7, #16
 8000ece:	461a      	mov	r2, r3
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	2002      	movs	r0, #2
 8000ed4:	f7ff fd85 	bl	80009e2 <lcd_print>

				for(int i=0; i<50; i++)
 8000ed8:	2300      	movs	r3, #0
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
 8000edc:	e00a      	b.n	8000ef4 <zgaduj+0x204>
				{
					HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000ede:	2120      	movs	r1, #32
 8000ee0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee4:	f002 fbf6 	bl	80036d4 <HAL_GPIO_TogglePin>
					HAL_Delay(75);
 8000ee8:	204b      	movs	r0, #75	; 0x4b
 8000eea:	f000 ff05 	bl	8001cf8 <HAL_Delay>
				for(int i=0; i<50; i++)
 8000eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef6:	2b31      	cmp	r3, #49	; 0x31
 8000ef8:	ddf1      	ble.n	8000ede <zgaduj+0x1ee>
				}
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2120      	movs	r1, #32
 8000efe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f02:	f002 fbcf 	bl	80036a4 <HAL_GPIO_WritePin>

				break;
 8000f06:	e05b      	b.n	8000fc0 <zgaduj+0x2d0>
			}
			else if(wylosowana_liczba < typowana_liczba)
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	da27      	bge.n	8000f60 <zgaduj+0x270>
			{
				lcd_clear();
 8000f10:	f7ff fd7f 	bl	8000a12 <lcd_clear>
				lcd_print(1, 1, "Wyloswana liczba");
 8000f14:	4a36      	ldr	r2, [pc, #216]	; (8000ff0 <zgaduj+0x300>)
 8000f16:	2101      	movs	r1, #1
 8000f18:	2001      	movs	r0, #1
 8000f1a:	f7ff fd62 	bl	80009e2 <lcd_print>
				lcd_print(2, 1, "jest mniejsza");
 8000f1e:	4a35      	ldr	r2, [pc, #212]	; (8000ff4 <zgaduj+0x304>)
 8000f20:	2101      	movs	r1, #1
 8000f22:	2002      	movs	r0, #2
 8000f24:	f7ff fd5d 	bl	80009e2 <lcd_print>
				HAL_Delay(2500);
 8000f28:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000f2c:	f000 fee4 	bl	8001cf8 <HAL_Delay>

				typowana_liczba = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	62bb      	str	r3, [r7, #40]	; 0x28
				sprintf(buff, "%d", typowana_liczba);
 8000f34:	f107 0310 	add.w	r3, r7, #16
 8000f38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f3a:	4923      	ldr	r1, [pc, #140]	; (8000fc8 <zgaduj+0x2d8>)
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f004 fd4d 	bl	80059dc <siprintf>
				lcd_clear();
 8000f42:	f7ff fd66 	bl	8000a12 <lcd_clear>
				lcd_print(1, 1, "Twoja liczba:");
 8000f46:	4a21      	ldr	r2, [pc, #132]	; (8000fcc <zgaduj+0x2dc>)
 8000f48:	2101      	movs	r1, #1
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f7ff fd49 	bl	80009e2 <lcd_print>
				lcd_print(2, 1, buff);
 8000f50:	f107 0310 	add.w	r3, r7, #16
 8000f54:	461a      	mov	r2, r3
 8000f56:	2101      	movs	r1, #1
 8000f58:	2002      	movs	r0, #2
 8000f5a:	f7ff fd42 	bl	80009e2 <lcd_print>
 8000f5e:	e02a      	b.n	8000fb6 <zgaduj+0x2c6>
			}
			else if(wylosowana_liczba > typowana_liczba)
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f64:	429a      	cmp	r2, r3
 8000f66:	dd26      	ble.n	8000fb6 <zgaduj+0x2c6>
			{
				lcd_clear();
 8000f68:	f7ff fd53 	bl	8000a12 <lcd_clear>
				lcd_print(1, 1, "Wyloswana liczba");
 8000f6c:	4a20      	ldr	r2, [pc, #128]	; (8000ff0 <zgaduj+0x300>)
 8000f6e:	2101      	movs	r1, #1
 8000f70:	2001      	movs	r0, #1
 8000f72:	f7ff fd36 	bl	80009e2 <lcd_print>
				lcd_print(2, 1, "jest wieksza");
 8000f76:	4a20      	ldr	r2, [pc, #128]	; (8000ff8 <zgaduj+0x308>)
 8000f78:	2101      	movs	r1, #1
 8000f7a:	2002      	movs	r0, #2
 8000f7c:	f7ff fd31 	bl	80009e2 <lcd_print>
				HAL_Delay(2500);
 8000f80:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000f84:	f000 feb8 	bl	8001cf8 <HAL_Delay>

				typowana_liczba = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62bb      	str	r3, [r7, #40]	; 0x28
				sprintf(buff, "%d", typowana_liczba);
 8000f8c:	f107 0310 	add.w	r3, r7, #16
 8000f90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f92:	490d      	ldr	r1, [pc, #52]	; (8000fc8 <zgaduj+0x2d8>)
 8000f94:	4618      	mov	r0, r3
 8000f96:	f004 fd21 	bl	80059dc <siprintf>
				lcd_clear();
 8000f9a:	f7ff fd3a 	bl	8000a12 <lcd_clear>
				lcd_print(1, 1, "Twoja liczba:");
 8000f9e:	4a0b      	ldr	r2, [pc, #44]	; (8000fcc <zgaduj+0x2dc>)
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	f7ff fd1d 	bl	80009e2 <lcd_print>
				lcd_print(2, 1, buff);
 8000fa8:	f107 0310 	add.w	r3, r7, #16
 8000fac:	461a      	mov	r2, r3
 8000fae:	2101      	movs	r1, #1
 8000fb0:	2002      	movs	r0, #2
 8000fb2:	f7ff fd16 	bl	80009e2 <lcd_print>
			}
		}
		HAL_Delay(300);
 8000fb6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000fba:	f000 fe9d 	bl	8001cf8 <HAL_Delay>
		if(strcmp(przycisk(), "RIGHT")==0)
 8000fbe:	e6b7      	b.n	8000d30 <zgaduj+0x40>
	}
}
 8000fc0:	bf00      	nop
 8000fc2:	3730      	adds	r7, #48	; 0x30
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	08006c38 	.word	0x08006c38
 8000fcc:	08006c3c 	.word	0x08006c3c
 8000fd0:	08006c20 	.word	0x08006c20
 8000fd4:	08006c4c 	.word	0x08006c4c
 8000fd8:	08006c30 	.word	0x08006c30
 8000fdc:	08006c50 	.word	0x08006c50
 8000fe0:	08006bec 	.word	0x08006bec
 8000fe4:	20000178 	.word	0x20000178
 8000fe8:	08006c58 	.word	0x08006c58
 8000fec:	08006c68 	.word	0x08006c68
 8000ff0:	08006c74 	.word	0x08006c74
 8000ff4:	08006c88 	.word	0x08006c88
 8000ff8:	08006c98 	.word	0x08006c98

08000ffc <losuj_liczbe>:

int losuj_liczbe(int dolna_granica, int gorna_granica)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
	return rand() % (gorna_granica - dolna_granica + 1) + dolna_granica;
 8001006:	f004 fbe9 	bl	80057dc <rand>
 800100a:	4602      	mov	r2, r0
 800100c:	6839      	ldr	r1, [r7, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	1acb      	subs	r3, r1, r3
 8001012:	3301      	adds	r3, #1
 8001014:	fb92 f1f3 	sdiv	r1, r2, r3
 8001018:	fb01 f303 	mul.w	r3, r1, r3
 800101c:	1ad2      	subs	r2, r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4413      	add	r3, r2
}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <ustaw_gorna_granice>:

int ustaw_gorna_granice()
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
	int gorna_granica = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]

	char buff[10];
	sprintf(buff, "%d", gorna_granica);
 8001036:	463b      	mov	r3, r7
 8001038:	68fa      	ldr	r2, [r7, #12]
 800103a:	4965      	ldr	r1, [pc, #404]	; (80011d0 <ustaw_gorna_granice+0x1a4>)
 800103c:	4618      	mov	r0, r3
 800103e:	f004 fccd 	bl	80059dc <siprintf>

	lcd_clear();
 8001042:	f7ff fce6 	bl	8000a12 <lcd_clear>
	lcd_print(1, 1, "Gorna granica:");
 8001046:	4a63      	ldr	r2, [pc, #396]	; (80011d4 <ustaw_gorna_granice+0x1a8>)
 8001048:	2101      	movs	r1, #1
 800104a:	2001      	movs	r0, #1
 800104c:	f7ff fcc9 	bl	80009e2 <lcd_print>
	lcd_print(2, 1, buff);
 8001050:	463b      	mov	r3, r7
 8001052:	461a      	mov	r2, r3
 8001054:	2101      	movs	r1, #1
 8001056:	2002      	movs	r0, #2
 8001058:	f7ff fcc3 	bl	80009e2 <lcd_print>

	while(1)
	{
		if(strcmp(przycisk(), "RIGHT")==0)
 800105c:	f000 f9ae 	bl	80013bc <przycisk>
 8001060:	4603      	mov	r3, r0
 8001062:	495d      	ldr	r1, [pc, #372]	; (80011d8 <ustaw_gorna_granice+0x1ac>)
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff f8b3 	bl	80001d0 <strcmp>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d11e      	bne.n	80010ae <ustaw_gorna_granice+0x82>
		{
			gorna_granica++;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	3301      	adds	r3, #1
 8001074:	60fb      	str	r3, [r7, #12]
			if(gorna_granica > MAX_GORNA_GRANICA)
 8001076:	4b59      	ldr	r3, [pc, #356]	; (80011dc <ustaw_gorna_granice+0x1b0>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	429a      	cmp	r2, r3
 800107e:	dd02      	ble.n	8001086 <ustaw_gorna_granice+0x5a>
			{
				gorna_granica = MAX_GORNA_GRANICA;
 8001080:	4b56      	ldr	r3, [pc, #344]	; (80011dc <ustaw_gorna_granice+0x1b0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	60fb      	str	r3, [r7, #12]
			}
			sprintf(buff, "%d", gorna_granica);
 8001086:	463b      	mov	r3, r7
 8001088:	68fa      	ldr	r2, [r7, #12]
 800108a:	4951      	ldr	r1, [pc, #324]	; (80011d0 <ustaw_gorna_granice+0x1a4>)
 800108c:	4618      	mov	r0, r3
 800108e:	f004 fca5 	bl	80059dc <siprintf>
			lcd_clear();
 8001092:	f7ff fcbe 	bl	8000a12 <lcd_clear>
			lcd_print(1, 1, "Gorna granica:");
 8001096:	4a4f      	ldr	r2, [pc, #316]	; (80011d4 <ustaw_gorna_granice+0x1a8>)
 8001098:	2101      	movs	r1, #1
 800109a:	2001      	movs	r0, #1
 800109c:	f7ff fca1 	bl	80009e2 <lcd_print>
			lcd_print(2, 1, buff);
 80010a0:	463b      	mov	r3, r7
 80010a2:	461a      	mov	r2, r3
 80010a4:	2101      	movs	r1, #1
 80010a6:	2002      	movs	r0, #2
 80010a8:	f7ff fc9b 	bl	80009e2 <lcd_print>
 80010ac:	e084      	b.n	80011b8 <ustaw_gorna_granice+0x18c>
		}
		else if(strcmp(przycisk(), "UP")==0)
 80010ae:	f000 f985 	bl	80013bc <przycisk>
 80010b2:	4603      	mov	r3, r0
 80010b4:	494a      	ldr	r1, [pc, #296]	; (80011e0 <ustaw_gorna_granice+0x1b4>)
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff f88a 	bl	80001d0 <strcmp>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d11e      	bne.n	8001100 <ustaw_gorna_granice+0xd4>
		{
			gorna_granica += 10;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	330a      	adds	r3, #10
 80010c6:	60fb      	str	r3, [r7, #12]
			if(gorna_granica > MAX_GORNA_GRANICA)
 80010c8:	4b44      	ldr	r3, [pc, #272]	; (80011dc <ustaw_gorna_granice+0x1b0>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	dd02      	ble.n	80010d8 <ustaw_gorna_granice+0xac>
			{
				gorna_granica = MAX_GORNA_GRANICA;
 80010d2:	4b42      	ldr	r3, [pc, #264]	; (80011dc <ustaw_gorna_granice+0x1b0>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	60fb      	str	r3, [r7, #12]
			}
			sprintf(buff, "%d", gorna_granica);
 80010d8:	463b      	mov	r3, r7
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	493c      	ldr	r1, [pc, #240]	; (80011d0 <ustaw_gorna_granice+0x1a4>)
 80010de:	4618      	mov	r0, r3
 80010e0:	f004 fc7c 	bl	80059dc <siprintf>
			lcd_clear();
 80010e4:	f7ff fc95 	bl	8000a12 <lcd_clear>
			lcd_print(1, 1, "Gorna granica:");
 80010e8:	4a3a      	ldr	r2, [pc, #232]	; (80011d4 <ustaw_gorna_granice+0x1a8>)
 80010ea:	2101      	movs	r1, #1
 80010ec:	2001      	movs	r0, #1
 80010ee:	f7ff fc78 	bl	80009e2 <lcd_print>
			lcd_print(2, 1, buff);
 80010f2:	463b      	mov	r3, r7
 80010f4:	461a      	mov	r2, r3
 80010f6:	2101      	movs	r1, #1
 80010f8:	2002      	movs	r0, #2
 80010fa:	f7ff fc72 	bl	80009e2 <lcd_print>
 80010fe:	e05b      	b.n	80011b8 <ustaw_gorna_granice+0x18c>
		}
		else if(strcmp(przycisk(), "LEFT")==0)
 8001100:	f000 f95c 	bl	80013bc <przycisk>
 8001104:	4603      	mov	r3, r0
 8001106:	4937      	ldr	r1, [pc, #220]	; (80011e4 <ustaw_gorna_granice+0x1b8>)
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff f861 	bl	80001d0 <strcmp>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d11e      	bne.n	8001152 <ustaw_gorna_granice+0x126>
		{
			gorna_granica--;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	3b01      	subs	r3, #1
 8001118:	60fb      	str	r3, [r7, #12]
			if(gorna_granica < MAX_DOLNA_GRANICA)
 800111a:	4b33      	ldr	r3, [pc, #204]	; (80011e8 <ustaw_gorna_granice+0x1bc>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	429a      	cmp	r2, r3
 8001122:	da02      	bge.n	800112a <ustaw_gorna_granice+0xfe>
			{
				gorna_granica = MAX_DOLNA_GRANICA;
 8001124:	4b30      	ldr	r3, [pc, #192]	; (80011e8 <ustaw_gorna_granice+0x1bc>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	60fb      	str	r3, [r7, #12]
			}
			sprintf(buff, "%d", gorna_granica);
 800112a:	463b      	mov	r3, r7
 800112c:	68fa      	ldr	r2, [r7, #12]
 800112e:	4928      	ldr	r1, [pc, #160]	; (80011d0 <ustaw_gorna_granice+0x1a4>)
 8001130:	4618      	mov	r0, r3
 8001132:	f004 fc53 	bl	80059dc <siprintf>
			lcd_clear();
 8001136:	f7ff fc6c 	bl	8000a12 <lcd_clear>
			lcd_print(1, 1, "Gorna granica:");
 800113a:	4a26      	ldr	r2, [pc, #152]	; (80011d4 <ustaw_gorna_granice+0x1a8>)
 800113c:	2101      	movs	r1, #1
 800113e:	2001      	movs	r0, #1
 8001140:	f7ff fc4f 	bl	80009e2 <lcd_print>
			lcd_print(2, 1, buff);
 8001144:	463b      	mov	r3, r7
 8001146:	461a      	mov	r2, r3
 8001148:	2101      	movs	r1, #1
 800114a:	2002      	movs	r0, #2
 800114c:	f7ff fc49 	bl	80009e2 <lcd_print>
 8001150:	e032      	b.n	80011b8 <ustaw_gorna_granice+0x18c>
		}
		else if(strcmp(przycisk(), "DOWN")==0)
 8001152:	f000 f933 	bl	80013bc <przycisk>
 8001156:	4603      	mov	r3, r0
 8001158:	4924      	ldr	r1, [pc, #144]	; (80011ec <ustaw_gorna_granice+0x1c0>)
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff f838 	bl	80001d0 <strcmp>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d11e      	bne.n	80011a4 <ustaw_gorna_granice+0x178>
		{
			gorna_granica -= 10;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	3b0a      	subs	r3, #10
 800116a:	60fb      	str	r3, [r7, #12]
			if(gorna_granica < MAX_DOLNA_GRANICA)
 800116c:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <ustaw_gorna_granice+0x1bc>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	68fa      	ldr	r2, [r7, #12]
 8001172:	429a      	cmp	r2, r3
 8001174:	da02      	bge.n	800117c <ustaw_gorna_granice+0x150>
			{
				gorna_granica = MAX_DOLNA_GRANICA;
 8001176:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <ustaw_gorna_granice+0x1bc>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	60fb      	str	r3, [r7, #12]
			}
			sprintf(buff, "%d", gorna_granica);
 800117c:	463b      	mov	r3, r7
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	4913      	ldr	r1, [pc, #76]	; (80011d0 <ustaw_gorna_granice+0x1a4>)
 8001182:	4618      	mov	r0, r3
 8001184:	f004 fc2a 	bl	80059dc <siprintf>
			lcd_clear();
 8001188:	f7ff fc43 	bl	8000a12 <lcd_clear>
			lcd_print(1, 1, "Gorna granica:");
 800118c:	4a11      	ldr	r2, [pc, #68]	; (80011d4 <ustaw_gorna_granice+0x1a8>)
 800118e:	2101      	movs	r1, #1
 8001190:	2001      	movs	r0, #1
 8001192:	f7ff fc26 	bl	80009e2 <lcd_print>
			lcd_print(2, 1, buff);
 8001196:	463b      	mov	r3, r7
 8001198:	461a      	mov	r2, r3
 800119a:	2101      	movs	r1, #1
 800119c:	2002      	movs	r0, #2
 800119e:	f7ff fc20 	bl	80009e2 <lcd_print>
 80011a2:	e009      	b.n	80011b8 <ustaw_gorna_granice+0x18c>
		}
		else if(strcmp(przycisk(), "SELECT")==0)
 80011a4:	f000 f90a 	bl	80013bc <przycisk>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4911      	ldr	r1, [pc, #68]	; (80011f0 <ustaw_gorna_granice+0x1c4>)
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f80f 	bl	80001d0 <strcmp>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d004      	beq.n	80011c2 <ustaw_gorna_granice+0x196>
		{
			break;
		}
		HAL_Delay(300);
 80011b8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80011bc:	f000 fd9c 	bl	8001cf8 <HAL_Delay>
		if(strcmp(przycisk(), "RIGHT")==0)
 80011c0:	e74c      	b.n	800105c <ustaw_gorna_granice+0x30>
			break;
 80011c2:	bf00      	nop
	}

	return gorna_granica;
 80011c4:	68fb      	ldr	r3, [r7, #12]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	08006c38 	.word	0x08006c38
 80011d4:	08006ca8 	.word	0x08006ca8
 80011d8:	08006c20 	.word	0x08006c20
 80011dc:	20000004 	.word	0x20000004
 80011e0:	08006c4c 	.word	0x08006c4c
 80011e4:	08006c30 	.word	0x08006c30
 80011e8:	20000000 	.word	0x20000000
 80011ec:	08006c50 	.word	0x08006c50
 80011f0:	08006bec 	.word	0x08006bec

080011f4 <ustaw_dolna_granice>:

int ustaw_dolna_granice()
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
	int dolna_granica = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]

	char buff[10];
	sprintf(buff, "%d", dolna_granica);
 80011fe:	463b      	mov	r3, r7
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	4965      	ldr	r1, [pc, #404]	; (8001398 <ustaw_dolna_granice+0x1a4>)
 8001204:	4618      	mov	r0, r3
 8001206:	f004 fbe9 	bl	80059dc <siprintf>

	lcd_clear();
 800120a:	f7ff fc02 	bl	8000a12 <lcd_clear>
	lcd_print(1, 1, "Dolna granica:");
 800120e:	4a63      	ldr	r2, [pc, #396]	; (800139c <ustaw_dolna_granice+0x1a8>)
 8001210:	2101      	movs	r1, #1
 8001212:	2001      	movs	r0, #1
 8001214:	f7ff fbe5 	bl	80009e2 <lcd_print>
	lcd_print(2, 1, buff);
 8001218:	463b      	mov	r3, r7
 800121a:	461a      	mov	r2, r3
 800121c:	2101      	movs	r1, #1
 800121e:	2002      	movs	r0, #2
 8001220:	f7ff fbdf 	bl	80009e2 <lcd_print>

	while(1)
	{
		if(strcmp(przycisk(), "RIGHT")==0)
 8001224:	f000 f8ca 	bl	80013bc <przycisk>
 8001228:	4603      	mov	r3, r0
 800122a:	495d      	ldr	r1, [pc, #372]	; (80013a0 <ustaw_dolna_granice+0x1ac>)
 800122c:	4618      	mov	r0, r3
 800122e:	f7fe ffcf 	bl	80001d0 <strcmp>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d11e      	bne.n	8001276 <ustaw_dolna_granice+0x82>
		{
			dolna_granica++;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	3301      	adds	r3, #1
 800123c:	60fb      	str	r3, [r7, #12]
			if(dolna_granica > MAX_GORNA_GRANICA)
 800123e:	4b59      	ldr	r3, [pc, #356]	; (80013a4 <ustaw_dolna_granice+0x1b0>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	429a      	cmp	r2, r3
 8001246:	dd02      	ble.n	800124e <ustaw_dolna_granice+0x5a>
			{
				dolna_granica = MAX_GORNA_GRANICA;
 8001248:	4b56      	ldr	r3, [pc, #344]	; (80013a4 <ustaw_dolna_granice+0x1b0>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	60fb      	str	r3, [r7, #12]
			}
			sprintf(buff, "%d", dolna_granica);
 800124e:	463b      	mov	r3, r7
 8001250:	68fa      	ldr	r2, [r7, #12]
 8001252:	4951      	ldr	r1, [pc, #324]	; (8001398 <ustaw_dolna_granice+0x1a4>)
 8001254:	4618      	mov	r0, r3
 8001256:	f004 fbc1 	bl	80059dc <siprintf>
			lcd_clear();
 800125a:	f7ff fbda 	bl	8000a12 <lcd_clear>
			lcd_print(1, 1, "Dolna granica:");
 800125e:	4a4f      	ldr	r2, [pc, #316]	; (800139c <ustaw_dolna_granice+0x1a8>)
 8001260:	2101      	movs	r1, #1
 8001262:	2001      	movs	r0, #1
 8001264:	f7ff fbbd 	bl	80009e2 <lcd_print>
			lcd_print(2, 1, buff);
 8001268:	463b      	mov	r3, r7
 800126a:	461a      	mov	r2, r3
 800126c:	2101      	movs	r1, #1
 800126e:	2002      	movs	r0, #2
 8001270:	f7ff fbb7 	bl	80009e2 <lcd_print>
 8001274:	e084      	b.n	8001380 <ustaw_dolna_granice+0x18c>
		}
		else if(strcmp(przycisk(), "UP")==0)
 8001276:	f000 f8a1 	bl	80013bc <przycisk>
 800127a:	4603      	mov	r3, r0
 800127c:	494a      	ldr	r1, [pc, #296]	; (80013a8 <ustaw_dolna_granice+0x1b4>)
 800127e:	4618      	mov	r0, r3
 8001280:	f7fe ffa6 	bl	80001d0 <strcmp>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d11e      	bne.n	80012c8 <ustaw_dolna_granice+0xd4>
		{
			dolna_granica += 10;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	330a      	adds	r3, #10
 800128e:	60fb      	str	r3, [r7, #12]
			if(dolna_granica > MAX_GORNA_GRANICA)
 8001290:	4b44      	ldr	r3, [pc, #272]	; (80013a4 <ustaw_dolna_granice+0x1b0>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68fa      	ldr	r2, [r7, #12]
 8001296:	429a      	cmp	r2, r3
 8001298:	dd02      	ble.n	80012a0 <ustaw_dolna_granice+0xac>
			{
				dolna_granica = MAX_GORNA_GRANICA;
 800129a:	4b42      	ldr	r3, [pc, #264]	; (80013a4 <ustaw_dolna_granice+0x1b0>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	60fb      	str	r3, [r7, #12]
			}
			sprintf(buff, "%d", dolna_granica);
 80012a0:	463b      	mov	r3, r7
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	493c      	ldr	r1, [pc, #240]	; (8001398 <ustaw_dolna_granice+0x1a4>)
 80012a6:	4618      	mov	r0, r3
 80012a8:	f004 fb98 	bl	80059dc <siprintf>
			lcd_clear();
 80012ac:	f7ff fbb1 	bl	8000a12 <lcd_clear>
			lcd_print(1, 1, "Dolna granica:");
 80012b0:	4a3a      	ldr	r2, [pc, #232]	; (800139c <ustaw_dolna_granice+0x1a8>)
 80012b2:	2101      	movs	r1, #1
 80012b4:	2001      	movs	r0, #1
 80012b6:	f7ff fb94 	bl	80009e2 <lcd_print>
			lcd_print(2, 1, buff);
 80012ba:	463b      	mov	r3, r7
 80012bc:	461a      	mov	r2, r3
 80012be:	2101      	movs	r1, #1
 80012c0:	2002      	movs	r0, #2
 80012c2:	f7ff fb8e 	bl	80009e2 <lcd_print>
 80012c6:	e05b      	b.n	8001380 <ustaw_dolna_granice+0x18c>
		}
		else if(strcmp(przycisk(), "LEFT")==0)
 80012c8:	f000 f878 	bl	80013bc <przycisk>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4937      	ldr	r1, [pc, #220]	; (80013ac <ustaw_dolna_granice+0x1b8>)
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7fe ff7d 	bl	80001d0 <strcmp>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d11e      	bne.n	800131a <ustaw_dolna_granice+0x126>
		{
			dolna_granica--;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	3b01      	subs	r3, #1
 80012e0:	60fb      	str	r3, [r7, #12]
			if(dolna_granica < MAX_DOLNA_GRANICA)
 80012e2:	4b33      	ldr	r3, [pc, #204]	; (80013b0 <ustaw_dolna_granice+0x1bc>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	da02      	bge.n	80012f2 <ustaw_dolna_granice+0xfe>
			{
				dolna_granica = MAX_DOLNA_GRANICA;
 80012ec:	4b30      	ldr	r3, [pc, #192]	; (80013b0 <ustaw_dolna_granice+0x1bc>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	60fb      	str	r3, [r7, #12]
			}
			sprintf(buff, "%d", dolna_granica);
 80012f2:	463b      	mov	r3, r7
 80012f4:	68fa      	ldr	r2, [r7, #12]
 80012f6:	4928      	ldr	r1, [pc, #160]	; (8001398 <ustaw_dolna_granice+0x1a4>)
 80012f8:	4618      	mov	r0, r3
 80012fa:	f004 fb6f 	bl	80059dc <siprintf>
			lcd_clear();
 80012fe:	f7ff fb88 	bl	8000a12 <lcd_clear>
			lcd_print(1, 1, "Dolna granica:");
 8001302:	4a26      	ldr	r2, [pc, #152]	; (800139c <ustaw_dolna_granice+0x1a8>)
 8001304:	2101      	movs	r1, #1
 8001306:	2001      	movs	r0, #1
 8001308:	f7ff fb6b 	bl	80009e2 <lcd_print>
			lcd_print(2, 1, buff);
 800130c:	463b      	mov	r3, r7
 800130e:	461a      	mov	r2, r3
 8001310:	2101      	movs	r1, #1
 8001312:	2002      	movs	r0, #2
 8001314:	f7ff fb65 	bl	80009e2 <lcd_print>
 8001318:	e032      	b.n	8001380 <ustaw_dolna_granice+0x18c>
		}
		else if(strcmp(przycisk(), "DOWN")==0)
 800131a:	f000 f84f 	bl	80013bc <przycisk>
 800131e:	4603      	mov	r3, r0
 8001320:	4924      	ldr	r1, [pc, #144]	; (80013b4 <ustaw_dolna_granice+0x1c0>)
 8001322:	4618      	mov	r0, r3
 8001324:	f7fe ff54 	bl	80001d0 <strcmp>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d11e      	bne.n	800136c <ustaw_dolna_granice+0x178>
		{
			dolna_granica -= 10;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	3b0a      	subs	r3, #10
 8001332:	60fb      	str	r3, [r7, #12]
			if(dolna_granica < MAX_DOLNA_GRANICA)
 8001334:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <ustaw_dolna_granice+0x1bc>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	429a      	cmp	r2, r3
 800133c:	da02      	bge.n	8001344 <ustaw_dolna_granice+0x150>
			{
				dolna_granica = MAX_DOLNA_GRANICA;
 800133e:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <ustaw_dolna_granice+0x1bc>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	60fb      	str	r3, [r7, #12]
			}
			sprintf(buff, "%d", dolna_granica);
 8001344:	463b      	mov	r3, r7
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	4913      	ldr	r1, [pc, #76]	; (8001398 <ustaw_dolna_granice+0x1a4>)
 800134a:	4618      	mov	r0, r3
 800134c:	f004 fb46 	bl	80059dc <siprintf>
			lcd_clear();
 8001350:	f7ff fb5f 	bl	8000a12 <lcd_clear>
			lcd_print(1, 1, "Dolna granica:");
 8001354:	4a11      	ldr	r2, [pc, #68]	; (800139c <ustaw_dolna_granice+0x1a8>)
 8001356:	2101      	movs	r1, #1
 8001358:	2001      	movs	r0, #1
 800135a:	f7ff fb42 	bl	80009e2 <lcd_print>
			lcd_print(2, 1, buff);
 800135e:	463b      	mov	r3, r7
 8001360:	461a      	mov	r2, r3
 8001362:	2101      	movs	r1, #1
 8001364:	2002      	movs	r0, #2
 8001366:	f7ff fb3c 	bl	80009e2 <lcd_print>
 800136a:	e009      	b.n	8001380 <ustaw_dolna_granice+0x18c>
		}
		else if(strcmp(przycisk(), "SELECT")==0)
 800136c:	f000 f826 	bl	80013bc <przycisk>
 8001370:	4603      	mov	r3, r0
 8001372:	4911      	ldr	r1, [pc, #68]	; (80013b8 <ustaw_dolna_granice+0x1c4>)
 8001374:	4618      	mov	r0, r3
 8001376:	f7fe ff2b 	bl	80001d0 <strcmp>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d004      	beq.n	800138a <ustaw_dolna_granice+0x196>
		{
			break;
		}
		HAL_Delay(300);
 8001380:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001384:	f000 fcb8 	bl	8001cf8 <HAL_Delay>
		if(strcmp(przycisk(), "RIGHT")==0)
 8001388:	e74c      	b.n	8001224 <ustaw_dolna_granice+0x30>
			break;
 800138a:	bf00      	nop
	}

	return dolna_granica;
 800138c:	68fb      	ldr	r3, [r7, #12]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	08006c38 	.word	0x08006c38
 800139c:	08006cb8 	.word	0x08006cb8
 80013a0:	08006c20 	.word	0x08006c20
 80013a4:	20000004 	.word	0x20000004
 80013a8:	08006c4c 	.word	0x08006c4c
 80013ac:	08006c30 	.word	0x08006c30
 80013b0:	20000000 	.word	0x20000000
 80013b4:	08006c50 	.word	0x08006c50
 80013b8:	08006bec 	.word	0x08006bec

080013bc <przycisk>:

char *przycisk()
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
	uint32_t analogValue;

	HAL_ADC_Start(&hadc1);
 80013c2:	4818      	ldr	r0, [pc, #96]	; (8001424 <przycisk+0x68>)
 80013c4:	f000 fff0 	bl	80023a8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80013c8:	f04f 31ff 	mov.w	r1, #4294967295
 80013cc:	4815      	ldr	r0, [pc, #84]	; (8001424 <przycisk+0x68>)
 80013ce:	f001 f8a5 	bl	800251c <HAL_ADC_PollForConversion>
	analogValue = HAL_ADC_GetValue(&hadc1);
 80013d2:	4814      	ldr	r0, [pc, #80]	; (8001424 <przycisk+0x68>)
 80013d4:	f001 f97a 	bl	80026cc <HAL_ADC_GetValue>
 80013d8:	6078      	str	r0, [r7, #4]

	if(analogValue<100)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b63      	cmp	r3, #99	; 0x63
 80013de:	d801      	bhi.n	80013e4 <przycisk+0x28>
	{
		  return "RIGHT";
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <przycisk+0x6c>)
 80013e2:	e01a      	b.n	800141a <przycisk+0x5e>
	}
	else if(analogValue<700)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80013ea:	d201      	bcs.n	80013f0 <przycisk+0x34>
	{
		  return "UP";
 80013ec:	4b0f      	ldr	r3, [pc, #60]	; (800142c <przycisk+0x70>)
 80013ee:	e014      	b.n	800141a <przycisk+0x5e>
	}
	else if(analogValue<1600)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80013f6:	d201      	bcs.n	80013fc <przycisk+0x40>
	{
		  return "DOWN";
 80013f8:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <przycisk+0x74>)
 80013fa:	e00e      	b.n	800141a <przycisk+0x5e>
	}
	else if(analogValue<2700)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f640 228b 	movw	r2, #2699	; 0xa8b
 8001402:	4293      	cmp	r3, r2
 8001404:	d801      	bhi.n	800140a <przycisk+0x4e>
	{
		  return "LEFT";
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <przycisk+0x78>)
 8001408:	e007      	b.n	800141a <przycisk+0x5e>
	}
	else if(analogValue<3850)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f640 7209 	movw	r2, #3849	; 0xf09
 8001410:	4293      	cmp	r3, r2
 8001412:	d801      	bhi.n	8001418 <przycisk+0x5c>
	{
		  return "SELECT";
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <przycisk+0x7c>)
 8001416:	e000      	b.n	800141a <przycisk+0x5e>
	}
	else
	{
		  return "NIC";
 8001418:	4b08      	ldr	r3, [pc, #32]	; (800143c <przycisk+0x80>)
	}
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	2000008c 	.word	0x2000008c
 8001428:	08006c20 	.word	0x08006c20
 800142c:	08006c4c 	.word	0x08006c4c
 8001430:	08006c50 	.word	0x08006c50
 8001434:	08006c30 	.word	0x08006c30
 8001438:	08006bec 	.word	0x08006bec
 800143c:	08006cc8 	.word	0x08006cc8

08001440 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001446:	f000 fbe2 	bl	8001c0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800144a:	f000 f863 	bl	8001514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800144e:	f000 f94d 	bl	80016ec <MX_GPIO_Init>
  MX_ADC1_Init();
 8001452:	f000 f8a5 	bl	80015a0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001456:	f000 f919 	bl	800168c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  lcd_init(_LCD_4BIT, _LCD_FONT_5x8, _LCD_2LINE);
 800145a:	2208      	movs	r2, #8
 800145c:	2100      	movs	r1, #0
 800145e:	2000      	movs	r0, #0
 8001460:	f7ff fa5f 	bl	8000922 <lcd_init>
  srand(time(NULL));
 8001464:	2000      	movs	r0, #0
 8001466:	f004 fb25 	bl	8005ab4 <time>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	4613      	mov	r3, r2
 8001470:	4618      	mov	r0, r3
 8001472:	f004 f985 	bl	8005780 <srand>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  int id = wybierz_id();
 8001476:	f7ff fbbd 	bl	8000bf4 <wybierz_id>
 800147a:	6078      	str	r0, [r7, #4]
	  HAL_Delay(500);
 800147c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001480:	f000 fc3a 	bl	8001cf8 <HAL_Delay>

	  int dolna_granica = ustaw_dolna_granice();
 8001484:	f7ff feb6 	bl	80011f4 <ustaw_dolna_granice>
 8001488:	60f8      	str	r0, [r7, #12]
	  HAL_Delay(500);
 800148a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800148e:	f000 fc33 	bl	8001cf8 <HAL_Delay>

	  int gorna_granica = ustaw_gorna_granice();
 8001492:	f7ff fdcb 	bl	800102c <ustaw_gorna_granice>
 8001496:	60b8      	str	r0, [r7, #8]
	  HAL_Delay(500);
 8001498:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800149c:	f000 fc2c 	bl	8001cf8 <HAL_Delay>

	  while(gorna_granica <= dolna_granica)
 80014a0:	e01d      	b.n	80014de <main+0x9e>
	  {
		  lcd_clear();
 80014a2:	f7ff fab6 	bl	8000a12 <lcd_clear>
	  	  lcd_print(1, 1, "Niepoprawny");
 80014a6:	4a19      	ldr	r2, [pc, #100]	; (800150c <main+0xcc>)
 80014a8:	2101      	movs	r1, #1
 80014aa:	2001      	movs	r0, #1
 80014ac:	f7ff fa99 	bl	80009e2 <lcd_print>
	  	  lcd_print(2, 1, "Zakres!");
 80014b0:	4a17      	ldr	r2, [pc, #92]	; (8001510 <main+0xd0>)
 80014b2:	2101      	movs	r1, #1
 80014b4:	2002      	movs	r0, #2
 80014b6:	f7ff fa94 	bl	80009e2 <lcd_print>
	  	  HAL_Delay(2500);
 80014ba:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80014be:	f000 fc1b 	bl	8001cf8 <HAL_Delay>
	  	  dolna_granica = ustaw_dolna_granice();
 80014c2:	f7ff fe97 	bl	80011f4 <ustaw_dolna_granice>
 80014c6:	60f8      	str	r0, [r7, #12]
	  	  HAL_Delay(500);
 80014c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014cc:	f000 fc14 	bl	8001cf8 <HAL_Delay>
	  	  gorna_granica = ustaw_gorna_granice();
 80014d0:	f7ff fdac 	bl	800102c <ustaw_gorna_granice>
 80014d4:	60b8      	str	r0, [r7, #8]
	  	  HAL_Delay(500);
 80014d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014da:	f000 fc0d 	bl	8001cf8 <HAL_Delay>
	  while(gorna_granica <= dolna_granica)
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	dddd      	ble.n	80014a2 <main+0x62>
	  }

	  int wylosowana_liczba = losuj_liczbe(dolna_granica, gorna_granica);
 80014e6:	68b9      	ldr	r1, [r7, #8]
 80014e8:	68f8      	ldr	r0, [r7, #12]
 80014ea:	f7ff fd87 	bl	8000ffc <losuj_liczbe>
 80014ee:	6038      	str	r0, [r7, #0]

	  zgaduj(dolna_granica, gorna_granica, wylosowana_liczba, id);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	68b9      	ldr	r1, [r7, #8]
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f7ff fbfa 	bl	8000cf0 <zgaduj>

	  wypisz_tabele();
 80014fc:	f7ff fa94 	bl	8000a28 <wypisz_tabele>
	  HAL_Delay(500);
 8001500:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001504:	f000 fbf8 	bl	8001cf8 <HAL_Delay>
  {
 8001508:	e7b5      	b.n	8001476 <main+0x36>
 800150a:	bf00      	nop
 800150c:	08006ccc 	.word	0x08006ccc
 8001510:	08006cd8 	.word	0x08006cd8

08001514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b096      	sub	sp, #88	; 0x58
 8001518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	2244      	movs	r2, #68	; 0x44
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f004 fabd 	bl	8005aa2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001528:	463b      	mov	r3, r7
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]
 8001534:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001536:	f44f 7000 	mov.w	r0, #512	; 0x200
 800153a:	f002 f8f3 	bl	8003724 <HAL_PWREx_ControlVoltageScaling>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001544:	f000 f94a 	bl	80017dc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001548:	2310      	movs	r3, #16
 800154a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800154c:	2301      	movs	r3, #1
 800154e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001554:	2360      	movs	r3, #96	; 0x60
 8001556:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001558:	2300      	movs	r3, #0
 800155a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	4618      	mov	r0, r3
 8001562:	f002 f935 	bl	80037d0 <HAL_RCC_OscConfig>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800156c:	f000 f936 	bl	80017dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001570:	230f      	movs	r3, #15
 8001572:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001574:	2300      	movs	r3, #0
 8001576:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001578:	2300      	movs	r3, #0
 800157a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001580:	2300      	movs	r3, #0
 8001582:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001584:	463b      	mov	r3, r7
 8001586:	2100      	movs	r1, #0
 8001588:	4618      	mov	r0, r3
 800158a:	f002 fcfd 	bl	8003f88 <HAL_RCC_ClockConfig>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001594:	f000 f922 	bl	80017dc <Error_Handler>
  }
}
 8001598:	bf00      	nop
 800159a:	3758      	adds	r7, #88	; 0x58
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08a      	sub	sp, #40	; 0x28
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80015a6:	f107 031c 	add.w	r3, r7, #28
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
 80015c0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80015c2:	4b2f      	ldr	r3, [pc, #188]	; (8001680 <MX_ADC1_Init+0xe0>)
 80015c4:	4a2f      	ldr	r2, [pc, #188]	; (8001684 <MX_ADC1_Init+0xe4>)
 80015c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80015c8:	4b2d      	ldr	r3, [pc, #180]	; (8001680 <MX_ADC1_Init+0xe0>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015ce:	4b2c      	ldr	r3, [pc, #176]	; (8001680 <MX_ADC1_Init+0xe0>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015d4:	4b2a      	ldr	r3, [pc, #168]	; (8001680 <MX_ADC1_Init+0xe0>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015da:	4b29      	ldr	r3, [pc, #164]	; (8001680 <MX_ADC1_Init+0xe0>)
 80015dc:	2200      	movs	r2, #0
 80015de:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015e0:	4b27      	ldr	r3, [pc, #156]	; (8001680 <MX_ADC1_Init+0xe0>)
 80015e2:	2204      	movs	r2, #4
 80015e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80015e6:	4b26      	ldr	r3, [pc, #152]	; (8001680 <MX_ADC1_Init+0xe0>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015ec:	4b24      	ldr	r3, [pc, #144]	; (8001680 <MX_ADC1_Init+0xe0>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80015f2:	4b23      	ldr	r3, [pc, #140]	; (8001680 <MX_ADC1_Init+0xe0>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015f8:	4b21      	ldr	r3, [pc, #132]	; (8001680 <MX_ADC1_Init+0xe0>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001600:	4b1f      	ldr	r3, [pc, #124]	; (8001680 <MX_ADC1_Init+0xe0>)
 8001602:	2200      	movs	r2, #0
 8001604:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001606:	4b1e      	ldr	r3, [pc, #120]	; (8001680 <MX_ADC1_Init+0xe0>)
 8001608:	2200      	movs	r2, #0
 800160a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800160c:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <MX_ADC1_Init+0xe0>)
 800160e:	2200      	movs	r2, #0
 8001610:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001614:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <MX_ADC1_Init+0xe0>)
 8001616:	2200      	movs	r2, #0
 8001618:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800161a:	4b19      	ldr	r3, [pc, #100]	; (8001680 <MX_ADC1_Init+0xe0>)
 800161c:	2200      	movs	r2, #0
 800161e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001622:	4817      	ldr	r0, [pc, #92]	; (8001680 <MX_ADC1_Init+0xe0>)
 8001624:	f000 fd70 	bl	8002108 <HAL_ADC_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800162e:	f000 f8d5 	bl	80017dc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001636:	f107 031c 	add.w	r3, r7, #28
 800163a:	4619      	mov	r1, r3
 800163c:	4810      	ldr	r0, [pc, #64]	; (8001680 <MX_ADC1_Init+0xe0>)
 800163e:	f001 fcf1 	bl	8003024 <HAL_ADCEx_MultiModeConfigChannel>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001648:	f000 f8c8 	bl	80017dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800164c:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <MX_ADC1_Init+0xe8>)
 800164e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001650:	2306      	movs	r3, #6
 8001652:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001658:	237f      	movs	r3, #127	; 0x7f
 800165a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800165c:	2304      	movs	r3, #4
 800165e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	4619      	mov	r1, r3
 8001668:	4805      	ldr	r0, [pc, #20]	; (8001680 <MX_ADC1_Init+0xe0>)
 800166a:	f001 f83d 	bl	80026e8 <HAL_ADC_ConfigChannel>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001674:	f000 f8b2 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001678:	bf00      	nop
 800167a:	3728      	adds	r7, #40	; 0x28
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	2000008c 	.word	0x2000008c
 8001684:	50040000 	.word	0x50040000
 8001688:	14f00020 	.word	0x14f00020

0800168c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001690:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <MX_USART2_UART_Init+0x58>)
 8001692:	4a15      	ldr	r2, [pc, #84]	; (80016e8 <MX_USART2_UART_Init+0x5c>)
 8001694:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001696:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <MX_USART2_UART_Init+0x58>)
 8001698:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800169c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800169e:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <MX_USART2_UART_Init+0x58>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016a4:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <MX_USART2_UART_Init+0x58>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016aa:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <MX_USART2_UART_Init+0x58>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <MX_USART2_UART_Init+0x58>)
 80016b2:	220c      	movs	r2, #12
 80016b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b6:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <MX_USART2_UART_Init+0x58>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016bc:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <MX_USART2_UART_Init+0x58>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016c2:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <MX_USART2_UART_Init+0x58>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <MX_USART2_UART_Init+0x58>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ce:	4805      	ldr	r0, [pc, #20]	; (80016e4 <MX_USART2_UART_Init+0x58>)
 80016d0:	f003 fb3a 	bl	8004d48 <HAL_UART_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80016da:	f000 f87f 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	200000f0 	.word	0x200000f0
 80016e8:	40004400 	.word	0x40004400

080016ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f2:	f107 030c 	add.w	r3, r7, #12
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]
 8001700:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001702:	4b33      	ldr	r3, [pc, #204]	; (80017d0 <MX_GPIO_Init+0xe4>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001706:	4a32      	ldr	r2, [pc, #200]	; (80017d0 <MX_GPIO_Init+0xe4>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800170e:	4b30      	ldr	r3, [pc, #192]	; (80017d0 <MX_GPIO_Init+0xe4>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800171a:	4b2d      	ldr	r3, [pc, #180]	; (80017d0 <MX_GPIO_Init+0xe4>)
 800171c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171e:	4a2c      	ldr	r2, [pc, #176]	; (80017d0 <MX_GPIO_Init+0xe4>)
 8001720:	f043 0302 	orr.w	r3, r3, #2
 8001724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001726:	4b2a      	ldr	r3, [pc, #168]	; (80017d0 <MX_GPIO_Init+0xe4>)
 8001728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001732:	4b27      	ldr	r3, [pc, #156]	; (80017d0 <MX_GPIO_Init+0xe4>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001736:	4a26      	ldr	r2, [pc, #152]	; (80017d0 <MX_GPIO_Init+0xe4>)
 8001738:	f043 0304 	orr.w	r3, r3, #4
 800173c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800173e:	4b24      	ldr	r3, [pc, #144]	; (80017d0 <MX_GPIO_Init+0xe4>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001742:	f003 0304 	and.w	r3, r3, #4
 8001746:	603b      	str	r3, [r7, #0]
 8001748:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LCD_D7_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 800174a:	2200      	movs	r2, #0
 800174c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001750:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001754:	f001 ffa6 	bl	80036a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin, GPIO_PIN_RESET);
 8001758:	2200      	movs	r2, #0
 800175a:	f44f 6186 	mov.w	r1, #1072	; 0x430
 800175e:	481d      	ldr	r0, [pc, #116]	; (80017d4 <MX_GPIO_Init+0xe8>)
 8001760:	f001 ffa0 	bl	80036a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8001764:	2200      	movs	r2, #0
 8001766:	2180      	movs	r1, #128	; 0x80
 8001768:	481b      	ldr	r0, [pc, #108]	; (80017d8 <MX_GPIO_Init+0xec>)
 800176a:	f001 ff9b 	bl	80036a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD2_Pin LCD_D7_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LCD_D7_Pin|LCD_RS_Pin;
 800176e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001772:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001774:	2301      	movs	r3, #1
 8001776:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177c:	2300      	movs	r3, #0
 800177e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001780:	f107 030c 	add.w	r3, r7, #12
 8001784:	4619      	mov	r1, r3
 8001786:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800178a:	f001 fde1 	bl	8003350 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin */
  GPIO_InitStruct.Pin = LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin;
 800178e:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8001792:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001794:	2301      	movs	r3, #1
 8001796:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179c:	2300      	movs	r3, #0
 800179e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a0:	f107 030c 	add.w	r3, r7, #12
 80017a4:	4619      	mov	r1, r3
 80017a6:	480b      	ldr	r0, [pc, #44]	; (80017d4 <MX_GPIO_Init+0xe8>)
 80017a8:	f001 fdd2 	bl	8003350 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_EN_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin;
 80017ac:	2380      	movs	r3, #128	; 0x80
 80017ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b0:	2301      	movs	r3, #1
 80017b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_EN_GPIO_Port, &GPIO_InitStruct);
 80017bc:	f107 030c 	add.w	r3, r7, #12
 80017c0:	4619      	mov	r1, r3
 80017c2:	4805      	ldr	r0, [pc, #20]	; (80017d8 <MX_GPIO_Init+0xec>)
 80017c4:	f001 fdc4 	bl	8003350 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017c8:	bf00      	nop
 80017ca:	3720      	adds	r7, #32
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40021000 	.word	0x40021000
 80017d4:	48000400 	.word	0x48000400
 80017d8:	48000800 	.word	0x48000800

080017dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e0:	b672      	cpsid	i
}
 80017e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <Error_Handler+0x8>
	...

080017e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ee:	4b0f      	ldr	r3, [pc, #60]	; (800182c <HAL_MspInit+0x44>)
 80017f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f2:	4a0e      	ldr	r2, [pc, #56]	; (800182c <HAL_MspInit+0x44>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6613      	str	r3, [r2, #96]	; 0x60
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <HAL_MspInit+0x44>)
 80017fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <HAL_MspInit+0x44>)
 8001808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180a:	4a08      	ldr	r2, [pc, #32]	; (800182c <HAL_MspInit+0x44>)
 800180c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001810:	6593      	str	r3, [r2, #88]	; 0x58
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_MspInit+0x44>)
 8001814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181a:	603b      	str	r3, [r7, #0]
 800181c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	40021000 	.word	0x40021000

08001830 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b0ac      	sub	sp, #176	; 0xb0
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	2288      	movs	r2, #136	; 0x88
 800184e:	2100      	movs	r1, #0
 8001850:	4618      	mov	r0, r3
 8001852:	f004 f926 	bl	8005aa2 <memset>
  if(hadc->Instance==ADC1)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a27      	ldr	r2, [pc, #156]	; (80018f8 <HAL_ADC_MspInit+0xc8>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d147      	bne.n	80018f0 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001860:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001864:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001866:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800186a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800186e:	2301      	movs	r3, #1
 8001870:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001872:	2301      	movs	r3, #1
 8001874:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001876:	2310      	movs	r3, #16
 8001878:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800187a:	2307      	movs	r3, #7
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800187e:	2302      	movs	r3, #2
 8001880:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001882:	2302      	movs	r3, #2
 8001884:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001886:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800188a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	4618      	mov	r0, r3
 8001892:	f002 fd9d 	bl	80043d0 <HAL_RCCEx_PeriphCLKConfig>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800189c:	f7ff ff9e 	bl	80017dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80018a0:	4b16      	ldr	r3, [pc, #88]	; (80018fc <HAL_ADC_MspInit+0xcc>)
 80018a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a4:	4a15      	ldr	r2, [pc, #84]	; (80018fc <HAL_ADC_MspInit+0xcc>)
 80018a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ac:	4b13      	ldr	r3, [pc, #76]	; (80018fc <HAL_ADC_MspInit+0xcc>)
 80018ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b8:	4b10      	ldr	r3, [pc, #64]	; (80018fc <HAL_ADC_MspInit+0xcc>)
 80018ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018bc:	4a0f      	ldr	r2, [pc, #60]	; (80018fc <HAL_ADC_MspInit+0xcc>)
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018c4:	4b0d      	ldr	r3, [pc, #52]	; (80018fc <HAL_ADC_MspInit+0xcc>)
 80018c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018d0:	2301      	movs	r3, #1
 80018d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80018d6:	230b      	movs	r3, #11
 80018d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018e6:	4619      	mov	r1, r3
 80018e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ec:	f001 fd30 	bl	8003350 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018f0:	bf00      	nop
 80018f2:	37b0      	adds	r7, #176	; 0xb0
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	50040000 	.word	0x50040000
 80018fc:	40021000 	.word	0x40021000

08001900 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b0ac      	sub	sp, #176	; 0xb0
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001908:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	2288      	movs	r2, #136	; 0x88
 800191e:	2100      	movs	r1, #0
 8001920:	4618      	mov	r0, r3
 8001922:	f004 f8be 	bl	8005aa2 <memset>
  if(huart->Instance==USART2)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a21      	ldr	r2, [pc, #132]	; (80019b0 <HAL_UART_MspInit+0xb0>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d13b      	bne.n	80019a8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001930:	2302      	movs	r3, #2
 8001932:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001934:	2300      	movs	r3, #0
 8001936:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	4618      	mov	r0, r3
 800193e:	f002 fd47 	bl	80043d0 <HAL_RCCEx_PeriphCLKConfig>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001948:	f7ff ff48 	bl	80017dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800194c:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <HAL_UART_MspInit+0xb4>)
 800194e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001950:	4a18      	ldr	r2, [pc, #96]	; (80019b4 <HAL_UART_MspInit+0xb4>)
 8001952:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001956:	6593      	str	r3, [r2, #88]	; 0x58
 8001958:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <HAL_UART_MspInit+0xb4>)
 800195a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <HAL_UART_MspInit+0xb4>)
 8001966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001968:	4a12      	ldr	r2, [pc, #72]	; (80019b4 <HAL_UART_MspInit+0xb4>)
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001970:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <HAL_UART_MspInit+0xb4>)
 8001972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800197c:	230c      	movs	r3, #12
 800197e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001982:	2302      	movs	r3, #2
 8001984:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198e:	2303      	movs	r3, #3
 8001990:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001994:	2307      	movs	r3, #7
 8001996:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800199e:	4619      	mov	r1, r3
 80019a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a4:	f001 fcd4 	bl	8003350 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019a8:	bf00      	nop
 80019aa:	37b0      	adds	r7, #176	; 0xb0
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40004400 	.word	0x40004400
 80019b4:	40021000 	.word	0x40021000

080019b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019bc:	e7fe      	b.n	80019bc <NMI_Handler+0x4>

080019be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c2:	e7fe      	b.n	80019c2 <HardFault_Handler+0x4>

080019c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c8:	e7fe      	b.n	80019c8 <MemManage_Handler+0x4>

080019ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ce:	e7fe      	b.n	80019ce <BusFault_Handler+0x4>

080019d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d4:	e7fe      	b.n	80019d4 <UsageFault_Handler+0x4>

080019d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a04:	f000 f958 	bl	8001cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return 1;
 8001a10:	2301      	movs	r3, #1
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <_kill>:

int _kill(int pid, int sig)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a26:	f004 f8b7 	bl	8005b98 <__errno>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2216      	movs	r2, #22
 8001a2e:	601a      	str	r2, [r3, #0]
  return -1;
 8001a30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <_exit>:

void _exit (int status)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a44:	f04f 31ff 	mov.w	r1, #4294967295
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff ffe7 	bl	8001a1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a4e:	e7fe      	b.n	8001a4e <_exit+0x12>

08001a50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	e00a      	b.n	8001a78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a62:	f3af 8000 	nop.w
 8001a66:	4601      	mov	r1, r0
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	1c5a      	adds	r2, r3, #1
 8001a6c:	60ba      	str	r2, [r7, #8]
 8001a6e:	b2ca      	uxtb	r2, r1
 8001a70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	3301      	adds	r3, #1
 8001a76:	617b      	str	r3, [r7, #20]
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	dbf0      	blt.n	8001a62 <_read+0x12>
  }

  return len;
 8001a80:	687b      	ldr	r3, [r7, #4]
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b086      	sub	sp, #24
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	60f8      	str	r0, [r7, #12]
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	e009      	b.n	8001ab0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	60ba      	str	r2, [r7, #8]
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	3301      	adds	r3, #1
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	dbf1      	blt.n	8001a9c <_write+0x12>
  }
  return len;
 8001ab8:	687b      	ldr	r3, [r7, #4]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <_close>:

int _close(int file)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001aca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aea:	605a      	str	r2, [r3, #4]
  return 0;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <_isatty>:

int _isatty(int file)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b02:	2301      	movs	r3, #1
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b34:	4a14      	ldr	r2, [pc, #80]	; (8001b88 <_sbrk+0x5c>)
 8001b36:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <_sbrk+0x60>)
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b40:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <_sbrk+0x64>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d102      	bne.n	8001b4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <_sbrk+0x64>)
 8001b4a:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <_sbrk+0x68>)
 8001b4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b4e:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <_sbrk+0x64>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d207      	bcs.n	8001b6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b5c:	f004 f81c 	bl	8005b98 <__errno>
 8001b60:	4603      	mov	r3, r0
 8001b62:	220c      	movs	r2, #12
 8001b64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b66:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6a:	e009      	b.n	8001b80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b6c:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <_sbrk+0x64>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b72:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <_sbrk+0x64>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	4a05      	ldr	r2, [pc, #20]	; (8001b90 <_sbrk+0x64>)
 8001b7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20018000 	.word	0x20018000
 8001b8c:	00000400 	.word	0x00000400
 8001b90:	20000184 	.word	0x20000184
 8001b94:	200002d8 	.word	0x200002d8

08001b98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <SystemInit+0x20>)
 8001b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ba2:	4a05      	ldr	r2, [pc, #20]	; (8001bb8 <SystemInit+0x20>)
 8001ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bf4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bc0:	f7ff ffea 	bl	8001b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bc4:	480c      	ldr	r0, [pc, #48]	; (8001bf8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bc6:	490d      	ldr	r1, [pc, #52]	; (8001bfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bc8:	4a0d      	ldr	r2, [pc, #52]	; (8001c00 <LoopForever+0xe>)
  movs r3, #0
 8001bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bcc:	e002      	b.n	8001bd4 <LoopCopyDataInit>

08001bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd2:	3304      	adds	r3, #4

08001bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd8:	d3f9      	bcc.n	8001bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bda:	4a0a      	ldr	r2, [pc, #40]	; (8001c04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bdc:	4c0a      	ldr	r4, [pc, #40]	; (8001c08 <LoopForever+0x16>)
  movs r3, #0
 8001bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be0:	e001      	b.n	8001be6 <LoopFillZerobss>

08001be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be4:	3204      	adds	r2, #4

08001be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be8:	d3fb      	bcc.n	8001be2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bea:	f003 ffdb 	bl	8005ba4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bee:	f7ff fc27 	bl	8001440 <main>

08001bf2 <LoopForever>:

LoopForever:
    b LoopForever
 8001bf2:	e7fe      	b.n	8001bf2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001bf4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bfc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001c00:	08006e18 	.word	0x08006e18
  ldr r2, =_sbss
 8001c04:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001c08:	200002d8 	.word	0x200002d8

08001c0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c0c:	e7fe      	b.n	8001c0c <ADC1_2_IRQHandler>

08001c0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c14:	2300      	movs	r3, #0
 8001c16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c18:	2003      	movs	r0, #3
 8001c1a:	f001 fb65 	bl	80032e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c1e:	200f      	movs	r0, #15
 8001c20:	f000 f80e 	bl	8001c40 <HAL_InitTick>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d002      	beq.n	8001c30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	71fb      	strb	r3, [r7, #7]
 8001c2e:	e001      	b.n	8001c34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c30:	f7ff fdda 	bl	80017e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c34:	79fb      	ldrb	r3, [r7, #7]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c4c:	4b17      	ldr	r3, [pc, #92]	; (8001cac <HAL_InitTick+0x6c>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d023      	beq.n	8001c9c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c54:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <HAL_InitTick+0x70>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4b14      	ldr	r3, [pc, #80]	; (8001cac <HAL_InitTick+0x6c>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f001 fb63 	bl	8003336 <HAL_SYSTICK_Config>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10f      	bne.n	8001c96 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b0f      	cmp	r3, #15
 8001c7a:	d809      	bhi.n	8001c90 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	f04f 30ff 	mov.w	r0, #4294967295
 8001c84:	f001 fb3b 	bl	80032fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c88:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <HAL_InitTick+0x74>)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	e007      	b.n	8001ca0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	73fb      	strb	r3, [r7, #15]
 8001c94:	e004      	b.n	8001ca0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	73fb      	strb	r3, [r7, #15]
 8001c9a:	e001      	b.n	8001ca0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000010 	.word	0x20000010
 8001cb0:	20000008 	.word	0x20000008
 8001cb4:	2000000c 	.word	0x2000000c

08001cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_IncTick+0x20>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_IncTick+0x24>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	4a04      	ldr	r2, [pc, #16]	; (8001cdc <HAL_IncTick+0x24>)
 8001cca:	6013      	str	r3, [r2, #0]
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	20000010 	.word	0x20000010
 8001cdc:	20000188 	.word	0x20000188

08001ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce4:	4b03      	ldr	r3, [pc, #12]	; (8001cf4 <HAL_GetTick+0x14>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	20000188 	.word	0x20000188

08001cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d00:	f7ff ffee 	bl	8001ce0 <HAL_GetTick>
 8001d04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d10:	d005      	beq.n	8001d1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d12:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <HAL_Delay+0x44>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	461a      	mov	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d1e:	bf00      	nop
 8001d20:	f7ff ffde 	bl	8001ce0 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d8f7      	bhi.n	8001d20 <HAL_Delay+0x28>
  {
  }
}
 8001d30:	bf00      	nop
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000010 	.word	0x20000010

08001d40 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	431a      	orrs	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	609a      	str	r2, [r3, #8]
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b087      	sub	sp, #28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
 8001db4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	3360      	adds	r3, #96	; 0x60
 8001dba:	461a      	mov	r2, r3
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <LL_ADC_SetOffset+0x44>)
 8001dca:	4013      	ands	r3, r2
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001de0:	bf00      	nop
 8001de2:	371c      	adds	r7, #28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	03fff000 	.word	0x03fff000

08001df0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	3360      	adds	r3, #96	; 0x60
 8001dfe:	461a      	mov	r2, r3
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b087      	sub	sp, #28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	3360      	adds	r3, #96	; 0x60
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	431a      	orrs	r2, r3
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e46:	bf00      	nop
 8001e48:	371c      	adds	r7, #28
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b083      	sub	sp, #12
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e66:	2301      	movs	r3, #1
 8001e68:	e000      	b.n	8001e6c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b087      	sub	sp, #28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	3330      	adds	r3, #48	; 0x30
 8001e88:	461a      	mov	r2, r3
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	0a1b      	lsrs	r3, r3, #8
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	f003 030c 	and.w	r3, r3, #12
 8001e94:	4413      	add	r3, r2
 8001e96:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	f003 031f 	and.w	r3, r3, #31
 8001ea2:	211f      	movs	r1, #31
 8001ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	401a      	ands	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	0e9b      	lsrs	r3, r3, #26
 8001eb0:	f003 011f 	and.w	r1, r3, #31
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	f003 031f 	and.w	r3, r3, #31
 8001eba:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ec4:	bf00      	nop
 8001ec6:	371c      	adds	r7, #28
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b087      	sub	sp, #28
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	3314      	adds	r3, #20
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	0e5b      	lsrs	r3, r3, #25
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	4413      	add	r3, r2
 8001eee:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	0d1b      	lsrs	r3, r3, #20
 8001ef8:	f003 031f 	and.w	r3, r3, #31
 8001efc:	2107      	movs	r1, #7
 8001efe:	fa01 f303 	lsl.w	r3, r1, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	401a      	ands	r2, r3
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	0d1b      	lsrs	r3, r3, #20
 8001f0a:	f003 031f 	and.w	r3, r3, #31
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	fa01 f303 	lsl.w	r3, r1, r3
 8001f14:	431a      	orrs	r2, r3
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f1a:	bf00      	nop
 8001f1c:	371c      	adds	r7, #28
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
	...

08001f28 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f40:	43db      	mvns	r3, r3
 8001f42:	401a      	ands	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f003 0318 	and.w	r3, r3, #24
 8001f4a:	4908      	ldr	r1, [pc, #32]	; (8001f6c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f4c:	40d9      	lsrs	r1, r3
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	400b      	ands	r3, r1
 8001f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f56:	431a      	orrs	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f5e:	bf00      	nop
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	0007ffff 	.word	0x0007ffff

08001f70 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 031f 	and.w	r3, r3, #31
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001fb8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6093      	str	r3, [r2, #8]
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fe0:	d101      	bne.n	8001fe6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002004:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002008:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002030:	d101      	bne.n	8002036 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002054:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002058:	f043 0201 	orr.w	r2, r3, #1
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b01      	cmp	r3, #1
 800207e:	d101      	bne.n	8002084 <LL_ADC_IsEnabled+0x18>
 8002080:	2301      	movs	r3, #1
 8002082:	e000      	b.n	8002086 <LL_ADC_IsEnabled+0x1a>
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020a2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020a6:	f043 0204 	orr.w	r2, r3, #4
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 0304 	and.w	r3, r3, #4
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	d101      	bne.n	80020d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020ce:	2301      	movs	r3, #1
 80020d0:	e000      	b.n	80020d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 0308 	and.w	r3, r3, #8
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d101      	bne.n	80020f8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020f4:	2301      	movs	r3, #1
 80020f6:	e000      	b.n	80020fa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
	...

08002108 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002108:	b590      	push	{r4, r7, lr}
 800210a:	b089      	sub	sp, #36	; 0x24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002114:	2300      	movs	r3, #0
 8002116:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e130      	b.n	8002384 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212c:	2b00      	cmp	r3, #0
 800212e:	d109      	bne.n	8002144 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff fb7d 	bl	8001830 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff ff3f 	bl	8001fcc <LL_ADC_IsDeepPowerDownEnabled>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d004      	beq.n	800215e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff25 	bl	8001fa8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff ff5a 	bl	800201c <LL_ADC_IsInternalRegulatorEnabled>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d115      	bne.n	800219a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff ff3e 	bl	8001ff4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002178:	4b84      	ldr	r3, [pc, #528]	; (800238c <HAL_ADC_Init+0x284>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	099b      	lsrs	r3, r3, #6
 800217e:	4a84      	ldr	r2, [pc, #528]	; (8002390 <HAL_ADC_Init+0x288>)
 8002180:	fba2 2303 	umull	r2, r3, r2, r3
 8002184:	099b      	lsrs	r3, r3, #6
 8002186:	3301      	adds	r3, #1
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800218c:	e002      	b.n	8002194 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	3b01      	subs	r3, #1
 8002192:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f9      	bne.n	800218e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff ff3c 	bl	800201c <LL_ADC_IsInternalRegulatorEnabled>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10d      	bne.n	80021c6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ae:	f043 0210 	orr.w	r2, r3, #16
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ba:	f043 0201 	orr.w	r2, r3, #1
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff ff75 	bl	80020ba <LL_ADC_REG_IsConversionOngoing>
 80021d0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d6:	f003 0310 	and.w	r3, r3, #16
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f040 80c9 	bne.w	8002372 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f040 80c5 	bne.w	8002372 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80021f0:	f043 0202 	orr.w	r2, r3, #2
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ff35 	bl	800206c <LL_ADC_IsEnabled>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d115      	bne.n	8002234 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002208:	4862      	ldr	r0, [pc, #392]	; (8002394 <HAL_ADC_Init+0x28c>)
 800220a:	f7ff ff2f 	bl	800206c <LL_ADC_IsEnabled>
 800220e:	4604      	mov	r4, r0
 8002210:	4861      	ldr	r0, [pc, #388]	; (8002398 <HAL_ADC_Init+0x290>)
 8002212:	f7ff ff2b 	bl	800206c <LL_ADC_IsEnabled>
 8002216:	4603      	mov	r3, r0
 8002218:	431c      	orrs	r4, r3
 800221a:	4860      	ldr	r0, [pc, #384]	; (800239c <HAL_ADC_Init+0x294>)
 800221c:	f7ff ff26 	bl	800206c <LL_ADC_IsEnabled>
 8002220:	4603      	mov	r3, r0
 8002222:	4323      	orrs	r3, r4
 8002224:	2b00      	cmp	r3, #0
 8002226:	d105      	bne.n	8002234 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	4619      	mov	r1, r3
 800222e:	485c      	ldr	r0, [pc, #368]	; (80023a0 <HAL_ADC_Init+0x298>)
 8002230:	f7ff fd86 	bl	8001d40 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	7e5b      	ldrb	r3, [r3, #25]
 8002238:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800223e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002244:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800224a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002252:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d106      	bne.n	8002270 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	3b01      	subs	r3, #1
 8002268:	045b      	lsls	r3, r3, #17
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002274:	2b00      	cmp	r3, #0
 8002276:	d009      	beq.n	800228c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002284:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	4b44      	ldr	r3, [pc, #272]	; (80023a4 <HAL_ADC_Init+0x29c>)
 8002294:	4013      	ands	r3, r2
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6812      	ldr	r2, [r2, #0]
 800229a:	69b9      	ldr	r1, [r7, #24]
 800229c:	430b      	orrs	r3, r1
 800229e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff ff1b 	bl	80020e0 <LL_ADC_INJ_IsConversionOngoing>
 80022aa:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d13d      	bne.n	800232e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d13a      	bne.n	800232e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80022bc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022c4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022d4:	f023 0302 	bic.w	r3, r3, #2
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6812      	ldr	r2, [r2, #0]
 80022dc:	69b9      	ldr	r1, [r7, #24]
 80022de:	430b      	orrs	r3, r1
 80022e0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d118      	bne.n	800231e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80022f6:	f023 0304 	bic.w	r3, r3, #4
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002302:	4311      	orrs	r1, r2
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002308:	4311      	orrs	r1, r2
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800230e:	430a      	orrs	r2, r1
 8002310:	431a      	orrs	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f042 0201 	orr.w	r2, r2, #1
 800231a:	611a      	str	r2, [r3, #16]
 800231c:	e007      	b.n	800232e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	691a      	ldr	r2, [r3, #16]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 0201 	bic.w	r2, r2, #1
 800232c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d10c      	bne.n	8002350 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233c:	f023 010f 	bic.w	r1, r3, #15
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	1e5a      	subs	r2, r3, #1
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	631a      	str	r2, [r3, #48]	; 0x30
 800234e:	e007      	b.n	8002360 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 020f 	bic.w	r2, r2, #15
 800235e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002364:	f023 0303 	bic.w	r3, r3, #3
 8002368:	f043 0201 	orr.w	r2, r3, #1
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	655a      	str	r2, [r3, #84]	; 0x54
 8002370:	e007      	b.n	8002382 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002376:	f043 0210 	orr.w	r2, r3, #16
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002382:	7ffb      	ldrb	r3, [r7, #31]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3724      	adds	r7, #36	; 0x24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd90      	pop	{r4, r7, pc}
 800238c:	20000008 	.word	0x20000008
 8002390:	053e2d63 	.word	0x053e2d63
 8002394:	50040000 	.word	0x50040000
 8002398:	50040100 	.word	0x50040100
 800239c:	50040200 	.word	0x50040200
 80023a0:	50040300 	.word	0x50040300
 80023a4:	fff0c007 	.word	0xfff0c007

080023a8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023b0:	4857      	ldr	r0, [pc, #348]	; (8002510 <HAL_ADC_Start+0x168>)
 80023b2:	f7ff fddd 	bl	8001f70 <LL_ADC_GetMultimode>
 80023b6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff fe7c 	bl	80020ba <LL_ADC_REG_IsConversionOngoing>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f040 809c 	bne.w	8002502 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d101      	bne.n	80023d8 <HAL_ADC_Start+0x30>
 80023d4:	2302      	movs	r3, #2
 80023d6:	e097      	b.n	8002508 <HAL_ADC_Start+0x160>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 fd73 	bl	8002ecc <ADC_Enable>
 80023e6:	4603      	mov	r3, r0
 80023e8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80023ea:	7dfb      	ldrb	r3, [r7, #23]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f040 8083 	bne.w	80024f8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023fa:	f023 0301 	bic.w	r3, r3, #1
 80023fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a42      	ldr	r2, [pc, #264]	; (8002514 <HAL_ADC_Start+0x16c>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d002      	beq.n	8002416 <HAL_ADC_Start+0x6e>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	e000      	b.n	8002418 <HAL_ADC_Start+0x70>
 8002416:	4b40      	ldr	r3, [pc, #256]	; (8002518 <HAL_ADC_Start+0x170>)
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6812      	ldr	r2, [r2, #0]
 800241c:	4293      	cmp	r3, r2
 800241e:	d002      	beq.n	8002426 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d105      	bne.n	8002432 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002436:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800243a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800243e:	d106      	bne.n	800244e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002444:	f023 0206 	bic.w	r2, r3, #6
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	659a      	str	r2, [r3, #88]	; 0x58
 800244c:	e002      	b.n	8002454 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	221c      	movs	r2, #28
 800245a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a2a      	ldr	r2, [pc, #168]	; (8002514 <HAL_ADC_Start+0x16c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d002      	beq.n	8002474 <HAL_ADC_Start+0xcc>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	e000      	b.n	8002476 <HAL_ADC_Start+0xce>
 8002474:	4b28      	ldr	r3, [pc, #160]	; (8002518 <HAL_ADC_Start+0x170>)
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6812      	ldr	r2, [r2, #0]
 800247a:	4293      	cmp	r3, r2
 800247c:	d008      	beq.n	8002490 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d005      	beq.n	8002490 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	2b05      	cmp	r3, #5
 8002488:	d002      	beq.n	8002490 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	2b09      	cmp	r3, #9
 800248e:	d114      	bne.n	80024ba <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d007      	beq.n	80024ae <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff fded 	bl	8002092 <LL_ADC_REG_StartConversion>
 80024b8:	e025      	b.n	8002506 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a12      	ldr	r2, [pc, #72]	; (8002514 <HAL_ADC_Start+0x16c>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d002      	beq.n	80024d6 <HAL_ADC_Start+0x12e>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	e000      	b.n	80024d8 <HAL_ADC_Start+0x130>
 80024d6:	4b10      	ldr	r3, [pc, #64]	; (8002518 <HAL_ADC_Start+0x170>)
 80024d8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00f      	beq.n	8002506 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	655a      	str	r2, [r3, #84]	; 0x54
 80024f6:	e006      	b.n	8002506 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002500:	e001      	b.n	8002506 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002502:	2302      	movs	r3, #2
 8002504:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002506:	7dfb      	ldrb	r3, [r7, #23]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	50040300 	.word	0x50040300
 8002514:	50040100 	.word	0x50040100
 8002518:	50040000 	.word	0x50040000

0800251c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b088      	sub	sp, #32
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002526:	4866      	ldr	r0, [pc, #408]	; (80026c0 <HAL_ADC_PollForConversion+0x1a4>)
 8002528:	f7ff fd22 	bl	8001f70 <LL_ADC_GetMultimode>
 800252c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	2b08      	cmp	r3, #8
 8002534:	d102      	bne.n	800253c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002536:	2308      	movs	r3, #8
 8002538:	61fb      	str	r3, [r7, #28]
 800253a:	e02a      	b.n	8002592 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d005      	beq.n	800254e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2b05      	cmp	r3, #5
 8002546:	d002      	beq.n	800254e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	2b09      	cmp	r3, #9
 800254c:	d111      	bne.n	8002572 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b00      	cmp	r3, #0
 800255a:	d007      	beq.n	800256c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002560:	f043 0220 	orr.w	r2, r3, #32
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0a4      	b.n	80026b6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800256c:	2304      	movs	r3, #4
 800256e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002570:	e00f      	b.n	8002592 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002572:	4853      	ldr	r0, [pc, #332]	; (80026c0 <HAL_ADC_PollForConversion+0x1a4>)
 8002574:	f7ff fd0a 	bl	8001f8c <LL_ADC_GetMultiDMATransfer>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d007      	beq.n	800258e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002582:	f043 0220 	orr.w	r2, r3, #32
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e093      	b.n	80026b6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800258e:	2304      	movs	r3, #4
 8002590:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002592:	f7ff fba5 	bl	8001ce0 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002598:	e021      	b.n	80025de <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a0:	d01d      	beq.n	80025de <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80025a2:	f7ff fb9d 	bl	8001ce0 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d302      	bcc.n	80025b8 <HAL_ADC_PollForConversion+0x9c>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d112      	bne.n	80025de <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	4013      	ands	r3, r2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10b      	bne.n	80025de <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ca:	f043 0204 	orr.w	r2, r3, #4
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e06b      	b.n	80026b6 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	4013      	ands	r3, r2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0d6      	beq.n	800259a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff fc28 	bl	8001e52 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d01c      	beq.n	8002642 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	7e5b      	ldrb	r3, [r3, #25]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d118      	bne.n	8002642 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b08      	cmp	r3, #8
 800261c:	d111      	bne.n	8002642 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002622:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d105      	bne.n	8002642 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263a:	f043 0201 	orr.w	r2, r3, #1
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a1f      	ldr	r2, [pc, #124]	; (80026c4 <HAL_ADC_PollForConversion+0x1a8>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d002      	beq.n	8002652 <HAL_ADC_PollForConversion+0x136>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	e000      	b.n	8002654 <HAL_ADC_PollForConversion+0x138>
 8002652:	4b1d      	ldr	r3, [pc, #116]	; (80026c8 <HAL_ADC_PollForConversion+0x1ac>)
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6812      	ldr	r2, [r2, #0]
 8002658:	4293      	cmp	r3, r2
 800265a:	d008      	beq.n	800266e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d005      	beq.n	800266e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	2b05      	cmp	r3, #5
 8002666:	d002      	beq.n	800266e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	2b09      	cmp	r3, #9
 800266c:	d104      	bne.n	8002678 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	61bb      	str	r3, [r7, #24]
 8002676:	e00c      	b.n	8002692 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a11      	ldr	r2, [pc, #68]	; (80026c4 <HAL_ADC_PollForConversion+0x1a8>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d002      	beq.n	8002688 <HAL_ADC_PollForConversion+0x16c>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	e000      	b.n	800268a <HAL_ADC_PollForConversion+0x16e>
 8002688:	4b0f      	ldr	r3, [pc, #60]	; (80026c8 <HAL_ADC_PollForConversion+0x1ac>)
 800268a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	2b08      	cmp	r3, #8
 8002696:	d104      	bne.n	80026a2 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2208      	movs	r2, #8
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	e008      	b.n	80026b4 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d103      	bne.n	80026b4 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	220c      	movs	r2, #12
 80026b2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3720      	adds	r7, #32
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	50040300 	.word	0x50040300
 80026c4:	50040100 	.word	0x50040100
 80026c8:	50040000 	.word	0x50040000

080026cc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80026da:	4618      	mov	r0, r3
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
	...

080026e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b0b6      	sub	sp, #216	; 0xd8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002702:	2b01      	cmp	r3, #1
 8002704:	d101      	bne.n	800270a <HAL_ADC_ConfigChannel+0x22>
 8002706:	2302      	movs	r3, #2
 8002708:	e3c9      	b.n	8002e9e <HAL_ADC_ConfigChannel+0x7b6>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff fccf 	bl	80020ba <LL_ADC_REG_IsConversionOngoing>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	f040 83aa 	bne.w	8002e78 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b05      	cmp	r3, #5
 8002732:	d824      	bhi.n	800277e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	3b02      	subs	r3, #2
 800273a:	2b03      	cmp	r3, #3
 800273c:	d81b      	bhi.n	8002776 <HAL_ADC_ConfigChannel+0x8e>
 800273e:	a201      	add	r2, pc, #4	; (adr r2, 8002744 <HAL_ADC_ConfigChannel+0x5c>)
 8002740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002744:	08002755 	.word	0x08002755
 8002748:	0800275d 	.word	0x0800275d
 800274c:	08002765 	.word	0x08002765
 8002750:	0800276d 	.word	0x0800276d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002754:	230c      	movs	r3, #12
 8002756:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800275a:	e010      	b.n	800277e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800275c:	2312      	movs	r3, #18
 800275e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002762:	e00c      	b.n	800277e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002764:	2318      	movs	r3, #24
 8002766:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800276a:	e008      	b.n	800277e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800276c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002770:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002774:	e003      	b.n	800277e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002776:	2306      	movs	r3, #6
 8002778:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800277c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6818      	ldr	r0, [r3, #0]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800278c:	f7ff fb74 	bl	8001e78 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff fc90 	bl	80020ba <LL_ADC_REG_IsConversionOngoing>
 800279a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff fc9c 	bl	80020e0 <LL_ADC_INJ_IsConversionOngoing>
 80027a8:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f040 81a4 	bne.w	8002afe <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f040 819f 	bne.w	8002afe <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6818      	ldr	r0, [r3, #0]
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	6819      	ldr	r1, [r3, #0]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	461a      	mov	r2, r3
 80027ce:	f7ff fb7f 	bl	8001ed0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	695a      	ldr	r2, [r3, #20]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	08db      	lsrs	r3, r3, #3
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	2b04      	cmp	r3, #4
 80027f2:	d00a      	beq.n	800280a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6818      	ldr	r0, [r3, #0]
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	6919      	ldr	r1, [r3, #16]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002804:	f7ff fad0 	bl	8001da8 <LL_ADC_SetOffset>
 8002808:	e179      	b.n	8002afe <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2100      	movs	r1, #0
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff faed 	bl	8001df0 <LL_ADC_GetOffsetChannel>
 8002816:	4603      	mov	r3, r0
 8002818:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10a      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x14e>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2100      	movs	r1, #0
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff fae2 	bl	8001df0 <LL_ADC_GetOffsetChannel>
 800282c:	4603      	mov	r3, r0
 800282e:	0e9b      	lsrs	r3, r3, #26
 8002830:	f003 021f 	and.w	r2, r3, #31
 8002834:	e01e      	b.n	8002874 <HAL_ADC_ConfigChannel+0x18c>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2100      	movs	r1, #0
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff fad7 	bl	8001df0 <LL_ADC_GetOffsetChannel>
 8002842:	4603      	mov	r3, r0
 8002844:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002848:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800284c:	fa93 f3a3 	rbit	r3, r3
 8002850:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002854:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002858:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800285c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002864:	2320      	movs	r3, #32
 8002866:	e004      	b.n	8002872 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002868:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800286c:	fab3 f383 	clz	r3, r3
 8002870:	b2db      	uxtb	r3, r3
 8002872:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800287c:	2b00      	cmp	r3, #0
 800287e:	d105      	bne.n	800288c <HAL_ADC_ConfigChannel+0x1a4>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	0e9b      	lsrs	r3, r3, #26
 8002886:	f003 031f 	and.w	r3, r3, #31
 800288a:	e018      	b.n	80028be <HAL_ADC_ConfigChannel+0x1d6>
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002894:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002898:	fa93 f3a3 	rbit	r3, r3
 800289c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80028a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80028a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80028a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80028b0:	2320      	movs	r3, #32
 80028b2:	e004      	b.n	80028be <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80028b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80028b8:	fab3 f383 	clz	r3, r3
 80028bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028be:	429a      	cmp	r2, r3
 80028c0:	d106      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2200      	movs	r2, #0
 80028c8:	2100      	movs	r1, #0
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff faa6 	bl	8001e1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2101      	movs	r1, #1
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff fa8a 	bl	8001df0 <LL_ADC_GetOffsetChannel>
 80028dc:	4603      	mov	r3, r0
 80028de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10a      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x214>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2101      	movs	r1, #1
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff fa7f 	bl	8001df0 <LL_ADC_GetOffsetChannel>
 80028f2:	4603      	mov	r3, r0
 80028f4:	0e9b      	lsrs	r3, r3, #26
 80028f6:	f003 021f 	and.w	r2, r3, #31
 80028fa:	e01e      	b.n	800293a <HAL_ADC_ConfigChannel+0x252>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2101      	movs	r1, #1
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff fa74 	bl	8001df0 <LL_ADC_GetOffsetChannel>
 8002908:	4603      	mov	r3, r0
 800290a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002912:	fa93 f3a3 	rbit	r3, r3
 8002916:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800291a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800291e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002922:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800292a:	2320      	movs	r3, #32
 800292c:	e004      	b.n	8002938 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800292e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002932:	fab3 f383 	clz	r3, r3
 8002936:	b2db      	uxtb	r3, r3
 8002938:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002942:	2b00      	cmp	r3, #0
 8002944:	d105      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x26a>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	0e9b      	lsrs	r3, r3, #26
 800294c:	f003 031f 	and.w	r3, r3, #31
 8002950:	e018      	b.n	8002984 <HAL_ADC_ConfigChannel+0x29c>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800295e:	fa93 f3a3 	rbit	r3, r3
 8002962:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002966:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800296a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800296e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002976:	2320      	movs	r3, #32
 8002978:	e004      	b.n	8002984 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800297a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800297e:	fab3 f383 	clz	r3, r3
 8002982:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002984:	429a      	cmp	r2, r3
 8002986:	d106      	bne.n	8002996 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2200      	movs	r2, #0
 800298e:	2101      	movs	r1, #1
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff fa43 	bl	8001e1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2102      	movs	r1, #2
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff fa27 	bl	8001df0 <LL_ADC_GetOffsetChannel>
 80029a2:	4603      	mov	r3, r0
 80029a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10a      	bne.n	80029c2 <HAL_ADC_ConfigChannel+0x2da>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2102      	movs	r1, #2
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff fa1c 	bl	8001df0 <LL_ADC_GetOffsetChannel>
 80029b8:	4603      	mov	r3, r0
 80029ba:	0e9b      	lsrs	r3, r3, #26
 80029bc:	f003 021f 	and.w	r2, r3, #31
 80029c0:	e01e      	b.n	8002a00 <HAL_ADC_ConfigChannel+0x318>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2102      	movs	r1, #2
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff fa11 	bl	8001df0 <LL_ADC_GetOffsetChannel>
 80029ce:	4603      	mov	r3, r0
 80029d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029d8:	fa93 f3a3 	rbit	r3, r3
 80029dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80029e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80029e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80029f0:	2320      	movs	r3, #32
 80029f2:	e004      	b.n	80029fe <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80029f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029f8:	fab3 f383 	clz	r3, r3
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d105      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x330>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	0e9b      	lsrs	r3, r3, #26
 8002a12:	f003 031f 	and.w	r3, r3, #31
 8002a16:	e014      	b.n	8002a42 <HAL_ADC_ConfigChannel+0x35a>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a20:	fa93 f3a3 	rbit	r3, r3
 8002a24:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002a26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002a2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002a34:	2320      	movs	r3, #32
 8002a36:	e004      	b.n	8002a42 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002a38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a3c:	fab3 f383 	clz	r3, r3
 8002a40:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d106      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2102      	movs	r1, #2
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff f9e4 	bl	8001e1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2103      	movs	r1, #3
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff f9c8 	bl	8001df0 <LL_ADC_GetOffsetChannel>
 8002a60:	4603      	mov	r3, r0
 8002a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10a      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x398>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2103      	movs	r1, #3
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff f9bd 	bl	8001df0 <LL_ADC_GetOffsetChannel>
 8002a76:	4603      	mov	r3, r0
 8002a78:	0e9b      	lsrs	r3, r3, #26
 8002a7a:	f003 021f 	and.w	r2, r3, #31
 8002a7e:	e017      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x3c8>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2103      	movs	r1, #3
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff f9b2 	bl	8001df0 <LL_ADC_GetOffsetChannel>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a92:	fa93 f3a3 	rbit	r3, r3
 8002a96:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a9a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002a9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002aa2:	2320      	movs	r3, #32
 8002aa4:	e003      	b.n	8002aae <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002aa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aa8:	fab3 f383 	clz	r3, r3
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d105      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x3e0>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	0e9b      	lsrs	r3, r3, #26
 8002ac2:	f003 031f 	and.w	r3, r3, #31
 8002ac6:	e011      	b.n	8002aec <HAL_ADC_ConfigChannel+0x404>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ad0:	fa93 f3a3 	rbit	r3, r3
 8002ad4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002ad6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ad8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002ada:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002ae0:	2320      	movs	r3, #32
 8002ae2:	e003      	b.n	8002aec <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002ae4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ae6:	fab3 f383 	clz	r3, r3
 8002aea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d106      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2200      	movs	r2, #0
 8002af6:	2103      	movs	r1, #3
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff f98f 	bl	8001e1c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff fab2 	bl	800206c <LL_ADC_IsEnabled>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f040 8140 	bne.w	8002d90 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6818      	ldr	r0, [r3, #0]
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	6819      	ldr	r1, [r3, #0]
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	f7ff fa03 	bl	8001f28 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	4a8f      	ldr	r2, [pc, #572]	; (8002d64 <HAL_ADC_ConfigChannel+0x67c>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	f040 8131 	bne.w	8002d90 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10b      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0x46e>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	0e9b      	lsrs	r3, r3, #26
 8002b44:	3301      	adds	r3, #1
 8002b46:	f003 031f 	and.w	r3, r3, #31
 8002b4a:	2b09      	cmp	r3, #9
 8002b4c:	bf94      	ite	ls
 8002b4e:	2301      	movls	r3, #1
 8002b50:	2300      	movhi	r3, #0
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	e019      	b.n	8002b8a <HAL_ADC_ConfigChannel+0x4a2>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b5e:	fa93 f3a3 	rbit	r3, r3
 8002b62:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b66:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002b68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002b6e:	2320      	movs	r3, #32
 8002b70:	e003      	b.n	8002b7a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b74:	fab3 f383 	clz	r3, r3
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	f003 031f 	and.w	r3, r3, #31
 8002b80:	2b09      	cmp	r3, #9
 8002b82:	bf94      	ite	ls
 8002b84:	2301      	movls	r3, #1
 8002b86:	2300      	movhi	r3, #0
 8002b88:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d079      	beq.n	8002c82 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d107      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x4c2>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	0e9b      	lsrs	r3, r3, #26
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	069b      	lsls	r3, r3, #26
 8002ba4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ba8:	e015      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x4ee>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bb2:	fa93 f3a3 	rbit	r3, r3
 8002bb6:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bba:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002bbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002bc2:	2320      	movs	r3, #32
 8002bc4:	e003      	b.n	8002bce <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bc8:	fab3 f383 	clz	r3, r3
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	3301      	adds	r3, #1
 8002bd0:	069b      	lsls	r3, r3, #26
 8002bd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d109      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0x50e>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	0e9b      	lsrs	r3, r3, #26
 8002be8:	3301      	adds	r3, #1
 8002bea:	f003 031f 	and.w	r3, r3, #31
 8002bee:	2101      	movs	r1, #1
 8002bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf4:	e017      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x53e>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bfe:	fa93 f3a3 	rbit	r3, r3
 8002c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c06:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002c0e:	2320      	movs	r3, #32
 8002c10:	e003      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002c12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c14:	fab3 f383 	clz	r3, r3
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	f003 031f 	and.w	r3, r3, #31
 8002c20:	2101      	movs	r1, #1
 8002c22:	fa01 f303 	lsl.w	r3, r1, r3
 8002c26:	ea42 0103 	orr.w	r1, r2, r3
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10a      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x564>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	0e9b      	lsrs	r3, r3, #26
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	f003 021f 	and.w	r2, r3, #31
 8002c42:	4613      	mov	r3, r2
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	4413      	add	r3, r2
 8002c48:	051b      	lsls	r3, r3, #20
 8002c4a:	e018      	b.n	8002c7e <HAL_ADC_ConfigChannel+0x596>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c54:	fa93 f3a3 	rbit	r3, r3
 8002c58:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002c64:	2320      	movs	r3, #32
 8002c66:	e003      	b.n	8002c70 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c6a:	fab3 f383 	clz	r3, r3
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	3301      	adds	r3, #1
 8002c72:	f003 021f 	and.w	r2, r3, #31
 8002c76:	4613      	mov	r3, r2
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	4413      	add	r3, r2
 8002c7c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c7e:	430b      	orrs	r3, r1
 8002c80:	e081      	b.n	8002d86 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d107      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x5b6>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	0e9b      	lsrs	r3, r3, #26
 8002c94:	3301      	adds	r3, #1
 8002c96:	069b      	lsls	r3, r3, #26
 8002c98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c9c:	e015      	b.n	8002cca <HAL_ADC_ConfigChannel+0x5e2>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca6:	fa93 f3a3 	rbit	r3, r3
 8002caa:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002cb6:	2320      	movs	r3, #32
 8002cb8:	e003      	b.n	8002cc2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cbc:	fab3 f383 	clz	r3, r3
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	069b      	lsls	r3, r3, #26
 8002cc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d109      	bne.n	8002cea <HAL_ADC_ConfigChannel+0x602>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	0e9b      	lsrs	r3, r3, #26
 8002cdc:	3301      	adds	r3, #1
 8002cde:	f003 031f 	and.w	r3, r3, #31
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce8:	e017      	b.n	8002d1a <HAL_ADC_ConfigChannel+0x632>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	fa93 f3a3 	rbit	r3, r3
 8002cf6:	61bb      	str	r3, [r7, #24]
  return result;
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002cfc:	6a3b      	ldr	r3, [r7, #32]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002d02:	2320      	movs	r3, #32
 8002d04:	e003      	b.n	8002d0e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002d06:	6a3b      	ldr	r3, [r7, #32]
 8002d08:	fab3 f383 	clz	r3, r3
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	3301      	adds	r3, #1
 8002d10:	f003 031f 	and.w	r3, r3, #31
 8002d14:	2101      	movs	r1, #1
 8002d16:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1a:	ea42 0103 	orr.w	r1, r2, r3
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10d      	bne.n	8002d46 <HAL_ADC_ConfigChannel+0x65e>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	0e9b      	lsrs	r3, r3, #26
 8002d30:	3301      	adds	r3, #1
 8002d32:	f003 021f 	and.w	r2, r3, #31
 8002d36:	4613      	mov	r3, r2
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	4413      	add	r3, r2
 8002d3c:	3b1e      	subs	r3, #30
 8002d3e:	051b      	lsls	r3, r3, #20
 8002d40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d44:	e01e      	b.n	8002d84 <HAL_ADC_ConfigChannel+0x69c>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	fa93 f3a3 	rbit	r3, r3
 8002d52:	60fb      	str	r3, [r7, #12]
  return result;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d104      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002d5e:	2320      	movs	r3, #32
 8002d60:	e006      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x688>
 8002d62:	bf00      	nop
 8002d64:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	fab3 f383 	clz	r3, r3
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	3301      	adds	r3, #1
 8002d72:	f003 021f 	and.w	r2, r3, #31
 8002d76:	4613      	mov	r3, r2
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	4413      	add	r3, r2
 8002d7c:	3b1e      	subs	r3, #30
 8002d7e:	051b      	lsls	r3, r3, #20
 8002d80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d84:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	f7ff f8a0 	bl	8001ed0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	4b44      	ldr	r3, [pc, #272]	; (8002ea8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d96:	4013      	ands	r3, r2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d07a      	beq.n	8002e92 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d9c:	4843      	ldr	r0, [pc, #268]	; (8002eac <HAL_ADC_ConfigChannel+0x7c4>)
 8002d9e:	f7fe fff5 	bl	8001d8c <LL_ADC_GetCommonPathInternalCh>
 8002da2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a41      	ldr	r2, [pc, #260]	; (8002eb0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d12c      	bne.n	8002e0a <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002db0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002db4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d126      	bne.n	8002e0a <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a3c      	ldr	r2, [pc, #240]	; (8002eb4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d004      	beq.n	8002dd0 <HAL_ADC_ConfigChannel+0x6e8>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a3b      	ldr	r2, [pc, #236]	; (8002eb8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d15d      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002dd4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4834      	ldr	r0, [pc, #208]	; (8002eac <HAL_ADC_ConfigChannel+0x7c4>)
 8002ddc:	f7fe ffc3 	bl	8001d66 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002de0:	4b36      	ldr	r3, [pc, #216]	; (8002ebc <HAL_ADC_ConfigChannel+0x7d4>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	099b      	lsrs	r3, r3, #6
 8002de6:	4a36      	ldr	r2, [pc, #216]	; (8002ec0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002de8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dec:	099b      	lsrs	r3, r3, #6
 8002dee:	1c5a      	adds	r2, r3, #1
 8002df0:	4613      	mov	r3, r2
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	4413      	add	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002dfa:	e002      	b.n	8002e02 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1f9      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e08:	e040      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a2d      	ldr	r2, [pc, #180]	; (8002ec4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d118      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d112      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a23      	ldr	r2, [pc, #140]	; (8002eb4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d004      	beq.n	8002e34 <HAL_ADC_ConfigChannel+0x74c>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a22      	ldr	r2, [pc, #136]	; (8002eb8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d12d      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	481b      	ldr	r0, [pc, #108]	; (8002eac <HAL_ADC_ConfigChannel+0x7c4>)
 8002e40:	f7fe ff91 	bl	8001d66 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e44:	e024      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a1f      	ldr	r2, [pc, #124]	; (8002ec8 <HAL_ADC_ConfigChannel+0x7e0>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d120      	bne.n	8002e92 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d11a      	bne.n	8002e92 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a14      	ldr	r2, [pc, #80]	; (8002eb4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d115      	bne.n	8002e92 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e6e:	4619      	mov	r1, r3
 8002e70:	480e      	ldr	r0, [pc, #56]	; (8002eac <HAL_ADC_ConfigChannel+0x7c4>)
 8002e72:	f7fe ff78 	bl	8001d66 <LL_ADC_SetCommonPathInternalCh>
 8002e76:	e00c      	b.n	8002e92 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7c:	f043 0220 	orr.w	r2, r3, #32
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002e8a:	e002      	b.n	8002e92 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e8c:	bf00      	nop
 8002e8e:	e000      	b.n	8002e92 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e90:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e9a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	37d8      	adds	r7, #216	; 0xd8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	80080000 	.word	0x80080000
 8002eac:	50040300 	.word	0x50040300
 8002eb0:	c7520000 	.word	0xc7520000
 8002eb4:	50040000 	.word	0x50040000
 8002eb8:	50040200 	.word	0x50040200
 8002ebc:	20000008 	.word	0x20000008
 8002ec0:	053e2d63 	.word	0x053e2d63
 8002ec4:	cb840000 	.word	0xcb840000
 8002ec8:	80000001 	.word	0x80000001

08002ecc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff f8c5 	bl	800206c <LL_ADC_IsEnabled>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d169      	bne.n	8002fbc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	4b36      	ldr	r3, [pc, #216]	; (8002fc8 <ADC_Enable+0xfc>)
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00d      	beq.n	8002f12 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efa:	f043 0210 	orr.w	r2, r3, #16
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f06:	f043 0201 	orr.w	r2, r3, #1
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e055      	b.n	8002fbe <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff f894 	bl	8002044 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f1c:	482b      	ldr	r0, [pc, #172]	; (8002fcc <ADC_Enable+0x100>)
 8002f1e:	f7fe ff35 	bl	8001d8c <LL_ADC_GetCommonPathInternalCh>
 8002f22:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002f24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d013      	beq.n	8002f54 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f2c:	4b28      	ldr	r3, [pc, #160]	; (8002fd0 <ADC_Enable+0x104>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	099b      	lsrs	r3, r3, #6
 8002f32:	4a28      	ldr	r2, [pc, #160]	; (8002fd4 <ADC_Enable+0x108>)
 8002f34:	fba2 2303 	umull	r2, r3, r2, r3
 8002f38:	099b      	lsrs	r3, r3, #6
 8002f3a:	1c5a      	adds	r2, r3, #1
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	4413      	add	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f46:	e002      	b.n	8002f4e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1f9      	bne.n	8002f48 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f54:	f7fe fec4 	bl	8001ce0 <HAL_GetTick>
 8002f58:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f5a:	e028      	b.n	8002fae <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff f883 	bl	800206c <LL_ADC_IsEnabled>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d104      	bne.n	8002f76 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff f867 	bl	8002044 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f76:	f7fe feb3 	bl	8001ce0 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d914      	bls.n	8002fae <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d00d      	beq.n	8002fae <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f96:	f043 0210 	orr.w	r2, r3, #16
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa2:	f043 0201 	orr.w	r2, r3, #1
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e007      	b.n	8002fbe <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d1cf      	bne.n	8002f5c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	8000003f 	.word	0x8000003f
 8002fcc:	50040300 	.word	0x50040300
 8002fd0:	20000008 	.word	0x20000008
 8002fd4:	053e2d63 	.word	0x053e2d63

08002fd8 <LL_ADC_IsEnabled>:
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d101      	bne.n	8002ff0 <LL_ADC_IsEnabled+0x18>
 8002fec:	2301      	movs	r3, #1
 8002fee:	e000      	b.n	8002ff2 <LL_ADC_IsEnabled+0x1a>
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <LL_ADC_REG_IsConversionOngoing>:
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 0304 	and.w	r3, r3, #4
 800300e:	2b04      	cmp	r3, #4
 8003010:	d101      	bne.n	8003016 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003012:	2301      	movs	r3, #1
 8003014:	e000      	b.n	8003018 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003024:	b590      	push	{r4, r7, lr}
 8003026:	b09f      	sub	sp, #124	; 0x7c
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800302e:	2300      	movs	r3, #0
 8003030:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800303e:	2302      	movs	r3, #2
 8003040:	e093      	b.n	800316a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800304a:	2300      	movs	r3, #0
 800304c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800304e:	2300      	movs	r3, #0
 8003050:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a47      	ldr	r2, [pc, #284]	; (8003174 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d102      	bne.n	8003062 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800305c:	4b46      	ldr	r3, [pc, #280]	; (8003178 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800305e:	60bb      	str	r3, [r7, #8]
 8003060:	e001      	b.n	8003066 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003062:	2300      	movs	r3, #0
 8003064:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10b      	bne.n	8003084 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003070:	f043 0220 	orr.w	r2, r3, #32
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e072      	b.n	800316a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff ffb9 	bl	8002ffe <LL_ADC_REG_IsConversionOngoing>
 800308c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f7ff ffb3 	bl	8002ffe <LL_ADC_REG_IsConversionOngoing>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d154      	bne.n	8003148 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800309e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d151      	bne.n	8003148 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80030a4:	4b35      	ldr	r3, [pc, #212]	; (800317c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80030a6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d02c      	beq.n	800310a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80030b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	6859      	ldr	r1, [r3, #4]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030c2:	035b      	lsls	r3, r3, #13
 80030c4:	430b      	orrs	r3, r1
 80030c6:	431a      	orrs	r2, r3
 80030c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ca:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030cc:	4829      	ldr	r0, [pc, #164]	; (8003174 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80030ce:	f7ff ff83 	bl	8002fd8 <LL_ADC_IsEnabled>
 80030d2:	4604      	mov	r4, r0
 80030d4:	4828      	ldr	r0, [pc, #160]	; (8003178 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80030d6:	f7ff ff7f 	bl	8002fd8 <LL_ADC_IsEnabled>
 80030da:	4603      	mov	r3, r0
 80030dc:	431c      	orrs	r4, r3
 80030de:	4828      	ldr	r0, [pc, #160]	; (8003180 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80030e0:	f7ff ff7a 	bl	8002fd8 <LL_ADC_IsEnabled>
 80030e4:	4603      	mov	r3, r0
 80030e6:	4323      	orrs	r3, r4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d137      	bne.n	800315c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80030ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80030f4:	f023 030f 	bic.w	r3, r3, #15
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	6811      	ldr	r1, [r2, #0]
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	6892      	ldr	r2, [r2, #8]
 8003100:	430a      	orrs	r2, r1
 8003102:	431a      	orrs	r2, r3
 8003104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003106:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003108:	e028      	b.n	800315c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800310a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003114:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003116:	4817      	ldr	r0, [pc, #92]	; (8003174 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003118:	f7ff ff5e 	bl	8002fd8 <LL_ADC_IsEnabled>
 800311c:	4604      	mov	r4, r0
 800311e:	4816      	ldr	r0, [pc, #88]	; (8003178 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003120:	f7ff ff5a 	bl	8002fd8 <LL_ADC_IsEnabled>
 8003124:	4603      	mov	r3, r0
 8003126:	431c      	orrs	r4, r3
 8003128:	4815      	ldr	r0, [pc, #84]	; (8003180 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800312a:	f7ff ff55 	bl	8002fd8 <LL_ADC_IsEnabled>
 800312e:	4603      	mov	r3, r0
 8003130:	4323      	orrs	r3, r4
 8003132:	2b00      	cmp	r3, #0
 8003134:	d112      	bne.n	800315c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800313e:	f023 030f 	bic.w	r3, r3, #15
 8003142:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003144:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003146:	e009      	b.n	800315c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314c:	f043 0220 	orr.w	r2, r3, #32
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800315a:	e000      	b.n	800315e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800315c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003166:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800316a:	4618      	mov	r0, r3
 800316c:	377c      	adds	r7, #124	; 0x7c
 800316e:	46bd      	mov	sp, r7
 8003170:	bd90      	pop	{r4, r7, pc}
 8003172:	bf00      	nop
 8003174:	50040000 	.word	0x50040000
 8003178:	50040100 	.word	0x50040100
 800317c:	50040300 	.word	0x50040300
 8003180:	50040200 	.word	0x50040200

08003184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003194:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031a0:	4013      	ands	r3, r2
 80031a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031b6:	4a04      	ldr	r2, [pc, #16]	; (80031c8 <__NVIC_SetPriorityGrouping+0x44>)
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	60d3      	str	r3, [r2, #12]
}
 80031bc:	bf00      	nop
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	e000ed00 	.word	0xe000ed00

080031cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031d0:	4b04      	ldr	r3, [pc, #16]	; (80031e4 <__NVIC_GetPriorityGrouping+0x18>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	0a1b      	lsrs	r3, r3, #8
 80031d6:	f003 0307 	and.w	r3, r3, #7
}
 80031da:	4618      	mov	r0, r3
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	e000ed00 	.word	0xe000ed00

080031e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	4603      	mov	r3, r0
 80031f0:	6039      	str	r1, [r7, #0]
 80031f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	db0a      	blt.n	8003212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	490c      	ldr	r1, [pc, #48]	; (8003234 <__NVIC_SetPriority+0x4c>)
 8003202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003206:	0112      	lsls	r2, r2, #4
 8003208:	b2d2      	uxtb	r2, r2
 800320a:	440b      	add	r3, r1
 800320c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003210:	e00a      	b.n	8003228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	b2da      	uxtb	r2, r3
 8003216:	4908      	ldr	r1, [pc, #32]	; (8003238 <__NVIC_SetPriority+0x50>)
 8003218:	79fb      	ldrb	r3, [r7, #7]
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	3b04      	subs	r3, #4
 8003220:	0112      	lsls	r2, r2, #4
 8003222:	b2d2      	uxtb	r2, r2
 8003224:	440b      	add	r3, r1
 8003226:	761a      	strb	r2, [r3, #24]
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	e000e100 	.word	0xe000e100
 8003238:	e000ed00 	.word	0xe000ed00

0800323c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800323c:	b480      	push	{r7}
 800323e:	b089      	sub	sp, #36	; 0x24
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	f1c3 0307 	rsb	r3, r3, #7
 8003256:	2b04      	cmp	r3, #4
 8003258:	bf28      	it	cs
 800325a:	2304      	movcs	r3, #4
 800325c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	3304      	adds	r3, #4
 8003262:	2b06      	cmp	r3, #6
 8003264:	d902      	bls.n	800326c <NVIC_EncodePriority+0x30>
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	3b03      	subs	r3, #3
 800326a:	e000      	b.n	800326e <NVIC_EncodePriority+0x32>
 800326c:	2300      	movs	r3, #0
 800326e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003270:	f04f 32ff 	mov.w	r2, #4294967295
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	43da      	mvns	r2, r3
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	401a      	ands	r2, r3
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003284:	f04f 31ff 	mov.w	r1, #4294967295
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	fa01 f303 	lsl.w	r3, r1, r3
 800328e:	43d9      	mvns	r1, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003294:	4313      	orrs	r3, r2
         );
}
 8003296:	4618      	mov	r0, r3
 8003298:	3724      	adds	r7, #36	; 0x24
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
	...

080032a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3b01      	subs	r3, #1
 80032b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032b4:	d301      	bcc.n	80032ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032b6:	2301      	movs	r3, #1
 80032b8:	e00f      	b.n	80032da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032ba:	4a0a      	ldr	r2, [pc, #40]	; (80032e4 <SysTick_Config+0x40>)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3b01      	subs	r3, #1
 80032c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032c2:	210f      	movs	r1, #15
 80032c4:	f04f 30ff 	mov.w	r0, #4294967295
 80032c8:	f7ff ff8e 	bl	80031e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032cc:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <SysTick_Config+0x40>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032d2:	4b04      	ldr	r3, [pc, #16]	; (80032e4 <SysTick_Config+0x40>)
 80032d4:	2207      	movs	r2, #7
 80032d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	e000e010 	.word	0xe000e010

080032e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7ff ff47 	bl	8003184 <__NVIC_SetPriorityGrouping>
}
 80032f6:	bf00      	nop
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b086      	sub	sp, #24
 8003302:	af00      	add	r7, sp, #0
 8003304:	4603      	mov	r3, r0
 8003306:	60b9      	str	r1, [r7, #8]
 8003308:	607a      	str	r2, [r7, #4]
 800330a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003310:	f7ff ff5c 	bl	80031cc <__NVIC_GetPriorityGrouping>
 8003314:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	68b9      	ldr	r1, [r7, #8]
 800331a:	6978      	ldr	r0, [r7, #20]
 800331c:	f7ff ff8e 	bl	800323c <NVIC_EncodePriority>
 8003320:	4602      	mov	r2, r0
 8003322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003326:	4611      	mov	r1, r2
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff ff5d 	bl	80031e8 <__NVIC_SetPriority>
}
 800332e:	bf00      	nop
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b082      	sub	sp, #8
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7ff ffb0 	bl	80032a4 <SysTick_Config>
 8003344:	4603      	mov	r3, r0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
	...

08003350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003350:	b480      	push	{r7}
 8003352:	b087      	sub	sp, #28
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800335a:	2300      	movs	r3, #0
 800335c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800335e:	e17f      	b.n	8003660 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	2101      	movs	r1, #1
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	fa01 f303 	lsl.w	r3, r1, r3
 800336c:	4013      	ands	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 8171 	beq.w	800365a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 0303 	and.w	r3, r3, #3
 8003380:	2b01      	cmp	r3, #1
 8003382:	d005      	beq.n	8003390 <HAL_GPIO_Init+0x40>
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f003 0303 	and.w	r3, r3, #3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d130      	bne.n	80033f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	2203      	movs	r2, #3
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	43db      	mvns	r3, r3
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	4013      	ands	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	68da      	ldr	r2, [r3, #12]
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033c6:	2201      	movs	r2, #1
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43db      	mvns	r3, r3
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	4013      	ands	r3, r2
 80033d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	091b      	lsrs	r3, r3, #4
 80033dc:	f003 0201 	and.w	r2, r3, #1
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	2b03      	cmp	r3, #3
 80033fc:	d118      	bne.n	8003430 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003402:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003404:	2201      	movs	r2, #1
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	43db      	mvns	r3, r3
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4013      	ands	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	08db      	lsrs	r3, r3, #3
 800341a:	f003 0201 	and.w	r2, r3, #1
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f003 0303 	and.w	r3, r3, #3
 8003438:	2b03      	cmp	r3, #3
 800343a:	d017      	beq.n	800346c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	2203      	movs	r2, #3
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	4013      	ands	r3, r2
 8003452:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	4313      	orrs	r3, r2
 8003464:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 0303 	and.w	r3, r3, #3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d123      	bne.n	80034c0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	08da      	lsrs	r2, r3, #3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3208      	adds	r2, #8
 8003480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003484:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	220f      	movs	r2, #15
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	43db      	mvns	r3, r3
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	4013      	ands	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	08da      	lsrs	r2, r3, #3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	3208      	adds	r2, #8
 80034ba:	6939      	ldr	r1, [r7, #16]
 80034bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	2203      	movs	r2, #3
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	43db      	mvns	r3, r3
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	4013      	ands	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f003 0203 	and.w	r2, r3, #3
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 80ac 	beq.w	800365a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003502:	4b5f      	ldr	r3, [pc, #380]	; (8003680 <HAL_GPIO_Init+0x330>)
 8003504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003506:	4a5e      	ldr	r2, [pc, #376]	; (8003680 <HAL_GPIO_Init+0x330>)
 8003508:	f043 0301 	orr.w	r3, r3, #1
 800350c:	6613      	str	r3, [r2, #96]	; 0x60
 800350e:	4b5c      	ldr	r3, [pc, #368]	; (8003680 <HAL_GPIO_Init+0x330>)
 8003510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	60bb      	str	r3, [r7, #8]
 8003518:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800351a:	4a5a      	ldr	r2, [pc, #360]	; (8003684 <HAL_GPIO_Init+0x334>)
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	089b      	lsrs	r3, r3, #2
 8003520:	3302      	adds	r3, #2
 8003522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003526:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	220f      	movs	r2, #15
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43db      	mvns	r3, r3
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	4013      	ands	r3, r2
 800353c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003544:	d025      	beq.n	8003592 <HAL_GPIO_Init+0x242>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a4f      	ldr	r2, [pc, #316]	; (8003688 <HAL_GPIO_Init+0x338>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d01f      	beq.n	800358e <HAL_GPIO_Init+0x23e>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a4e      	ldr	r2, [pc, #312]	; (800368c <HAL_GPIO_Init+0x33c>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d019      	beq.n	800358a <HAL_GPIO_Init+0x23a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a4d      	ldr	r2, [pc, #308]	; (8003690 <HAL_GPIO_Init+0x340>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d013      	beq.n	8003586 <HAL_GPIO_Init+0x236>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a4c      	ldr	r2, [pc, #304]	; (8003694 <HAL_GPIO_Init+0x344>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d00d      	beq.n	8003582 <HAL_GPIO_Init+0x232>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a4b      	ldr	r2, [pc, #300]	; (8003698 <HAL_GPIO_Init+0x348>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d007      	beq.n	800357e <HAL_GPIO_Init+0x22e>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a4a      	ldr	r2, [pc, #296]	; (800369c <HAL_GPIO_Init+0x34c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d101      	bne.n	800357a <HAL_GPIO_Init+0x22a>
 8003576:	2306      	movs	r3, #6
 8003578:	e00c      	b.n	8003594 <HAL_GPIO_Init+0x244>
 800357a:	2307      	movs	r3, #7
 800357c:	e00a      	b.n	8003594 <HAL_GPIO_Init+0x244>
 800357e:	2305      	movs	r3, #5
 8003580:	e008      	b.n	8003594 <HAL_GPIO_Init+0x244>
 8003582:	2304      	movs	r3, #4
 8003584:	e006      	b.n	8003594 <HAL_GPIO_Init+0x244>
 8003586:	2303      	movs	r3, #3
 8003588:	e004      	b.n	8003594 <HAL_GPIO_Init+0x244>
 800358a:	2302      	movs	r3, #2
 800358c:	e002      	b.n	8003594 <HAL_GPIO_Init+0x244>
 800358e:	2301      	movs	r3, #1
 8003590:	e000      	b.n	8003594 <HAL_GPIO_Init+0x244>
 8003592:	2300      	movs	r3, #0
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	f002 0203 	and.w	r2, r2, #3
 800359a:	0092      	lsls	r2, r2, #2
 800359c:	4093      	lsls	r3, r2
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035a4:	4937      	ldr	r1, [pc, #220]	; (8003684 <HAL_GPIO_Init+0x334>)
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	089b      	lsrs	r3, r3, #2
 80035aa:	3302      	adds	r3, #2
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035b2:	4b3b      	ldr	r3, [pc, #236]	; (80036a0 <HAL_GPIO_Init+0x350>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	43db      	mvns	r3, r3
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	4013      	ands	r3, r2
 80035c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035d6:	4a32      	ldr	r2, [pc, #200]	; (80036a0 <HAL_GPIO_Init+0x350>)
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035dc:	4b30      	ldr	r3, [pc, #192]	; (80036a0 <HAL_GPIO_Init+0x350>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	43db      	mvns	r3, r3
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	4013      	ands	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d003      	beq.n	8003600 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003600:	4a27      	ldr	r2, [pc, #156]	; (80036a0 <HAL_GPIO_Init+0x350>)
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003606:	4b26      	ldr	r3, [pc, #152]	; (80036a0 <HAL_GPIO_Init+0x350>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	43db      	mvns	r3, r3
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	4013      	ands	r3, r2
 8003614:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	4313      	orrs	r3, r2
 8003628:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800362a:	4a1d      	ldr	r2, [pc, #116]	; (80036a0 <HAL_GPIO_Init+0x350>)
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003630:	4b1b      	ldr	r3, [pc, #108]	; (80036a0 <HAL_GPIO_Init+0x350>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	43db      	mvns	r3, r3
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	4013      	ands	r3, r2
 800363e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	4313      	orrs	r3, r2
 8003652:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003654:	4a12      	ldr	r2, [pc, #72]	; (80036a0 <HAL_GPIO_Init+0x350>)
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	3301      	adds	r3, #1
 800365e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	fa22 f303 	lsr.w	r3, r2, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	f47f ae78 	bne.w	8003360 <HAL_GPIO_Init+0x10>
  }
}
 8003670:	bf00      	nop
 8003672:	bf00      	nop
 8003674:	371c      	adds	r7, #28
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	40021000 	.word	0x40021000
 8003684:	40010000 	.word	0x40010000
 8003688:	48000400 	.word	0x48000400
 800368c:	48000800 	.word	0x48000800
 8003690:	48000c00 	.word	0x48000c00
 8003694:	48001000 	.word	0x48001000
 8003698:	48001400 	.word	0x48001400
 800369c:	48001800 	.word	0x48001800
 80036a0:	40010400 	.word	0x40010400

080036a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	460b      	mov	r3, r1
 80036ae:	807b      	strh	r3, [r7, #2]
 80036b0:	4613      	mov	r3, r2
 80036b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036b4:	787b      	ldrb	r3, [r7, #1]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036ba:	887a      	ldrh	r2, [r7, #2]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036c0:	e002      	b.n	80036c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036c2:	887a      	ldrh	r2, [r7, #2]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	460b      	mov	r3, r1
 80036de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036e6:	887a      	ldrh	r2, [r7, #2]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4013      	ands	r3, r2
 80036ec:	041a      	lsls	r2, r3, #16
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	43d9      	mvns	r1, r3
 80036f2:	887b      	ldrh	r3, [r7, #2]
 80036f4:	400b      	ands	r3, r1
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	619a      	str	r2, [r3, #24]
}
 80036fc:	bf00      	nop
 80036fe:	3714      	adds	r7, #20
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800370c:	4b04      	ldr	r3, [pc, #16]	; (8003720 <HAL_PWREx_GetVoltageRange+0x18>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003714:	4618      	mov	r0, r3
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	40007000 	.word	0x40007000

08003724 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003732:	d130      	bne.n	8003796 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003734:	4b23      	ldr	r3, [pc, #140]	; (80037c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800373c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003740:	d038      	beq.n	80037b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003742:	4b20      	ldr	r3, [pc, #128]	; (80037c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800374a:	4a1e      	ldr	r2, [pc, #120]	; (80037c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800374c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003750:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003752:	4b1d      	ldr	r3, [pc, #116]	; (80037c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2232      	movs	r2, #50	; 0x32
 8003758:	fb02 f303 	mul.w	r3, r2, r3
 800375c:	4a1b      	ldr	r2, [pc, #108]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800375e:	fba2 2303 	umull	r2, r3, r2, r3
 8003762:	0c9b      	lsrs	r3, r3, #18
 8003764:	3301      	adds	r3, #1
 8003766:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003768:	e002      	b.n	8003770 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	3b01      	subs	r3, #1
 800376e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003770:	4b14      	ldr	r3, [pc, #80]	; (80037c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800377c:	d102      	bne.n	8003784 <HAL_PWREx_ControlVoltageScaling+0x60>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1f2      	bne.n	800376a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003784:	4b0f      	ldr	r3, [pc, #60]	; (80037c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800378c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003790:	d110      	bne.n	80037b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e00f      	b.n	80037b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003796:	4b0b      	ldr	r3, [pc, #44]	; (80037c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800379e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037a2:	d007      	beq.n	80037b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80037a4:	4b07      	ldr	r3, [pc, #28]	; (80037c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037ac:	4a05      	ldr	r2, [pc, #20]	; (80037c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	40007000 	.word	0x40007000
 80037c8:	20000008 	.word	0x20000008
 80037cc:	431bde83 	.word	0x431bde83

080037d0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b088      	sub	sp, #32
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e3ca      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037e2:	4b97      	ldr	r3, [pc, #604]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 030c 	and.w	r3, r3, #12
 80037ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037ec:	4b94      	ldr	r3, [pc, #592]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f003 0303 	and.w	r3, r3, #3
 80037f4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0310 	and.w	r3, r3, #16
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 80e4 	beq.w	80039cc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d007      	beq.n	800381a <HAL_RCC_OscConfig+0x4a>
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	2b0c      	cmp	r3, #12
 800380e:	f040 808b 	bne.w	8003928 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	2b01      	cmp	r3, #1
 8003816:	f040 8087 	bne.w	8003928 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800381a:	4b89      	ldr	r3, [pc, #548]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d005      	beq.n	8003832 <HAL_RCC_OscConfig+0x62>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e3a2      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1a      	ldr	r2, [r3, #32]
 8003836:	4b82      	ldr	r3, [pc, #520]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0308 	and.w	r3, r3, #8
 800383e:	2b00      	cmp	r3, #0
 8003840:	d004      	beq.n	800384c <HAL_RCC_OscConfig+0x7c>
 8003842:	4b7f      	ldr	r3, [pc, #508]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800384a:	e005      	b.n	8003858 <HAL_RCC_OscConfig+0x88>
 800384c:	4b7c      	ldr	r3, [pc, #496]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 800384e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003852:	091b      	lsrs	r3, r3, #4
 8003854:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003858:	4293      	cmp	r3, r2
 800385a:	d223      	bcs.n	80038a4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	4618      	mov	r0, r3
 8003862:	f000 fd55 	bl	8004310 <RCC_SetFlashLatencyFromMSIRange>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e383      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003870:	4b73      	ldr	r3, [pc, #460]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a72      	ldr	r2, [pc, #456]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 8003876:	f043 0308 	orr.w	r3, r3, #8
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	4b70      	ldr	r3, [pc, #448]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	496d      	ldr	r1, [pc, #436]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 800388a:	4313      	orrs	r3, r2
 800388c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800388e:	4b6c      	ldr	r3, [pc, #432]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	021b      	lsls	r3, r3, #8
 800389c:	4968      	ldr	r1, [pc, #416]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	604b      	str	r3, [r1, #4]
 80038a2:	e025      	b.n	80038f0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038a4:	4b66      	ldr	r3, [pc, #408]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a65      	ldr	r2, [pc, #404]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 80038aa:	f043 0308 	orr.w	r3, r3, #8
 80038ae:	6013      	str	r3, [r2, #0]
 80038b0:	4b63      	ldr	r3, [pc, #396]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	4960      	ldr	r1, [pc, #384]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038c2:	4b5f      	ldr	r3, [pc, #380]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	021b      	lsls	r3, r3, #8
 80038d0:	495b      	ldr	r1, [pc, #364]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d109      	bne.n	80038f0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f000 fd15 	bl	8004310 <RCC_SetFlashLatencyFromMSIRange>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e343      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038f0:	f000 fc4a 	bl	8004188 <HAL_RCC_GetSysClockFreq>
 80038f4:	4602      	mov	r2, r0
 80038f6:	4b52      	ldr	r3, [pc, #328]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	091b      	lsrs	r3, r3, #4
 80038fc:	f003 030f 	and.w	r3, r3, #15
 8003900:	4950      	ldr	r1, [pc, #320]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003902:	5ccb      	ldrb	r3, [r1, r3]
 8003904:	f003 031f 	and.w	r3, r3, #31
 8003908:	fa22 f303 	lsr.w	r3, r2, r3
 800390c:	4a4e      	ldr	r2, [pc, #312]	; (8003a48 <HAL_RCC_OscConfig+0x278>)
 800390e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003910:	4b4e      	ldr	r3, [pc, #312]	; (8003a4c <HAL_RCC_OscConfig+0x27c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4618      	mov	r0, r3
 8003916:	f7fe f993 	bl	8001c40 <HAL_InitTick>
 800391a:	4603      	mov	r3, r0
 800391c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800391e:	7bfb      	ldrb	r3, [r7, #15]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d052      	beq.n	80039ca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003924:	7bfb      	ldrb	r3, [r7, #15]
 8003926:	e327      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d032      	beq.n	8003996 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003930:	4b43      	ldr	r3, [pc, #268]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a42      	ldr	r2, [pc, #264]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 8003936:	f043 0301 	orr.w	r3, r3, #1
 800393a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800393c:	f7fe f9d0 	bl	8001ce0 <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003944:	f7fe f9cc 	bl	8001ce0 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e310      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003956:	4b3a      	ldr	r3, [pc, #232]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0f0      	beq.n	8003944 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003962:	4b37      	ldr	r3, [pc, #220]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a36      	ldr	r2, [pc, #216]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 8003968:	f043 0308 	orr.w	r3, r3, #8
 800396c:	6013      	str	r3, [r2, #0]
 800396e:	4b34      	ldr	r3, [pc, #208]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	4931      	ldr	r1, [pc, #196]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 800397c:	4313      	orrs	r3, r2
 800397e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003980:	4b2f      	ldr	r3, [pc, #188]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	021b      	lsls	r3, r3, #8
 800398e:	492c      	ldr	r1, [pc, #176]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 8003990:	4313      	orrs	r3, r2
 8003992:	604b      	str	r3, [r1, #4]
 8003994:	e01a      	b.n	80039cc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003996:	4b2a      	ldr	r3, [pc, #168]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a29      	ldr	r2, [pc, #164]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 800399c:	f023 0301 	bic.w	r3, r3, #1
 80039a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039a2:	f7fe f99d 	bl	8001ce0 <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039a8:	e008      	b.n	80039bc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039aa:	f7fe f999 	bl	8001ce0 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e2dd      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039bc:	4b20      	ldr	r3, [pc, #128]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1f0      	bne.n	80039aa <HAL_RCC_OscConfig+0x1da>
 80039c8:	e000      	b.n	80039cc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d074      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	2b08      	cmp	r3, #8
 80039dc:	d005      	beq.n	80039ea <HAL_RCC_OscConfig+0x21a>
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	2b0c      	cmp	r3, #12
 80039e2:	d10e      	bne.n	8003a02 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	2b03      	cmp	r3, #3
 80039e8:	d10b      	bne.n	8003a02 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ea:	4b15      	ldr	r3, [pc, #84]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d064      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x2f0>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d160      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e2ba      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a0a:	d106      	bne.n	8003a1a <HAL_RCC_OscConfig+0x24a>
 8003a0c:	4b0c      	ldr	r3, [pc, #48]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a0b      	ldr	r2, [pc, #44]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 8003a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a16:	6013      	str	r3, [r2, #0]
 8003a18:	e026      	b.n	8003a68 <HAL_RCC_OscConfig+0x298>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a22:	d115      	bne.n	8003a50 <HAL_RCC_OscConfig+0x280>
 8003a24:	4b06      	ldr	r3, [pc, #24]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a05      	ldr	r2, [pc, #20]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 8003a2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a2e:	6013      	str	r3, [r2, #0]
 8003a30:	4b03      	ldr	r3, [pc, #12]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a02      	ldr	r2, [pc, #8]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 8003a36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a3a:	6013      	str	r3, [r2, #0]
 8003a3c:	e014      	b.n	8003a68 <HAL_RCC_OscConfig+0x298>
 8003a3e:	bf00      	nop
 8003a40:	40021000 	.word	0x40021000
 8003a44:	08006ce0 	.word	0x08006ce0
 8003a48:	20000008 	.word	0x20000008
 8003a4c:	2000000c 	.word	0x2000000c
 8003a50:	4ba0      	ldr	r3, [pc, #640]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a9f      	ldr	r2, [pc, #636]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a5a:	6013      	str	r3, [r2, #0]
 8003a5c:	4b9d      	ldr	r3, [pc, #628]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a9c      	ldr	r2, [pc, #624]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d013      	beq.n	8003a98 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a70:	f7fe f936 	bl	8001ce0 <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a78:	f7fe f932 	bl	8001ce0 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b64      	cmp	r3, #100	; 0x64
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e276      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a8a:	4b92      	ldr	r3, [pc, #584]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0f0      	beq.n	8003a78 <HAL_RCC_OscConfig+0x2a8>
 8003a96:	e014      	b.n	8003ac2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a98:	f7fe f922 	bl	8001ce0 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aa0:	f7fe f91e 	bl	8001ce0 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b64      	cmp	r3, #100	; 0x64
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e262      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ab2:	4b88      	ldr	r3, [pc, #544]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1f0      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x2d0>
 8003abe:	e000      	b.n	8003ac2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d060      	beq.n	8003b90 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	d005      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x310>
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	2b0c      	cmp	r3, #12
 8003ad8:	d119      	bne.n	8003b0e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d116      	bne.n	8003b0e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ae0:	4b7c      	ldr	r3, [pc, #496]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d005      	beq.n	8003af8 <HAL_RCC_OscConfig+0x328>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e23f      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af8:	4b76      	ldr	r3, [pc, #472]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	061b      	lsls	r3, r3, #24
 8003b06:	4973      	ldr	r1, [pc, #460]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b0c:	e040      	b.n	8003b90 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d023      	beq.n	8003b5e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b16:	4b6f      	ldr	r3, [pc, #444]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a6e      	ldr	r2, [pc, #440]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b22:	f7fe f8dd 	bl	8001ce0 <HAL_GetTick>
 8003b26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b28:	e008      	b.n	8003b3c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b2a:	f7fe f8d9 	bl	8001ce0 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e21d      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b3c:	4b65      	ldr	r3, [pc, #404]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0f0      	beq.n	8003b2a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b48:	4b62      	ldr	r3, [pc, #392]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	061b      	lsls	r3, r3, #24
 8003b56:	495f      	ldr	r1, [pc, #380]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	604b      	str	r3, [r1, #4]
 8003b5c:	e018      	b.n	8003b90 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b5e:	4b5d      	ldr	r3, [pc, #372]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a5c      	ldr	r2, [pc, #368]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003b64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6a:	f7fe f8b9 	bl	8001ce0 <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b70:	e008      	b.n	8003b84 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b72:	f7fe f8b5 	bl	8001ce0 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e1f9      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b84:	4b53      	ldr	r3, [pc, #332]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1f0      	bne.n	8003b72 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0308 	and.w	r3, r3, #8
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d03c      	beq.n	8003c16 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d01c      	beq.n	8003bde <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ba4:	4b4b      	ldr	r3, [pc, #300]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003baa:	4a4a      	ldr	r2, [pc, #296]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003bac:	f043 0301 	orr.w	r3, r3, #1
 8003bb0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb4:	f7fe f894 	bl	8001ce0 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bbc:	f7fe f890 	bl	8001ce0 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e1d4      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bce:	4b41      	ldr	r3, [pc, #260]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d0ef      	beq.n	8003bbc <HAL_RCC_OscConfig+0x3ec>
 8003bdc:	e01b      	b.n	8003c16 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bde:	4b3d      	ldr	r3, [pc, #244]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003be0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003be4:	4a3b      	ldr	r2, [pc, #236]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003be6:	f023 0301 	bic.w	r3, r3, #1
 8003bea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bee:	f7fe f877 	bl	8001ce0 <HAL_GetTick>
 8003bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bf4:	e008      	b.n	8003c08 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bf6:	f7fe f873 	bl	8001ce0 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e1b7      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c08:	4b32      	ldr	r3, [pc, #200]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1ef      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0304 	and.w	r3, r3, #4
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f000 80a6 	beq.w	8003d70 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c24:	2300      	movs	r3, #0
 8003c26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c28:	4b2a      	ldr	r3, [pc, #168]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10d      	bne.n	8003c50 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c34:	4b27      	ldr	r3, [pc, #156]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c38:	4a26      	ldr	r2, [pc, #152]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003c3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c3e:	6593      	str	r3, [r2, #88]	; 0x58
 8003c40:	4b24      	ldr	r3, [pc, #144]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c48:	60bb      	str	r3, [r7, #8]
 8003c4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c50:	4b21      	ldr	r3, [pc, #132]	; (8003cd8 <HAL_RCC_OscConfig+0x508>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d118      	bne.n	8003c8e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c5c:	4b1e      	ldr	r3, [pc, #120]	; (8003cd8 <HAL_RCC_OscConfig+0x508>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a1d      	ldr	r2, [pc, #116]	; (8003cd8 <HAL_RCC_OscConfig+0x508>)
 8003c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c68:	f7fe f83a 	bl	8001ce0 <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c70:	f7fe f836 	bl	8001ce0 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e17a      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c82:	4b15      	ldr	r3, [pc, #84]	; (8003cd8 <HAL_RCC_OscConfig+0x508>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0f0      	beq.n	8003c70 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d108      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x4d8>
 8003c96:	4b0f      	ldr	r3, [pc, #60]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9c:	4a0d      	ldr	r2, [pc, #52]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003c9e:	f043 0301 	orr.w	r3, r3, #1
 8003ca2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ca6:	e029      	b.n	8003cfc <HAL_RCC_OscConfig+0x52c>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	2b05      	cmp	r3, #5
 8003cae:	d115      	bne.n	8003cdc <HAL_RCC_OscConfig+0x50c>
 8003cb0:	4b08      	ldr	r3, [pc, #32]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb6:	4a07      	ldr	r2, [pc, #28]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003cb8:	f043 0304 	orr.w	r3, r3, #4
 8003cbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cc0:	4b04      	ldr	r3, [pc, #16]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc6:	4a03      	ldr	r2, [pc, #12]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003cc8:	f043 0301 	orr.w	r3, r3, #1
 8003ccc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cd0:	e014      	b.n	8003cfc <HAL_RCC_OscConfig+0x52c>
 8003cd2:	bf00      	nop
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	40007000 	.word	0x40007000
 8003cdc:	4b9c      	ldr	r3, [pc, #624]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce2:	4a9b      	ldr	r2, [pc, #620]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003ce4:	f023 0301 	bic.w	r3, r3, #1
 8003ce8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cec:	4b98      	ldr	r3, [pc, #608]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf2:	4a97      	ldr	r2, [pc, #604]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003cf4:	f023 0304 	bic.w	r3, r3, #4
 8003cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d016      	beq.n	8003d32 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d04:	f7fd ffec 	bl	8001ce0 <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d0a:	e00a      	b.n	8003d22 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d0c:	f7fd ffe8 	bl	8001ce0 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e12a      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d22:	4b8b      	ldr	r3, [pc, #556]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d0ed      	beq.n	8003d0c <HAL_RCC_OscConfig+0x53c>
 8003d30:	e015      	b.n	8003d5e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d32:	f7fd ffd5 	bl	8001ce0 <HAL_GetTick>
 8003d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d38:	e00a      	b.n	8003d50 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d3a:	f7fd ffd1 	bl	8001ce0 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e113      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d50:	4b7f      	ldr	r3, [pc, #508]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1ed      	bne.n	8003d3a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d5e:	7ffb      	ldrb	r3, [r7, #31]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d105      	bne.n	8003d70 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d64:	4b7a      	ldr	r3, [pc, #488]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d68:	4a79      	ldr	r2, [pc, #484]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003d6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d6e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 80fe 	beq.w	8003f76 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	f040 80d0 	bne.w	8003f24 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d84:	4b72      	ldr	r3, [pc, #456]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f003 0203 	and.w	r2, r3, #3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d130      	bne.n	8003dfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da2:	3b01      	subs	r3, #1
 8003da4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d127      	bne.n	8003dfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d11f      	bne.n	8003dfa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003dc4:	2a07      	cmp	r2, #7
 8003dc6:	bf14      	ite	ne
 8003dc8:	2201      	movne	r2, #1
 8003dca:	2200      	moveq	r2, #0
 8003dcc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d113      	bne.n	8003dfa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ddc:	085b      	lsrs	r3, r3, #1
 8003dde:	3b01      	subs	r3, #1
 8003de0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d109      	bne.n	8003dfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df0:	085b      	lsrs	r3, r3, #1
 8003df2:	3b01      	subs	r3, #1
 8003df4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d06e      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	2b0c      	cmp	r3, #12
 8003dfe:	d069      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e00:	4b53      	ldr	r3, [pc, #332]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d105      	bne.n	8003e18 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003e0c:	4b50      	ldr	r3, [pc, #320]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e0ad      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e1c:	4b4c      	ldr	r3, [pc, #304]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a4b      	ldr	r2, [pc, #300]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003e22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e26:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e28:	f7fd ff5a 	bl	8001ce0 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e30:	f7fd ff56 	bl	8001ce0 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e09a      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e42:	4b43      	ldr	r3, [pc, #268]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1f0      	bne.n	8003e30 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e4e:	4b40      	ldr	r3, [pc, #256]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	4b40      	ldr	r3, [pc, #256]	; (8003f54 <HAL_RCC_OscConfig+0x784>)
 8003e54:	4013      	ands	r3, r2
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e5e:	3a01      	subs	r2, #1
 8003e60:	0112      	lsls	r2, r2, #4
 8003e62:	4311      	orrs	r1, r2
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e68:	0212      	lsls	r2, r2, #8
 8003e6a:	4311      	orrs	r1, r2
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e70:	0852      	lsrs	r2, r2, #1
 8003e72:	3a01      	subs	r2, #1
 8003e74:	0552      	lsls	r2, r2, #21
 8003e76:	4311      	orrs	r1, r2
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e7c:	0852      	lsrs	r2, r2, #1
 8003e7e:	3a01      	subs	r2, #1
 8003e80:	0652      	lsls	r2, r2, #25
 8003e82:	4311      	orrs	r1, r2
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e88:	0912      	lsrs	r2, r2, #4
 8003e8a:	0452      	lsls	r2, r2, #17
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	4930      	ldr	r1, [pc, #192]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e94:	4b2e      	ldr	r3, [pc, #184]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a2d      	ldr	r2, [pc, #180]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003e9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ea0:	4b2b      	ldr	r3, [pc, #172]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	4a2a      	ldr	r2, [pc, #168]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003ea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eaa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003eac:	f7fd ff18 	bl	8001ce0 <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb4:	f7fd ff14 	bl	8001ce0 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e058      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ec6:	4b22      	ldr	r3, [pc, #136]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0f0      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ed2:	e050      	b.n	8003f76 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e04f      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ed8:	4b1d      	ldr	r3, [pc, #116]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d148      	bne.n	8003f76 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ee4:	4b1a      	ldr	r3, [pc, #104]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a19      	ldr	r2, [pc, #100]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003eea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ef0:	4b17      	ldr	r3, [pc, #92]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	4a16      	ldr	r2, [pc, #88]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003ef6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003efa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003efc:	f7fd fef0 	bl	8001ce0 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f04:	f7fd feec 	bl	8001ce0 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e030      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f16:	4b0e      	ldr	r3, [pc, #56]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0f0      	beq.n	8003f04 <HAL_RCC_OscConfig+0x734>
 8003f22:	e028      	b.n	8003f76 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	2b0c      	cmp	r3, #12
 8003f28:	d023      	beq.n	8003f72 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f2a:	4b09      	ldr	r3, [pc, #36]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a08      	ldr	r2, [pc, #32]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003f30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f36:	f7fd fed3 	bl	8001ce0 <HAL_GetTick>
 8003f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f3c:	e00c      	b.n	8003f58 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f3e:	f7fd fecf 	bl	8001ce0 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d905      	bls.n	8003f58 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e013      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
 8003f50:	40021000 	.word	0x40021000
 8003f54:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f58:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <HAL_RCC_OscConfig+0x7b0>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1ec      	bne.n	8003f3e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003f64:	4b06      	ldr	r3, [pc, #24]	; (8003f80 <HAL_RCC_OscConfig+0x7b0>)
 8003f66:	68da      	ldr	r2, [r3, #12]
 8003f68:	4905      	ldr	r1, [pc, #20]	; (8003f80 <HAL_RCC_OscConfig+0x7b0>)
 8003f6a:	4b06      	ldr	r3, [pc, #24]	; (8003f84 <HAL_RCC_OscConfig+0x7b4>)
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	60cb      	str	r3, [r1, #12]
 8003f70:	e001      	b.n	8003f76 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e000      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3720      	adds	r7, #32
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40021000 	.word	0x40021000
 8003f84:	feeefffc 	.word	0xfeeefffc

08003f88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e0e7      	b.n	800416c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f9c:	4b75      	ldr	r3, [pc, #468]	; (8004174 <HAL_RCC_ClockConfig+0x1ec>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d910      	bls.n	8003fcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003faa:	4b72      	ldr	r3, [pc, #456]	; (8004174 <HAL_RCC_ClockConfig+0x1ec>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f023 0207 	bic.w	r2, r3, #7
 8003fb2:	4970      	ldr	r1, [pc, #448]	; (8004174 <HAL_RCC_ClockConfig+0x1ec>)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fba:	4b6e      	ldr	r3, [pc, #440]	; (8004174 <HAL_RCC_ClockConfig+0x1ec>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0307 	and.w	r3, r3, #7
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d001      	beq.n	8003fcc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e0cf      	b.n	800416c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d010      	beq.n	8003ffa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	4b66      	ldr	r3, [pc, #408]	; (8004178 <HAL_RCC_ClockConfig+0x1f0>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d908      	bls.n	8003ffa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fe8:	4b63      	ldr	r3, [pc, #396]	; (8004178 <HAL_RCC_ClockConfig+0x1f0>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	4960      	ldr	r1, [pc, #384]	; (8004178 <HAL_RCC_ClockConfig+0x1f0>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d04c      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b03      	cmp	r3, #3
 800400c:	d107      	bne.n	800401e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800400e:	4b5a      	ldr	r3, [pc, #360]	; (8004178 <HAL_RCC_ClockConfig+0x1f0>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d121      	bne.n	800405e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e0a6      	b.n	800416c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2b02      	cmp	r3, #2
 8004024:	d107      	bne.n	8004036 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004026:	4b54      	ldr	r3, [pc, #336]	; (8004178 <HAL_RCC_ClockConfig+0x1f0>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d115      	bne.n	800405e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e09a      	b.n	800416c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d107      	bne.n	800404e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800403e:	4b4e      	ldr	r3, [pc, #312]	; (8004178 <HAL_RCC_ClockConfig+0x1f0>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d109      	bne.n	800405e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e08e      	b.n	800416c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800404e:	4b4a      	ldr	r3, [pc, #296]	; (8004178 <HAL_RCC_ClockConfig+0x1f0>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e086      	b.n	800416c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800405e:	4b46      	ldr	r3, [pc, #280]	; (8004178 <HAL_RCC_ClockConfig+0x1f0>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f023 0203 	bic.w	r2, r3, #3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	4943      	ldr	r1, [pc, #268]	; (8004178 <HAL_RCC_ClockConfig+0x1f0>)
 800406c:	4313      	orrs	r3, r2
 800406e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004070:	f7fd fe36 	bl	8001ce0 <HAL_GetTick>
 8004074:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004076:	e00a      	b.n	800408e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004078:	f7fd fe32 	bl	8001ce0 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	f241 3288 	movw	r2, #5000	; 0x1388
 8004086:	4293      	cmp	r3, r2
 8004088:	d901      	bls.n	800408e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e06e      	b.n	800416c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800408e:	4b3a      	ldr	r3, [pc, #232]	; (8004178 <HAL_RCC_ClockConfig+0x1f0>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 020c 	and.w	r2, r3, #12
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	429a      	cmp	r2, r3
 800409e:	d1eb      	bne.n	8004078 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d010      	beq.n	80040ce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	4b31      	ldr	r3, [pc, #196]	; (8004178 <HAL_RCC_ClockConfig+0x1f0>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d208      	bcs.n	80040ce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040bc:	4b2e      	ldr	r3, [pc, #184]	; (8004178 <HAL_RCC_ClockConfig+0x1f0>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	492b      	ldr	r1, [pc, #172]	; (8004178 <HAL_RCC_ClockConfig+0x1f0>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040ce:	4b29      	ldr	r3, [pc, #164]	; (8004174 <HAL_RCC_ClockConfig+0x1ec>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0307 	and.w	r3, r3, #7
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d210      	bcs.n	80040fe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040dc:	4b25      	ldr	r3, [pc, #148]	; (8004174 <HAL_RCC_ClockConfig+0x1ec>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f023 0207 	bic.w	r2, r3, #7
 80040e4:	4923      	ldr	r1, [pc, #140]	; (8004174 <HAL_RCC_ClockConfig+0x1ec>)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ec:	4b21      	ldr	r3, [pc, #132]	; (8004174 <HAL_RCC_ClockConfig+0x1ec>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d001      	beq.n	80040fe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e036      	b.n	800416c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0304 	and.w	r3, r3, #4
 8004106:	2b00      	cmp	r3, #0
 8004108:	d008      	beq.n	800411c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800410a:	4b1b      	ldr	r3, [pc, #108]	; (8004178 <HAL_RCC_ClockConfig+0x1f0>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	4918      	ldr	r1, [pc, #96]	; (8004178 <HAL_RCC_ClockConfig+0x1f0>)
 8004118:	4313      	orrs	r3, r2
 800411a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0308 	and.w	r3, r3, #8
 8004124:	2b00      	cmp	r3, #0
 8004126:	d009      	beq.n	800413c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004128:	4b13      	ldr	r3, [pc, #76]	; (8004178 <HAL_RCC_ClockConfig+0x1f0>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	00db      	lsls	r3, r3, #3
 8004136:	4910      	ldr	r1, [pc, #64]	; (8004178 <HAL_RCC_ClockConfig+0x1f0>)
 8004138:	4313      	orrs	r3, r2
 800413a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800413c:	f000 f824 	bl	8004188 <HAL_RCC_GetSysClockFreq>
 8004140:	4602      	mov	r2, r0
 8004142:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <HAL_RCC_ClockConfig+0x1f0>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	091b      	lsrs	r3, r3, #4
 8004148:	f003 030f 	and.w	r3, r3, #15
 800414c:	490b      	ldr	r1, [pc, #44]	; (800417c <HAL_RCC_ClockConfig+0x1f4>)
 800414e:	5ccb      	ldrb	r3, [r1, r3]
 8004150:	f003 031f 	and.w	r3, r3, #31
 8004154:	fa22 f303 	lsr.w	r3, r2, r3
 8004158:	4a09      	ldr	r2, [pc, #36]	; (8004180 <HAL_RCC_ClockConfig+0x1f8>)
 800415a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800415c:	4b09      	ldr	r3, [pc, #36]	; (8004184 <HAL_RCC_ClockConfig+0x1fc>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	f7fd fd6d 	bl	8001c40 <HAL_InitTick>
 8004166:	4603      	mov	r3, r0
 8004168:	72fb      	strb	r3, [r7, #11]

  return status;
 800416a:	7afb      	ldrb	r3, [r7, #11]
}
 800416c:	4618      	mov	r0, r3
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40022000 	.word	0x40022000
 8004178:	40021000 	.word	0x40021000
 800417c:	08006ce0 	.word	0x08006ce0
 8004180:	20000008 	.word	0x20000008
 8004184:	2000000c 	.word	0x2000000c

08004188 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004188:	b480      	push	{r7}
 800418a:	b089      	sub	sp, #36	; 0x24
 800418c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800418e:	2300      	movs	r3, #0
 8004190:	61fb      	str	r3, [r7, #28]
 8004192:	2300      	movs	r3, #0
 8004194:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004196:	4b3e      	ldr	r3, [pc, #248]	; (8004290 <HAL_RCC_GetSysClockFreq+0x108>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 030c 	and.w	r3, r3, #12
 800419e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041a0:	4b3b      	ldr	r3, [pc, #236]	; (8004290 <HAL_RCC_GetSysClockFreq+0x108>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f003 0303 	and.w	r3, r3, #3
 80041a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d005      	beq.n	80041bc <HAL_RCC_GetSysClockFreq+0x34>
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	2b0c      	cmp	r3, #12
 80041b4:	d121      	bne.n	80041fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d11e      	bne.n	80041fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80041bc:	4b34      	ldr	r3, [pc, #208]	; (8004290 <HAL_RCC_GetSysClockFreq+0x108>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0308 	and.w	r3, r3, #8
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d107      	bne.n	80041d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80041c8:	4b31      	ldr	r3, [pc, #196]	; (8004290 <HAL_RCC_GetSysClockFreq+0x108>)
 80041ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ce:	0a1b      	lsrs	r3, r3, #8
 80041d0:	f003 030f 	and.w	r3, r3, #15
 80041d4:	61fb      	str	r3, [r7, #28]
 80041d6:	e005      	b.n	80041e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80041d8:	4b2d      	ldr	r3, [pc, #180]	; (8004290 <HAL_RCC_GetSysClockFreq+0x108>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	091b      	lsrs	r3, r3, #4
 80041de:	f003 030f 	and.w	r3, r3, #15
 80041e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80041e4:	4a2b      	ldr	r2, [pc, #172]	; (8004294 <HAL_RCC_GetSysClockFreq+0x10c>)
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10d      	bne.n	8004210 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041f8:	e00a      	b.n	8004210 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	2b04      	cmp	r3, #4
 80041fe:	d102      	bne.n	8004206 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004200:	4b25      	ldr	r3, [pc, #148]	; (8004298 <HAL_RCC_GetSysClockFreq+0x110>)
 8004202:	61bb      	str	r3, [r7, #24]
 8004204:	e004      	b.n	8004210 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	2b08      	cmp	r3, #8
 800420a:	d101      	bne.n	8004210 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800420c:	4b23      	ldr	r3, [pc, #140]	; (800429c <HAL_RCC_GetSysClockFreq+0x114>)
 800420e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	2b0c      	cmp	r3, #12
 8004214:	d134      	bne.n	8004280 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004216:	4b1e      	ldr	r3, [pc, #120]	; (8004290 <HAL_RCC_GetSysClockFreq+0x108>)
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2b02      	cmp	r3, #2
 8004224:	d003      	beq.n	800422e <HAL_RCC_GetSysClockFreq+0xa6>
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2b03      	cmp	r3, #3
 800422a:	d003      	beq.n	8004234 <HAL_RCC_GetSysClockFreq+0xac>
 800422c:	e005      	b.n	800423a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800422e:	4b1a      	ldr	r3, [pc, #104]	; (8004298 <HAL_RCC_GetSysClockFreq+0x110>)
 8004230:	617b      	str	r3, [r7, #20]
      break;
 8004232:	e005      	b.n	8004240 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004234:	4b19      	ldr	r3, [pc, #100]	; (800429c <HAL_RCC_GetSysClockFreq+0x114>)
 8004236:	617b      	str	r3, [r7, #20]
      break;
 8004238:	e002      	b.n	8004240 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	617b      	str	r3, [r7, #20]
      break;
 800423e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004240:	4b13      	ldr	r3, [pc, #76]	; (8004290 <HAL_RCC_GetSysClockFreq+0x108>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	091b      	lsrs	r3, r3, #4
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	3301      	adds	r3, #1
 800424c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800424e:	4b10      	ldr	r3, [pc, #64]	; (8004290 <HAL_RCC_GetSysClockFreq+0x108>)
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	0a1b      	lsrs	r3, r3, #8
 8004254:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	fb03 f202 	mul.w	r2, r3, r2
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	fbb2 f3f3 	udiv	r3, r2, r3
 8004264:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004266:	4b0a      	ldr	r3, [pc, #40]	; (8004290 <HAL_RCC_GetSysClockFreq+0x108>)
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	0e5b      	lsrs	r3, r3, #25
 800426c:	f003 0303 	and.w	r3, r3, #3
 8004270:	3301      	adds	r3, #1
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	fbb2 f3f3 	udiv	r3, r2, r3
 800427e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004280:	69bb      	ldr	r3, [r7, #24]
}
 8004282:	4618      	mov	r0, r3
 8004284:	3724      	adds	r7, #36	; 0x24
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	40021000 	.word	0x40021000
 8004294:	08006cf8 	.word	0x08006cf8
 8004298:	00f42400 	.word	0x00f42400
 800429c:	007a1200 	.word	0x007a1200

080042a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042a4:	4b03      	ldr	r3, [pc, #12]	; (80042b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80042a6:	681b      	ldr	r3, [r3, #0]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	20000008 	.word	0x20000008

080042b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042bc:	f7ff fff0 	bl	80042a0 <HAL_RCC_GetHCLKFreq>
 80042c0:	4602      	mov	r2, r0
 80042c2:	4b06      	ldr	r3, [pc, #24]	; (80042dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	0a1b      	lsrs	r3, r3, #8
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	4904      	ldr	r1, [pc, #16]	; (80042e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80042ce:	5ccb      	ldrb	r3, [r1, r3]
 80042d0:	f003 031f 	and.w	r3, r3, #31
 80042d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042d8:	4618      	mov	r0, r3
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	40021000 	.word	0x40021000
 80042e0:	08006cf0 	.word	0x08006cf0

080042e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80042e8:	f7ff ffda 	bl	80042a0 <HAL_RCC_GetHCLKFreq>
 80042ec:	4602      	mov	r2, r0
 80042ee:	4b06      	ldr	r3, [pc, #24]	; (8004308 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	0adb      	lsrs	r3, r3, #11
 80042f4:	f003 0307 	and.w	r3, r3, #7
 80042f8:	4904      	ldr	r1, [pc, #16]	; (800430c <HAL_RCC_GetPCLK2Freq+0x28>)
 80042fa:	5ccb      	ldrb	r3, [r1, r3]
 80042fc:	f003 031f 	and.w	r3, r3, #31
 8004300:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004304:	4618      	mov	r0, r3
 8004306:	bd80      	pop	{r7, pc}
 8004308:	40021000 	.word	0x40021000
 800430c:	08006cf0 	.word	0x08006cf0

08004310 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004318:	2300      	movs	r3, #0
 800431a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800431c:	4b2a      	ldr	r3, [pc, #168]	; (80043c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800431e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d003      	beq.n	8004330 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004328:	f7ff f9ee 	bl	8003708 <HAL_PWREx_GetVoltageRange>
 800432c:	6178      	str	r0, [r7, #20]
 800432e:	e014      	b.n	800435a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004330:	4b25      	ldr	r3, [pc, #148]	; (80043c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004334:	4a24      	ldr	r2, [pc, #144]	; (80043c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800433a:	6593      	str	r3, [r2, #88]	; 0x58
 800433c:	4b22      	ldr	r3, [pc, #136]	; (80043c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800433e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004344:	60fb      	str	r3, [r7, #12]
 8004346:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004348:	f7ff f9de 	bl	8003708 <HAL_PWREx_GetVoltageRange>
 800434c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800434e:	4b1e      	ldr	r3, [pc, #120]	; (80043c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004352:	4a1d      	ldr	r2, [pc, #116]	; (80043c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004354:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004358:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004360:	d10b      	bne.n	800437a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b80      	cmp	r3, #128	; 0x80
 8004366:	d919      	bls.n	800439c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2ba0      	cmp	r3, #160	; 0xa0
 800436c:	d902      	bls.n	8004374 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800436e:	2302      	movs	r3, #2
 8004370:	613b      	str	r3, [r7, #16]
 8004372:	e013      	b.n	800439c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004374:	2301      	movs	r3, #1
 8004376:	613b      	str	r3, [r7, #16]
 8004378:	e010      	b.n	800439c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2b80      	cmp	r3, #128	; 0x80
 800437e:	d902      	bls.n	8004386 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004380:	2303      	movs	r3, #3
 8004382:	613b      	str	r3, [r7, #16]
 8004384:	e00a      	b.n	800439c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b80      	cmp	r3, #128	; 0x80
 800438a:	d102      	bne.n	8004392 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800438c:	2302      	movs	r3, #2
 800438e:	613b      	str	r3, [r7, #16]
 8004390:	e004      	b.n	800439c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b70      	cmp	r3, #112	; 0x70
 8004396:	d101      	bne.n	800439c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004398:	2301      	movs	r3, #1
 800439a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800439c:	4b0b      	ldr	r3, [pc, #44]	; (80043cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f023 0207 	bic.w	r2, r3, #7
 80043a4:	4909      	ldr	r1, [pc, #36]	; (80043cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80043ac:	4b07      	ldr	r3, [pc, #28]	; (80043cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0307 	and.w	r3, r3, #7
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d001      	beq.n	80043be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e000      	b.n	80043c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3718      	adds	r7, #24
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	40021000 	.word	0x40021000
 80043cc:	40022000 	.word	0x40022000

080043d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043d8:	2300      	movs	r3, #0
 80043da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043dc:	2300      	movs	r3, #0
 80043de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d041      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043f4:	d02a      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80043f6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043fa:	d824      	bhi.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80043fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004400:	d008      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004402:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004406:	d81e      	bhi.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00a      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800440c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004410:	d010      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004412:	e018      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004414:	4b86      	ldr	r3, [pc, #536]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	4a85      	ldr	r2, [pc, #532]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800441a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800441e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004420:	e015      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	3304      	adds	r3, #4
 8004426:	2100      	movs	r1, #0
 8004428:	4618      	mov	r0, r3
 800442a:	f000 fabb 	bl	80049a4 <RCCEx_PLLSAI1_Config>
 800442e:	4603      	mov	r3, r0
 8004430:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004432:	e00c      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3320      	adds	r3, #32
 8004438:	2100      	movs	r1, #0
 800443a:	4618      	mov	r0, r3
 800443c:	f000 fba6 	bl	8004b8c <RCCEx_PLLSAI2_Config>
 8004440:	4603      	mov	r3, r0
 8004442:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004444:	e003      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	74fb      	strb	r3, [r7, #19]
      break;
 800444a:	e000      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800444c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800444e:	7cfb      	ldrb	r3, [r7, #19]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10b      	bne.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004454:	4b76      	ldr	r3, [pc, #472]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004462:	4973      	ldr	r1, [pc, #460]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004464:	4313      	orrs	r3, r2
 8004466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800446a:	e001      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800446c:	7cfb      	ldrb	r3, [r7, #19]
 800446e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d041      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004480:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004484:	d02a      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004486:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800448a:	d824      	bhi.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800448c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004490:	d008      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004492:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004496:	d81e      	bhi.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00a      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800449c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044a0:	d010      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80044a2:	e018      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80044a4:	4b62      	ldr	r3, [pc, #392]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	4a61      	ldr	r2, [pc, #388]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80044b0:	e015      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	3304      	adds	r3, #4
 80044b6:	2100      	movs	r1, #0
 80044b8:	4618      	mov	r0, r3
 80044ba:	f000 fa73 	bl	80049a4 <RCCEx_PLLSAI1_Config>
 80044be:	4603      	mov	r3, r0
 80044c0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80044c2:	e00c      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3320      	adds	r3, #32
 80044c8:	2100      	movs	r1, #0
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 fb5e 	bl	8004b8c <RCCEx_PLLSAI2_Config>
 80044d0:	4603      	mov	r3, r0
 80044d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80044d4:	e003      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	74fb      	strb	r3, [r7, #19]
      break;
 80044da:	e000      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80044dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044de:	7cfb      	ldrb	r3, [r7, #19]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10b      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80044e4:	4b52      	ldr	r3, [pc, #328]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044f2:	494f      	ldr	r1, [pc, #316]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80044fa:	e001      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044fc:	7cfb      	ldrb	r3, [r7, #19]
 80044fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 80a0 	beq.w	800464e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800450e:	2300      	movs	r3, #0
 8004510:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004512:	4b47      	ldr	r3, [pc, #284]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800451e:	2301      	movs	r3, #1
 8004520:	e000      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004522:	2300      	movs	r3, #0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00d      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004528:	4b41      	ldr	r3, [pc, #260]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800452a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452c:	4a40      	ldr	r2, [pc, #256]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800452e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004532:	6593      	str	r3, [r2, #88]	; 0x58
 8004534:	4b3e      	ldr	r3, [pc, #248]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800453c:	60bb      	str	r3, [r7, #8]
 800453e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004540:	2301      	movs	r3, #1
 8004542:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004544:	4b3b      	ldr	r3, [pc, #236]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a3a      	ldr	r2, [pc, #232]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800454a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800454e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004550:	f7fd fbc6 	bl	8001ce0 <HAL_GetTick>
 8004554:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004556:	e009      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004558:	f7fd fbc2 	bl	8001ce0 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d902      	bls.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	74fb      	strb	r3, [r7, #19]
        break;
 800456a:	e005      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800456c:	4b31      	ldr	r3, [pc, #196]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004574:	2b00      	cmp	r3, #0
 8004576:	d0ef      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004578:	7cfb      	ldrb	r3, [r7, #19]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d15c      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800457e:	4b2c      	ldr	r3, [pc, #176]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004584:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004588:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d01f      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	429a      	cmp	r2, r3
 800459a:	d019      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800459c:	4b24      	ldr	r3, [pc, #144]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800459e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045a8:	4b21      	ldr	r3, [pc, #132]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ae:	4a20      	ldr	r2, [pc, #128]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045b8:	4b1d      	ldr	r3, [pc, #116]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045be:	4a1c      	ldr	r2, [pc, #112]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045c8:	4a19      	ldr	r2, [pc, #100]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d016      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045da:	f7fd fb81 	bl	8001ce0 <HAL_GetTick>
 80045de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045e0:	e00b      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e2:	f7fd fb7d 	bl	8001ce0 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d902      	bls.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	74fb      	strb	r3, [r7, #19]
            break;
 80045f8:	e006      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045fa:	4b0d      	ldr	r3, [pc, #52]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d0ec      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004608:	7cfb      	ldrb	r3, [r7, #19]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10c      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800460e:	4b08      	ldr	r3, [pc, #32]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004614:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800461e:	4904      	ldr	r1, [pc, #16]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004620:	4313      	orrs	r3, r2
 8004622:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004626:	e009      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004628:	7cfb      	ldrb	r3, [r7, #19]
 800462a:	74bb      	strb	r3, [r7, #18]
 800462c:	e006      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800462e:	bf00      	nop
 8004630:	40021000 	.word	0x40021000
 8004634:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004638:	7cfb      	ldrb	r3, [r7, #19]
 800463a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800463c:	7c7b      	ldrb	r3, [r7, #17]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d105      	bne.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004642:	4b9e      	ldr	r3, [pc, #632]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004646:	4a9d      	ldr	r2, [pc, #628]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004648:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800464c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800465a:	4b98      	ldr	r3, [pc, #608]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800465c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004660:	f023 0203 	bic.w	r2, r3, #3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004668:	4994      	ldr	r1, [pc, #592]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800466a:	4313      	orrs	r3, r2
 800466c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00a      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800467c:	4b8f      	ldr	r3, [pc, #572]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800467e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004682:	f023 020c 	bic.w	r2, r3, #12
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800468a:	498c      	ldr	r1, [pc, #560]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0304 	and.w	r3, r3, #4
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00a      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800469e:	4b87      	ldr	r3, [pc, #540]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ac:	4983      	ldr	r1, [pc, #524]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0308 	and.w	r3, r3, #8
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00a      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046c0:	4b7e      	ldr	r3, [pc, #504]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ce:	497b      	ldr	r1, [pc, #492]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0310 	and.w	r3, r3, #16
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00a      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046e2:	4b76      	ldr	r3, [pc, #472]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046f0:	4972      	ldr	r1, [pc, #456]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0320 	and.w	r3, r3, #32
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00a      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004704:	4b6d      	ldr	r3, [pc, #436]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004712:	496a      	ldr	r1, [pc, #424]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004714:	4313      	orrs	r3, r2
 8004716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00a      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004726:	4b65      	ldr	r3, [pc, #404]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004734:	4961      	ldr	r1, [pc, #388]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004736:	4313      	orrs	r3, r2
 8004738:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00a      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004748:	4b5c      	ldr	r3, [pc, #368]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800474a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004756:	4959      	ldr	r1, [pc, #356]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004758:	4313      	orrs	r3, r2
 800475a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00a      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800476a:	4b54      	ldr	r3, [pc, #336]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800476c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004770:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004778:	4950      	ldr	r1, [pc, #320]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800477a:	4313      	orrs	r3, r2
 800477c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00a      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800478c:	4b4b      	ldr	r3, [pc, #300]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800478e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004792:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800479a:	4948      	ldr	r1, [pc, #288]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800479c:	4313      	orrs	r3, r2
 800479e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00a      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047ae:	4b43      	ldr	r3, [pc, #268]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047bc:	493f      	ldr	r1, [pc, #252]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d028      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047d0:	4b3a      	ldr	r3, [pc, #232]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047de:	4937      	ldr	r1, [pc, #220]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047ee:	d106      	bne.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047f0:	4b32      	ldr	r3, [pc, #200]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	4a31      	ldr	r2, [pc, #196]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047fa:	60d3      	str	r3, [r2, #12]
 80047fc:	e011      	b.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004802:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004806:	d10c      	bne.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	3304      	adds	r3, #4
 800480c:	2101      	movs	r1, #1
 800480e:	4618      	mov	r0, r3
 8004810:	f000 f8c8 	bl	80049a4 <RCCEx_PLLSAI1_Config>
 8004814:	4603      	mov	r3, r0
 8004816:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004818:	7cfb      	ldrb	r3, [r7, #19]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800481e:	7cfb      	ldrb	r3, [r7, #19]
 8004820:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d028      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800482e:	4b23      	ldr	r3, [pc, #140]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004834:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483c:	491f      	ldr	r1, [pc, #124]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800483e:	4313      	orrs	r3, r2
 8004840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004848:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800484c:	d106      	bne.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800484e:	4b1b      	ldr	r3, [pc, #108]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	4a1a      	ldr	r2, [pc, #104]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004854:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004858:	60d3      	str	r3, [r2, #12]
 800485a:	e011      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004860:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004864:	d10c      	bne.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	3304      	adds	r3, #4
 800486a:	2101      	movs	r1, #1
 800486c:	4618      	mov	r0, r3
 800486e:	f000 f899 	bl	80049a4 <RCCEx_PLLSAI1_Config>
 8004872:	4603      	mov	r3, r0
 8004874:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004876:	7cfb      	ldrb	r3, [r7, #19]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d001      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800487c:	7cfb      	ldrb	r3, [r7, #19]
 800487e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d02b      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800488c:	4b0b      	ldr	r3, [pc, #44]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800488e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004892:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800489a:	4908      	ldr	r1, [pc, #32]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800489c:	4313      	orrs	r3, r2
 800489e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048aa:	d109      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048ac:	4b03      	ldr	r3, [pc, #12]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	4a02      	ldr	r2, [pc, #8]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048b6:	60d3      	str	r3, [r2, #12]
 80048b8:	e014      	b.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80048ba:	bf00      	nop
 80048bc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048c8:	d10c      	bne.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	3304      	adds	r3, #4
 80048ce:	2101      	movs	r1, #1
 80048d0:	4618      	mov	r0, r3
 80048d2:	f000 f867 	bl	80049a4 <RCCEx_PLLSAI1_Config>
 80048d6:	4603      	mov	r3, r0
 80048d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048da:	7cfb      	ldrb	r3, [r7, #19]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d001      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80048e0:	7cfb      	ldrb	r3, [r7, #19]
 80048e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d02f      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048f0:	4b2b      	ldr	r3, [pc, #172]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048fe:	4928      	ldr	r1, [pc, #160]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004900:	4313      	orrs	r3, r2
 8004902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800490a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800490e:	d10d      	bne.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	3304      	adds	r3, #4
 8004914:	2102      	movs	r1, #2
 8004916:	4618      	mov	r0, r3
 8004918:	f000 f844 	bl	80049a4 <RCCEx_PLLSAI1_Config>
 800491c:	4603      	mov	r3, r0
 800491e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004920:	7cfb      	ldrb	r3, [r7, #19]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d014      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004926:	7cfb      	ldrb	r3, [r7, #19]
 8004928:	74bb      	strb	r3, [r7, #18]
 800492a:	e011      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004930:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004934:	d10c      	bne.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	3320      	adds	r3, #32
 800493a:	2102      	movs	r1, #2
 800493c:	4618      	mov	r0, r3
 800493e:	f000 f925 	bl	8004b8c <RCCEx_PLLSAI2_Config>
 8004942:	4603      	mov	r3, r0
 8004944:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004946:	7cfb      	ldrb	r3, [r7, #19]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d001      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800494c:	7cfb      	ldrb	r3, [r7, #19]
 800494e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00a      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800495c:	4b10      	ldr	r3, [pc, #64]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800495e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004962:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800496a:	490d      	ldr	r1, [pc, #52]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800496c:	4313      	orrs	r3, r2
 800496e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00b      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800497e:	4b08      	ldr	r3, [pc, #32]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004984:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800498e:	4904      	ldr	r1, [pc, #16]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004990:	4313      	orrs	r3, r2
 8004992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004996:	7cbb      	ldrb	r3, [r7, #18]
}
 8004998:	4618      	mov	r0, r3
 800499a:	3718      	adds	r7, #24
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	40021000 	.word	0x40021000

080049a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049ae:	2300      	movs	r3, #0
 80049b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049b2:	4b75      	ldr	r3, [pc, #468]	; (8004b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	f003 0303 	and.w	r3, r3, #3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d018      	beq.n	80049f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80049be:	4b72      	ldr	r3, [pc, #456]	; (8004b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	f003 0203 	and.w	r2, r3, #3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d10d      	bne.n	80049ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
       ||
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d009      	beq.n	80049ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80049d6:	4b6c      	ldr	r3, [pc, #432]	; (8004b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	091b      	lsrs	r3, r3, #4
 80049dc:	f003 0307 	and.w	r3, r3, #7
 80049e0:	1c5a      	adds	r2, r3, #1
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
       ||
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d047      	beq.n	8004a7a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	73fb      	strb	r3, [r7, #15]
 80049ee:	e044      	b.n	8004a7a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2b03      	cmp	r3, #3
 80049f6:	d018      	beq.n	8004a2a <RCCEx_PLLSAI1_Config+0x86>
 80049f8:	2b03      	cmp	r3, #3
 80049fa:	d825      	bhi.n	8004a48 <RCCEx_PLLSAI1_Config+0xa4>
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d002      	beq.n	8004a06 <RCCEx_PLLSAI1_Config+0x62>
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d009      	beq.n	8004a18 <RCCEx_PLLSAI1_Config+0x74>
 8004a04:	e020      	b.n	8004a48 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a06:	4b60      	ldr	r3, [pc, #384]	; (8004b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d11d      	bne.n	8004a4e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a16:	e01a      	b.n	8004a4e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a18:	4b5b      	ldr	r3, [pc, #364]	; (8004b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d116      	bne.n	8004a52 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a28:	e013      	b.n	8004a52 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a2a:	4b57      	ldr	r3, [pc, #348]	; (8004b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10f      	bne.n	8004a56 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a36:	4b54      	ldr	r3, [pc, #336]	; (8004b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d109      	bne.n	8004a56 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a46:	e006      	b.n	8004a56 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a4c:	e004      	b.n	8004a58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a4e:	bf00      	nop
 8004a50:	e002      	b.n	8004a58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a52:	bf00      	nop
 8004a54:	e000      	b.n	8004a58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a56:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a58:	7bfb      	ldrb	r3, [r7, #15]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10d      	bne.n	8004a7a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a5e:	4b4a      	ldr	r3, [pc, #296]	; (8004b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6819      	ldr	r1, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	011b      	lsls	r3, r3, #4
 8004a72:	430b      	orrs	r3, r1
 8004a74:	4944      	ldr	r1, [pc, #272]	; (8004b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a7a:	7bfb      	ldrb	r3, [r7, #15]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d17d      	bne.n	8004b7c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a80:	4b41      	ldr	r3, [pc, #260]	; (8004b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a40      	ldr	r2, [pc, #256]	; (8004b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a8c:	f7fd f928 	bl	8001ce0 <HAL_GetTick>
 8004a90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a92:	e009      	b.n	8004aa8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a94:	f7fd f924 	bl	8001ce0 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d902      	bls.n	8004aa8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	73fb      	strb	r3, [r7, #15]
        break;
 8004aa6:	e005      	b.n	8004ab4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004aa8:	4b37      	ldr	r3, [pc, #220]	; (8004b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1ef      	bne.n	8004a94 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ab4:	7bfb      	ldrb	r3, [r7, #15]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d160      	bne.n	8004b7c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d111      	bne.n	8004ae4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ac0:	4b31      	ldr	r3, [pc, #196]	; (8004b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004ac8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	6892      	ldr	r2, [r2, #8]
 8004ad0:	0211      	lsls	r1, r2, #8
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	68d2      	ldr	r2, [r2, #12]
 8004ad6:	0912      	lsrs	r2, r2, #4
 8004ad8:	0452      	lsls	r2, r2, #17
 8004ada:	430a      	orrs	r2, r1
 8004adc:	492a      	ldr	r1, [pc, #168]	; (8004b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	610b      	str	r3, [r1, #16]
 8004ae2:	e027      	b.n	8004b34 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d112      	bne.n	8004b10 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004aea:	4b27      	ldr	r3, [pc, #156]	; (8004b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004af2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	6892      	ldr	r2, [r2, #8]
 8004afa:	0211      	lsls	r1, r2, #8
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	6912      	ldr	r2, [r2, #16]
 8004b00:	0852      	lsrs	r2, r2, #1
 8004b02:	3a01      	subs	r2, #1
 8004b04:	0552      	lsls	r2, r2, #21
 8004b06:	430a      	orrs	r2, r1
 8004b08:	491f      	ldr	r1, [pc, #124]	; (8004b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	610b      	str	r3, [r1, #16]
 8004b0e:	e011      	b.n	8004b34 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b10:	4b1d      	ldr	r3, [pc, #116]	; (8004b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b18:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	6892      	ldr	r2, [r2, #8]
 8004b20:	0211      	lsls	r1, r2, #8
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	6952      	ldr	r2, [r2, #20]
 8004b26:	0852      	lsrs	r2, r2, #1
 8004b28:	3a01      	subs	r2, #1
 8004b2a:	0652      	lsls	r2, r2, #25
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	4916      	ldr	r1, [pc, #88]	; (8004b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b34:	4b14      	ldr	r3, [pc, #80]	; (8004b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a13      	ldr	r2, [pc, #76]	; (8004b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b3e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b40:	f7fd f8ce 	bl	8001ce0 <HAL_GetTick>
 8004b44:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b46:	e009      	b.n	8004b5c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b48:	f7fd f8ca 	bl	8001ce0 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d902      	bls.n	8004b5c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	73fb      	strb	r3, [r7, #15]
          break;
 8004b5a:	e005      	b.n	8004b68 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b5c:	4b0a      	ldr	r3, [pc, #40]	; (8004b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d0ef      	beq.n	8004b48 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004b68:	7bfb      	ldrb	r3, [r7, #15]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d106      	bne.n	8004b7c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b6e:	4b06      	ldr	r3, [pc, #24]	; (8004b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b70:	691a      	ldr	r2, [r3, #16]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	4904      	ldr	r1, [pc, #16]	; (8004b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	40021000 	.word	0x40021000

08004b8c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b96:	2300      	movs	r3, #0
 8004b98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b9a:	4b6a      	ldr	r3, [pc, #424]	; (8004d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	f003 0303 	and.w	r3, r3, #3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d018      	beq.n	8004bd8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004ba6:	4b67      	ldr	r3, [pc, #412]	; (8004d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	f003 0203 	and.w	r2, r3, #3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d10d      	bne.n	8004bd2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
       ||
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d009      	beq.n	8004bd2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004bbe:	4b61      	ldr	r3, [pc, #388]	; (8004d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	091b      	lsrs	r3, r3, #4
 8004bc4:	f003 0307 	and.w	r3, r3, #7
 8004bc8:	1c5a      	adds	r2, r3, #1
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
       ||
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d047      	beq.n	8004c62 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	73fb      	strb	r3, [r7, #15]
 8004bd6:	e044      	b.n	8004c62 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2b03      	cmp	r3, #3
 8004bde:	d018      	beq.n	8004c12 <RCCEx_PLLSAI2_Config+0x86>
 8004be0:	2b03      	cmp	r3, #3
 8004be2:	d825      	bhi.n	8004c30 <RCCEx_PLLSAI2_Config+0xa4>
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d002      	beq.n	8004bee <RCCEx_PLLSAI2_Config+0x62>
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d009      	beq.n	8004c00 <RCCEx_PLLSAI2_Config+0x74>
 8004bec:	e020      	b.n	8004c30 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004bee:	4b55      	ldr	r3, [pc, #340]	; (8004d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d11d      	bne.n	8004c36 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bfe:	e01a      	b.n	8004c36 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c00:	4b50      	ldr	r3, [pc, #320]	; (8004d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d116      	bne.n	8004c3a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c10:	e013      	b.n	8004c3a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c12:	4b4c      	ldr	r3, [pc, #304]	; (8004d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10f      	bne.n	8004c3e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c1e:	4b49      	ldr	r3, [pc, #292]	; (8004d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d109      	bne.n	8004c3e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c2e:	e006      	b.n	8004c3e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	73fb      	strb	r3, [r7, #15]
      break;
 8004c34:	e004      	b.n	8004c40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c36:	bf00      	nop
 8004c38:	e002      	b.n	8004c40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c3a:	bf00      	nop
 8004c3c:	e000      	b.n	8004c40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c40:	7bfb      	ldrb	r3, [r7, #15]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10d      	bne.n	8004c62 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c46:	4b3f      	ldr	r3, [pc, #252]	; (8004d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6819      	ldr	r1, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	3b01      	subs	r3, #1
 8004c58:	011b      	lsls	r3, r3, #4
 8004c5a:	430b      	orrs	r3, r1
 8004c5c:	4939      	ldr	r1, [pc, #228]	; (8004d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c62:	7bfb      	ldrb	r3, [r7, #15]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d167      	bne.n	8004d38 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004c68:	4b36      	ldr	r3, [pc, #216]	; (8004d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a35      	ldr	r2, [pc, #212]	; (8004d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c74:	f7fd f834 	bl	8001ce0 <HAL_GetTick>
 8004c78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c7a:	e009      	b.n	8004c90 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c7c:	f7fd f830 	bl	8001ce0 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d902      	bls.n	8004c90 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	73fb      	strb	r3, [r7, #15]
        break;
 8004c8e:	e005      	b.n	8004c9c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c90:	4b2c      	ldr	r3, [pc, #176]	; (8004d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1ef      	bne.n	8004c7c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d14a      	bne.n	8004d38 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d111      	bne.n	8004ccc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ca8:	4b26      	ldr	r3, [pc, #152]	; (8004d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004cb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	6892      	ldr	r2, [r2, #8]
 8004cb8:	0211      	lsls	r1, r2, #8
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	68d2      	ldr	r2, [r2, #12]
 8004cbe:	0912      	lsrs	r2, r2, #4
 8004cc0:	0452      	lsls	r2, r2, #17
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	491f      	ldr	r1, [pc, #124]	; (8004d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	614b      	str	r3, [r1, #20]
 8004cca:	e011      	b.n	8004cf0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ccc:	4b1d      	ldr	r3, [pc, #116]	; (8004d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004cd4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6892      	ldr	r2, [r2, #8]
 8004cdc:	0211      	lsls	r1, r2, #8
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	6912      	ldr	r2, [r2, #16]
 8004ce2:	0852      	lsrs	r2, r2, #1
 8004ce4:	3a01      	subs	r2, #1
 8004ce6:	0652      	lsls	r2, r2, #25
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	4916      	ldr	r1, [pc, #88]	; (8004d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004cf0:	4b14      	ldr	r3, [pc, #80]	; (8004d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a13      	ldr	r2, [pc, #76]	; (8004d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cfa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cfc:	f7fc fff0 	bl	8001ce0 <HAL_GetTick>
 8004d00:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d02:	e009      	b.n	8004d18 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d04:	f7fc ffec 	bl	8001ce0 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d902      	bls.n	8004d18 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	73fb      	strb	r3, [r7, #15]
          break;
 8004d16:	e005      	b.n	8004d24 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d18:	4b0a      	ldr	r3, [pc, #40]	; (8004d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0ef      	beq.n	8004d04 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004d24:	7bfb      	ldrb	r3, [r7, #15]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d106      	bne.n	8004d38 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004d2a:	4b06      	ldr	r3, [pc, #24]	; (8004d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d2c:	695a      	ldr	r2, [r3, #20]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	4904      	ldr	r1, [pc, #16]	; (8004d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	40021000 	.word	0x40021000

08004d48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e040      	b.n	8004ddc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d106      	bne.n	8004d70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f7fc fdc8 	bl	8001900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2224      	movs	r2, #36	; 0x24
 8004d74:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0201 	bic.w	r2, r2, #1
 8004d84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d002      	beq.n	8004d94 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 fae0 	bl	8005354 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 f825 	bl	8004de4 <UART_SetConfig>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d101      	bne.n	8004da4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e01b      	b.n	8004ddc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004db2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689a      	ldr	r2, [r3, #8]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f042 0201 	orr.w	r2, r2, #1
 8004dd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 fb5f 	bl	8005498 <UART_CheckIdleState>
 8004dda:	4603      	mov	r3, r0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004de8:	b08a      	sub	sp, #40	; 0x28
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	431a      	orrs	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	69db      	ldr	r3, [r3, #28]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	4ba4      	ldr	r3, [pc, #656]	; (80050a4 <UART_SetConfig+0x2c0>)
 8004e14:	4013      	ands	r3, r2
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	6812      	ldr	r2, [r2, #0]
 8004e1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e1c:	430b      	orrs	r3, r1
 8004e1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	68da      	ldr	r2, [r3, #12]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a99      	ldr	r2, [pc, #612]	; (80050a8 <UART_SetConfig+0x2c4>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d004      	beq.n	8004e50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e60:	430a      	orrs	r2, r1
 8004e62:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a90      	ldr	r2, [pc, #576]	; (80050ac <UART_SetConfig+0x2c8>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d126      	bne.n	8004ebc <UART_SetConfig+0xd8>
 8004e6e:	4b90      	ldr	r3, [pc, #576]	; (80050b0 <UART_SetConfig+0x2cc>)
 8004e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e74:	f003 0303 	and.w	r3, r3, #3
 8004e78:	2b03      	cmp	r3, #3
 8004e7a:	d81b      	bhi.n	8004eb4 <UART_SetConfig+0xd0>
 8004e7c:	a201      	add	r2, pc, #4	; (adr r2, 8004e84 <UART_SetConfig+0xa0>)
 8004e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e82:	bf00      	nop
 8004e84:	08004e95 	.word	0x08004e95
 8004e88:	08004ea5 	.word	0x08004ea5
 8004e8c:	08004e9d 	.word	0x08004e9d
 8004e90:	08004ead 	.word	0x08004ead
 8004e94:	2301      	movs	r3, #1
 8004e96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e9a:	e116      	b.n	80050ca <UART_SetConfig+0x2e6>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ea2:	e112      	b.n	80050ca <UART_SetConfig+0x2e6>
 8004ea4:	2304      	movs	r3, #4
 8004ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eaa:	e10e      	b.n	80050ca <UART_SetConfig+0x2e6>
 8004eac:	2308      	movs	r3, #8
 8004eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eb2:	e10a      	b.n	80050ca <UART_SetConfig+0x2e6>
 8004eb4:	2310      	movs	r3, #16
 8004eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eba:	e106      	b.n	80050ca <UART_SetConfig+0x2e6>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a7c      	ldr	r2, [pc, #496]	; (80050b4 <UART_SetConfig+0x2d0>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d138      	bne.n	8004f38 <UART_SetConfig+0x154>
 8004ec6:	4b7a      	ldr	r3, [pc, #488]	; (80050b0 <UART_SetConfig+0x2cc>)
 8004ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ecc:	f003 030c 	and.w	r3, r3, #12
 8004ed0:	2b0c      	cmp	r3, #12
 8004ed2:	d82d      	bhi.n	8004f30 <UART_SetConfig+0x14c>
 8004ed4:	a201      	add	r2, pc, #4	; (adr r2, 8004edc <UART_SetConfig+0xf8>)
 8004ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eda:	bf00      	nop
 8004edc:	08004f11 	.word	0x08004f11
 8004ee0:	08004f31 	.word	0x08004f31
 8004ee4:	08004f31 	.word	0x08004f31
 8004ee8:	08004f31 	.word	0x08004f31
 8004eec:	08004f21 	.word	0x08004f21
 8004ef0:	08004f31 	.word	0x08004f31
 8004ef4:	08004f31 	.word	0x08004f31
 8004ef8:	08004f31 	.word	0x08004f31
 8004efc:	08004f19 	.word	0x08004f19
 8004f00:	08004f31 	.word	0x08004f31
 8004f04:	08004f31 	.word	0x08004f31
 8004f08:	08004f31 	.word	0x08004f31
 8004f0c:	08004f29 	.word	0x08004f29
 8004f10:	2300      	movs	r3, #0
 8004f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f16:	e0d8      	b.n	80050ca <UART_SetConfig+0x2e6>
 8004f18:	2302      	movs	r3, #2
 8004f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f1e:	e0d4      	b.n	80050ca <UART_SetConfig+0x2e6>
 8004f20:	2304      	movs	r3, #4
 8004f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f26:	e0d0      	b.n	80050ca <UART_SetConfig+0x2e6>
 8004f28:	2308      	movs	r3, #8
 8004f2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f2e:	e0cc      	b.n	80050ca <UART_SetConfig+0x2e6>
 8004f30:	2310      	movs	r3, #16
 8004f32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f36:	e0c8      	b.n	80050ca <UART_SetConfig+0x2e6>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a5e      	ldr	r2, [pc, #376]	; (80050b8 <UART_SetConfig+0x2d4>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d125      	bne.n	8004f8e <UART_SetConfig+0x1aa>
 8004f42:	4b5b      	ldr	r3, [pc, #364]	; (80050b0 <UART_SetConfig+0x2cc>)
 8004f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f48:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f4c:	2b30      	cmp	r3, #48	; 0x30
 8004f4e:	d016      	beq.n	8004f7e <UART_SetConfig+0x19a>
 8004f50:	2b30      	cmp	r3, #48	; 0x30
 8004f52:	d818      	bhi.n	8004f86 <UART_SetConfig+0x1a2>
 8004f54:	2b20      	cmp	r3, #32
 8004f56:	d00a      	beq.n	8004f6e <UART_SetConfig+0x18a>
 8004f58:	2b20      	cmp	r3, #32
 8004f5a:	d814      	bhi.n	8004f86 <UART_SetConfig+0x1a2>
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d002      	beq.n	8004f66 <UART_SetConfig+0x182>
 8004f60:	2b10      	cmp	r3, #16
 8004f62:	d008      	beq.n	8004f76 <UART_SetConfig+0x192>
 8004f64:	e00f      	b.n	8004f86 <UART_SetConfig+0x1a2>
 8004f66:	2300      	movs	r3, #0
 8004f68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f6c:	e0ad      	b.n	80050ca <UART_SetConfig+0x2e6>
 8004f6e:	2302      	movs	r3, #2
 8004f70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f74:	e0a9      	b.n	80050ca <UART_SetConfig+0x2e6>
 8004f76:	2304      	movs	r3, #4
 8004f78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f7c:	e0a5      	b.n	80050ca <UART_SetConfig+0x2e6>
 8004f7e:	2308      	movs	r3, #8
 8004f80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f84:	e0a1      	b.n	80050ca <UART_SetConfig+0x2e6>
 8004f86:	2310      	movs	r3, #16
 8004f88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f8c:	e09d      	b.n	80050ca <UART_SetConfig+0x2e6>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a4a      	ldr	r2, [pc, #296]	; (80050bc <UART_SetConfig+0x2d8>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d125      	bne.n	8004fe4 <UART_SetConfig+0x200>
 8004f98:	4b45      	ldr	r3, [pc, #276]	; (80050b0 <UART_SetConfig+0x2cc>)
 8004f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004fa2:	2bc0      	cmp	r3, #192	; 0xc0
 8004fa4:	d016      	beq.n	8004fd4 <UART_SetConfig+0x1f0>
 8004fa6:	2bc0      	cmp	r3, #192	; 0xc0
 8004fa8:	d818      	bhi.n	8004fdc <UART_SetConfig+0x1f8>
 8004faa:	2b80      	cmp	r3, #128	; 0x80
 8004fac:	d00a      	beq.n	8004fc4 <UART_SetConfig+0x1e0>
 8004fae:	2b80      	cmp	r3, #128	; 0x80
 8004fb0:	d814      	bhi.n	8004fdc <UART_SetConfig+0x1f8>
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d002      	beq.n	8004fbc <UART_SetConfig+0x1d8>
 8004fb6:	2b40      	cmp	r3, #64	; 0x40
 8004fb8:	d008      	beq.n	8004fcc <UART_SetConfig+0x1e8>
 8004fba:	e00f      	b.n	8004fdc <UART_SetConfig+0x1f8>
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fc2:	e082      	b.n	80050ca <UART_SetConfig+0x2e6>
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fca:	e07e      	b.n	80050ca <UART_SetConfig+0x2e6>
 8004fcc:	2304      	movs	r3, #4
 8004fce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fd2:	e07a      	b.n	80050ca <UART_SetConfig+0x2e6>
 8004fd4:	2308      	movs	r3, #8
 8004fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fda:	e076      	b.n	80050ca <UART_SetConfig+0x2e6>
 8004fdc:	2310      	movs	r3, #16
 8004fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fe2:	e072      	b.n	80050ca <UART_SetConfig+0x2e6>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a35      	ldr	r2, [pc, #212]	; (80050c0 <UART_SetConfig+0x2dc>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d12a      	bne.n	8005044 <UART_SetConfig+0x260>
 8004fee:	4b30      	ldr	r3, [pc, #192]	; (80050b0 <UART_SetConfig+0x2cc>)
 8004ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ff8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ffc:	d01a      	beq.n	8005034 <UART_SetConfig+0x250>
 8004ffe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005002:	d81b      	bhi.n	800503c <UART_SetConfig+0x258>
 8005004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005008:	d00c      	beq.n	8005024 <UART_SetConfig+0x240>
 800500a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800500e:	d815      	bhi.n	800503c <UART_SetConfig+0x258>
 8005010:	2b00      	cmp	r3, #0
 8005012:	d003      	beq.n	800501c <UART_SetConfig+0x238>
 8005014:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005018:	d008      	beq.n	800502c <UART_SetConfig+0x248>
 800501a:	e00f      	b.n	800503c <UART_SetConfig+0x258>
 800501c:	2300      	movs	r3, #0
 800501e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005022:	e052      	b.n	80050ca <UART_SetConfig+0x2e6>
 8005024:	2302      	movs	r3, #2
 8005026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800502a:	e04e      	b.n	80050ca <UART_SetConfig+0x2e6>
 800502c:	2304      	movs	r3, #4
 800502e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005032:	e04a      	b.n	80050ca <UART_SetConfig+0x2e6>
 8005034:	2308      	movs	r3, #8
 8005036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800503a:	e046      	b.n	80050ca <UART_SetConfig+0x2e6>
 800503c:	2310      	movs	r3, #16
 800503e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005042:	e042      	b.n	80050ca <UART_SetConfig+0x2e6>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a17      	ldr	r2, [pc, #92]	; (80050a8 <UART_SetConfig+0x2c4>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d13a      	bne.n	80050c4 <UART_SetConfig+0x2e0>
 800504e:	4b18      	ldr	r3, [pc, #96]	; (80050b0 <UART_SetConfig+0x2cc>)
 8005050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005054:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005058:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800505c:	d01a      	beq.n	8005094 <UART_SetConfig+0x2b0>
 800505e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005062:	d81b      	bhi.n	800509c <UART_SetConfig+0x2b8>
 8005064:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005068:	d00c      	beq.n	8005084 <UART_SetConfig+0x2a0>
 800506a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800506e:	d815      	bhi.n	800509c <UART_SetConfig+0x2b8>
 8005070:	2b00      	cmp	r3, #0
 8005072:	d003      	beq.n	800507c <UART_SetConfig+0x298>
 8005074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005078:	d008      	beq.n	800508c <UART_SetConfig+0x2a8>
 800507a:	e00f      	b.n	800509c <UART_SetConfig+0x2b8>
 800507c:	2300      	movs	r3, #0
 800507e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005082:	e022      	b.n	80050ca <UART_SetConfig+0x2e6>
 8005084:	2302      	movs	r3, #2
 8005086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800508a:	e01e      	b.n	80050ca <UART_SetConfig+0x2e6>
 800508c:	2304      	movs	r3, #4
 800508e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005092:	e01a      	b.n	80050ca <UART_SetConfig+0x2e6>
 8005094:	2308      	movs	r3, #8
 8005096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800509a:	e016      	b.n	80050ca <UART_SetConfig+0x2e6>
 800509c:	2310      	movs	r3, #16
 800509e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050a2:	e012      	b.n	80050ca <UART_SetConfig+0x2e6>
 80050a4:	efff69f3 	.word	0xefff69f3
 80050a8:	40008000 	.word	0x40008000
 80050ac:	40013800 	.word	0x40013800
 80050b0:	40021000 	.word	0x40021000
 80050b4:	40004400 	.word	0x40004400
 80050b8:	40004800 	.word	0x40004800
 80050bc:	40004c00 	.word	0x40004c00
 80050c0:	40005000 	.word	0x40005000
 80050c4:	2310      	movs	r3, #16
 80050c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a9f      	ldr	r2, [pc, #636]	; (800534c <UART_SetConfig+0x568>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d17a      	bne.n	80051ca <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050d8:	2b08      	cmp	r3, #8
 80050da:	d824      	bhi.n	8005126 <UART_SetConfig+0x342>
 80050dc:	a201      	add	r2, pc, #4	; (adr r2, 80050e4 <UART_SetConfig+0x300>)
 80050de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e2:	bf00      	nop
 80050e4:	08005109 	.word	0x08005109
 80050e8:	08005127 	.word	0x08005127
 80050ec:	08005111 	.word	0x08005111
 80050f0:	08005127 	.word	0x08005127
 80050f4:	08005117 	.word	0x08005117
 80050f8:	08005127 	.word	0x08005127
 80050fc:	08005127 	.word	0x08005127
 8005100:	08005127 	.word	0x08005127
 8005104:	0800511f 	.word	0x0800511f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005108:	f7ff f8d6 	bl	80042b8 <HAL_RCC_GetPCLK1Freq>
 800510c:	61f8      	str	r0, [r7, #28]
        break;
 800510e:	e010      	b.n	8005132 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005110:	4b8f      	ldr	r3, [pc, #572]	; (8005350 <UART_SetConfig+0x56c>)
 8005112:	61fb      	str	r3, [r7, #28]
        break;
 8005114:	e00d      	b.n	8005132 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005116:	f7ff f837 	bl	8004188 <HAL_RCC_GetSysClockFreq>
 800511a:	61f8      	str	r0, [r7, #28]
        break;
 800511c:	e009      	b.n	8005132 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800511e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005122:	61fb      	str	r3, [r7, #28]
        break;
 8005124:	e005      	b.n	8005132 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005126:	2300      	movs	r3, #0
 8005128:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005130:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 80fb 	beq.w	8005330 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	4613      	mov	r3, r2
 8005140:	005b      	lsls	r3, r3, #1
 8005142:	4413      	add	r3, r2
 8005144:	69fa      	ldr	r2, [r7, #28]
 8005146:	429a      	cmp	r2, r3
 8005148:	d305      	bcc.n	8005156 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005150:	69fa      	ldr	r2, [r7, #28]
 8005152:	429a      	cmp	r2, r3
 8005154:	d903      	bls.n	800515e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800515c:	e0e8      	b.n	8005330 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	2200      	movs	r2, #0
 8005162:	461c      	mov	r4, r3
 8005164:	4615      	mov	r5, r2
 8005166:	f04f 0200 	mov.w	r2, #0
 800516a:	f04f 0300 	mov.w	r3, #0
 800516e:	022b      	lsls	r3, r5, #8
 8005170:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005174:	0222      	lsls	r2, r4, #8
 8005176:	68f9      	ldr	r1, [r7, #12]
 8005178:	6849      	ldr	r1, [r1, #4]
 800517a:	0849      	lsrs	r1, r1, #1
 800517c:	2000      	movs	r0, #0
 800517e:	4688      	mov	r8, r1
 8005180:	4681      	mov	r9, r0
 8005182:	eb12 0a08 	adds.w	sl, r2, r8
 8005186:	eb43 0b09 	adc.w	fp, r3, r9
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	603b      	str	r3, [r7, #0]
 8005192:	607a      	str	r2, [r7, #4]
 8005194:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005198:	4650      	mov	r0, sl
 800519a:	4659      	mov	r1, fp
 800519c:	f7fb f878 	bl	8000290 <__aeabi_uldivmod>
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	4613      	mov	r3, r2
 80051a6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051ae:	d308      	bcc.n	80051c2 <UART_SetConfig+0x3de>
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051b6:	d204      	bcs.n	80051c2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	60da      	str	r2, [r3, #12]
 80051c0:	e0b6      	b.n	8005330 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80051c8:	e0b2      	b.n	8005330 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051d2:	d15e      	bne.n	8005292 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80051d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051d8:	2b08      	cmp	r3, #8
 80051da:	d828      	bhi.n	800522e <UART_SetConfig+0x44a>
 80051dc:	a201      	add	r2, pc, #4	; (adr r2, 80051e4 <UART_SetConfig+0x400>)
 80051de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e2:	bf00      	nop
 80051e4:	08005209 	.word	0x08005209
 80051e8:	08005211 	.word	0x08005211
 80051ec:	08005219 	.word	0x08005219
 80051f0:	0800522f 	.word	0x0800522f
 80051f4:	0800521f 	.word	0x0800521f
 80051f8:	0800522f 	.word	0x0800522f
 80051fc:	0800522f 	.word	0x0800522f
 8005200:	0800522f 	.word	0x0800522f
 8005204:	08005227 	.word	0x08005227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005208:	f7ff f856 	bl	80042b8 <HAL_RCC_GetPCLK1Freq>
 800520c:	61f8      	str	r0, [r7, #28]
        break;
 800520e:	e014      	b.n	800523a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005210:	f7ff f868 	bl	80042e4 <HAL_RCC_GetPCLK2Freq>
 8005214:	61f8      	str	r0, [r7, #28]
        break;
 8005216:	e010      	b.n	800523a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005218:	4b4d      	ldr	r3, [pc, #308]	; (8005350 <UART_SetConfig+0x56c>)
 800521a:	61fb      	str	r3, [r7, #28]
        break;
 800521c:	e00d      	b.n	800523a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800521e:	f7fe ffb3 	bl	8004188 <HAL_RCC_GetSysClockFreq>
 8005222:	61f8      	str	r0, [r7, #28]
        break;
 8005224:	e009      	b.n	800523a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800522a:	61fb      	str	r3, [r7, #28]
        break;
 800522c:	e005      	b.n	800523a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005238:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d077      	beq.n	8005330 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	005a      	lsls	r2, r3, #1
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	085b      	lsrs	r3, r3, #1
 800524a:	441a      	add	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	fbb2 f3f3 	udiv	r3, r2, r3
 8005254:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	2b0f      	cmp	r3, #15
 800525a:	d916      	bls.n	800528a <UART_SetConfig+0x4a6>
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005262:	d212      	bcs.n	800528a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	b29b      	uxth	r3, r3
 8005268:	f023 030f 	bic.w	r3, r3, #15
 800526c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	085b      	lsrs	r3, r3, #1
 8005272:	b29b      	uxth	r3, r3
 8005274:	f003 0307 	and.w	r3, r3, #7
 8005278:	b29a      	uxth	r2, r3
 800527a:	8afb      	ldrh	r3, [r7, #22]
 800527c:	4313      	orrs	r3, r2
 800527e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	8afa      	ldrh	r2, [r7, #22]
 8005286:	60da      	str	r2, [r3, #12]
 8005288:	e052      	b.n	8005330 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005290:	e04e      	b.n	8005330 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005292:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005296:	2b08      	cmp	r3, #8
 8005298:	d827      	bhi.n	80052ea <UART_SetConfig+0x506>
 800529a:	a201      	add	r2, pc, #4	; (adr r2, 80052a0 <UART_SetConfig+0x4bc>)
 800529c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a0:	080052c5 	.word	0x080052c5
 80052a4:	080052cd 	.word	0x080052cd
 80052a8:	080052d5 	.word	0x080052d5
 80052ac:	080052eb 	.word	0x080052eb
 80052b0:	080052db 	.word	0x080052db
 80052b4:	080052eb 	.word	0x080052eb
 80052b8:	080052eb 	.word	0x080052eb
 80052bc:	080052eb 	.word	0x080052eb
 80052c0:	080052e3 	.word	0x080052e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052c4:	f7fe fff8 	bl	80042b8 <HAL_RCC_GetPCLK1Freq>
 80052c8:	61f8      	str	r0, [r7, #28]
        break;
 80052ca:	e014      	b.n	80052f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052cc:	f7ff f80a 	bl	80042e4 <HAL_RCC_GetPCLK2Freq>
 80052d0:	61f8      	str	r0, [r7, #28]
        break;
 80052d2:	e010      	b.n	80052f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052d4:	4b1e      	ldr	r3, [pc, #120]	; (8005350 <UART_SetConfig+0x56c>)
 80052d6:	61fb      	str	r3, [r7, #28]
        break;
 80052d8:	e00d      	b.n	80052f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052da:	f7fe ff55 	bl	8004188 <HAL_RCC_GetSysClockFreq>
 80052de:	61f8      	str	r0, [r7, #28]
        break;
 80052e0:	e009      	b.n	80052f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052e6:	61fb      	str	r3, [r7, #28]
        break;
 80052e8:	e005      	b.n	80052f6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80052ea:	2300      	movs	r3, #0
 80052ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80052f4:	bf00      	nop
    }

    if (pclk != 0U)
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d019      	beq.n	8005330 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	085a      	lsrs	r2, r3, #1
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	441a      	add	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	fbb2 f3f3 	udiv	r3, r2, r3
 800530e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	2b0f      	cmp	r3, #15
 8005314:	d909      	bls.n	800532a <UART_SetConfig+0x546>
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800531c:	d205      	bcs.n	800532a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	b29a      	uxth	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	60da      	str	r2, [r3, #12]
 8005328:	e002      	b.n	8005330 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800533c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005340:	4618      	mov	r0, r3
 8005342:	3728      	adds	r7, #40	; 0x28
 8005344:	46bd      	mov	sp, r7
 8005346:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800534a:	bf00      	nop
 800534c:	40008000 	.word	0x40008000
 8005350:	00f42400 	.word	0x00f42400

08005354 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	f003 0308 	and.w	r3, r3, #8
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00a      	beq.n	800537e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00a      	beq.n	80053a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	430a      	orrs	r2, r1
 800539e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00a      	beq.n	80053c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	430a      	orrs	r2, r1
 80053c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c6:	f003 0304 	and.w	r3, r3, #4
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00a      	beq.n	80053e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	430a      	orrs	r2, r1
 80053e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	f003 0310 	and.w	r3, r3, #16
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00a      	beq.n	8005406 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	430a      	orrs	r2, r1
 8005404:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540a:	f003 0320 	and.w	r3, r3, #32
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00a      	beq.n	8005428 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	430a      	orrs	r2, r1
 8005426:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005430:	2b00      	cmp	r3, #0
 8005432:	d01a      	beq.n	800546a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005452:	d10a      	bne.n	800546a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	430a      	orrs	r2, r1
 8005468:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00a      	beq.n	800548c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	430a      	orrs	r2, r1
 800548a:	605a      	str	r2, [r3, #4]
  }
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b098      	sub	sp, #96	; 0x60
 800549c:	af02      	add	r7, sp, #8
 800549e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054a8:	f7fc fc1a 	bl	8001ce0 <HAL_GetTick>
 80054ac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0308 	and.w	r3, r3, #8
 80054b8:	2b08      	cmp	r3, #8
 80054ba:	d12e      	bne.n	800551a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054c4:	2200      	movs	r2, #0
 80054c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f88c 	bl	80055e8 <UART_WaitOnFlagUntilTimeout>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d021      	beq.n	800551a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054de:	e853 3f00 	ldrex	r3, [r3]
 80054e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80054e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054ea:	653b      	str	r3, [r7, #80]	; 0x50
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	461a      	mov	r2, r3
 80054f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054f4:	647b      	str	r3, [r7, #68]	; 0x44
 80054f6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054fc:	e841 2300 	strex	r3, r2, [r1]
 8005500:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005504:	2b00      	cmp	r3, #0
 8005506:	d1e6      	bne.n	80054d6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2220      	movs	r2, #32
 800550c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e062      	b.n	80055e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0304 	and.w	r3, r3, #4
 8005524:	2b04      	cmp	r3, #4
 8005526:	d149      	bne.n	80055bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005528:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005530:	2200      	movs	r2, #0
 8005532:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f856 	bl	80055e8 <UART_WaitOnFlagUntilTimeout>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d03c      	beq.n	80055bc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	e853 3f00 	ldrex	r3, [r3]
 800554e:	623b      	str	r3, [r7, #32]
   return(result);
 8005550:	6a3b      	ldr	r3, [r7, #32]
 8005552:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005556:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	461a      	mov	r2, r3
 800555e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005560:	633b      	str	r3, [r7, #48]	; 0x30
 8005562:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005564:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005566:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005568:	e841 2300 	strex	r3, r2, [r1]
 800556c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800556e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1e6      	bne.n	8005542 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	3308      	adds	r3, #8
 800557a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	e853 3f00 	ldrex	r3, [r3]
 8005582:	60fb      	str	r3, [r7, #12]
   return(result);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f023 0301 	bic.w	r3, r3, #1
 800558a:	64bb      	str	r3, [r7, #72]	; 0x48
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	3308      	adds	r3, #8
 8005592:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005594:	61fa      	str	r2, [r7, #28]
 8005596:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005598:	69b9      	ldr	r1, [r7, #24]
 800559a:	69fa      	ldr	r2, [r7, #28]
 800559c:	e841 2300 	strex	r3, r2, [r1]
 80055a0:	617b      	str	r3, [r7, #20]
   return(result);
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1e5      	bne.n	8005574 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2220      	movs	r2, #32
 80055ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e011      	b.n	80055e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2220      	movs	r2, #32
 80055c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3758      	adds	r7, #88	; 0x58
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	603b      	str	r3, [r7, #0]
 80055f4:	4613      	mov	r3, r2
 80055f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055f8:	e049      	b.n	800568e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005600:	d045      	beq.n	800568e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005602:	f7fc fb6d 	bl	8001ce0 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	429a      	cmp	r2, r3
 8005610:	d302      	bcc.n	8005618 <UART_WaitOnFlagUntilTimeout+0x30>
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d101      	bne.n	800561c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e048      	b.n	80056ae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0304 	and.w	r3, r3, #4
 8005626:	2b00      	cmp	r3, #0
 8005628:	d031      	beq.n	800568e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	69db      	ldr	r3, [r3, #28]
 8005630:	f003 0308 	and.w	r3, r3, #8
 8005634:	2b08      	cmp	r3, #8
 8005636:	d110      	bne.n	800565a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2208      	movs	r2, #8
 800563e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f000 f838 	bl	80056b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2208      	movs	r2, #8
 800564a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e029      	b.n	80056ae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	69db      	ldr	r3, [r3, #28]
 8005660:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005668:	d111      	bne.n	800568e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005672:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f000 f81e 	bl	80056b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2220      	movs	r2, #32
 800567e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e00f      	b.n	80056ae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	69da      	ldr	r2, [r3, #28]
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	4013      	ands	r3, r2
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	429a      	cmp	r2, r3
 800569c:	bf0c      	ite	eq
 800569e:	2301      	moveq	r3, #1
 80056a0:	2300      	movne	r3, #0
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	461a      	mov	r2, r3
 80056a6:	79fb      	ldrb	r3, [r7, #7]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d0a6      	beq.n	80055fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b095      	sub	sp, #84	; 0x54
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c6:	e853 3f00 	ldrex	r3, [r3]
 80056ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	461a      	mov	r2, r3
 80056da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056dc:	643b      	str	r3, [r7, #64]	; 0x40
 80056de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056e4:	e841 2300 	strex	r3, r2, [r1]
 80056e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1e6      	bne.n	80056be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	3308      	adds	r3, #8
 80056f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f8:	6a3b      	ldr	r3, [r7, #32]
 80056fa:	e853 3f00 	ldrex	r3, [r3]
 80056fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	f023 0301 	bic.w	r3, r3, #1
 8005706:	64bb      	str	r3, [r7, #72]	; 0x48
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	3308      	adds	r3, #8
 800570e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005710:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005712:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005714:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005716:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005718:	e841 2300 	strex	r3, r2, [r1]
 800571c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800571e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1e5      	bne.n	80056f0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005728:	2b01      	cmp	r3, #1
 800572a:	d118      	bne.n	800575e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	e853 3f00 	ldrex	r3, [r3]
 8005738:	60bb      	str	r3, [r7, #8]
   return(result);
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	f023 0310 	bic.w	r3, r3, #16
 8005740:	647b      	str	r3, [r7, #68]	; 0x44
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	461a      	mov	r2, r3
 8005748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800574a:	61bb      	str	r3, [r7, #24]
 800574c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574e:	6979      	ldr	r1, [r7, #20]
 8005750:	69ba      	ldr	r2, [r7, #24]
 8005752:	e841 2300 	strex	r3, r2, [r1]
 8005756:	613b      	str	r3, [r7, #16]
   return(result);
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1e6      	bne.n	800572c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2220      	movs	r2, #32
 8005762:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005772:	bf00      	nop
 8005774:	3754      	adds	r7, #84	; 0x54
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
	...

08005780 <srand>:
 8005780:	b538      	push	{r3, r4, r5, lr}
 8005782:	4b10      	ldr	r3, [pc, #64]	; (80057c4 <srand+0x44>)
 8005784:	681d      	ldr	r5, [r3, #0]
 8005786:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8005788:	4604      	mov	r4, r0
 800578a:	b9b3      	cbnz	r3, 80057ba <srand+0x3a>
 800578c:	2018      	movs	r0, #24
 800578e:	f000 fa9b 	bl	8005cc8 <malloc>
 8005792:	4602      	mov	r2, r0
 8005794:	6328      	str	r0, [r5, #48]	; 0x30
 8005796:	b920      	cbnz	r0, 80057a2 <srand+0x22>
 8005798:	4b0b      	ldr	r3, [pc, #44]	; (80057c8 <srand+0x48>)
 800579a:	480c      	ldr	r0, [pc, #48]	; (80057cc <srand+0x4c>)
 800579c:	2146      	movs	r1, #70	; 0x46
 800579e:	f000 fa29 	bl	8005bf4 <__assert_func>
 80057a2:	490b      	ldr	r1, [pc, #44]	; (80057d0 <srand+0x50>)
 80057a4:	4b0b      	ldr	r3, [pc, #44]	; (80057d4 <srand+0x54>)
 80057a6:	e9c0 1300 	strd	r1, r3, [r0]
 80057aa:	4b0b      	ldr	r3, [pc, #44]	; (80057d8 <srand+0x58>)
 80057ac:	6083      	str	r3, [r0, #8]
 80057ae:	230b      	movs	r3, #11
 80057b0:	8183      	strh	r3, [r0, #12]
 80057b2:	2100      	movs	r1, #0
 80057b4:	2001      	movs	r0, #1
 80057b6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80057ba:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80057bc:	2200      	movs	r2, #0
 80057be:	611c      	str	r4, [r3, #16]
 80057c0:	615a      	str	r2, [r3, #20]
 80057c2:	bd38      	pop	{r3, r4, r5, pc}
 80057c4:	2000006c 	.word	0x2000006c
 80057c8:	08006d28 	.word	0x08006d28
 80057cc:	08006d3f 	.word	0x08006d3f
 80057d0:	abcd330e 	.word	0xabcd330e
 80057d4:	e66d1234 	.word	0xe66d1234
 80057d8:	0005deec 	.word	0x0005deec

080057dc <rand>:
 80057dc:	4b16      	ldr	r3, [pc, #88]	; (8005838 <rand+0x5c>)
 80057de:	b510      	push	{r4, lr}
 80057e0:	681c      	ldr	r4, [r3, #0]
 80057e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80057e4:	b9b3      	cbnz	r3, 8005814 <rand+0x38>
 80057e6:	2018      	movs	r0, #24
 80057e8:	f000 fa6e 	bl	8005cc8 <malloc>
 80057ec:	4602      	mov	r2, r0
 80057ee:	6320      	str	r0, [r4, #48]	; 0x30
 80057f0:	b920      	cbnz	r0, 80057fc <rand+0x20>
 80057f2:	4b12      	ldr	r3, [pc, #72]	; (800583c <rand+0x60>)
 80057f4:	4812      	ldr	r0, [pc, #72]	; (8005840 <rand+0x64>)
 80057f6:	2152      	movs	r1, #82	; 0x52
 80057f8:	f000 f9fc 	bl	8005bf4 <__assert_func>
 80057fc:	4911      	ldr	r1, [pc, #68]	; (8005844 <rand+0x68>)
 80057fe:	4b12      	ldr	r3, [pc, #72]	; (8005848 <rand+0x6c>)
 8005800:	e9c0 1300 	strd	r1, r3, [r0]
 8005804:	4b11      	ldr	r3, [pc, #68]	; (800584c <rand+0x70>)
 8005806:	6083      	str	r3, [r0, #8]
 8005808:	230b      	movs	r3, #11
 800580a:	8183      	strh	r3, [r0, #12]
 800580c:	2100      	movs	r1, #0
 800580e:	2001      	movs	r0, #1
 8005810:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005814:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005816:	480e      	ldr	r0, [pc, #56]	; (8005850 <rand+0x74>)
 8005818:	690b      	ldr	r3, [r1, #16]
 800581a:	694c      	ldr	r4, [r1, #20]
 800581c:	4a0d      	ldr	r2, [pc, #52]	; (8005854 <rand+0x78>)
 800581e:	4358      	muls	r0, r3
 8005820:	fb02 0004 	mla	r0, r2, r4, r0
 8005824:	fba3 3202 	umull	r3, r2, r3, r2
 8005828:	3301      	adds	r3, #1
 800582a:	eb40 0002 	adc.w	r0, r0, r2
 800582e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8005832:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005836:	bd10      	pop	{r4, pc}
 8005838:	2000006c 	.word	0x2000006c
 800583c:	08006d28 	.word	0x08006d28
 8005840:	08006d3f 	.word	0x08006d3f
 8005844:	abcd330e 	.word	0xabcd330e
 8005848:	e66d1234 	.word	0xe66d1234
 800584c:	0005deec 	.word	0x0005deec
 8005850:	5851f42d 	.word	0x5851f42d
 8005854:	4c957f2d 	.word	0x4c957f2d

08005858 <std>:
 8005858:	2300      	movs	r3, #0
 800585a:	b510      	push	{r4, lr}
 800585c:	4604      	mov	r4, r0
 800585e:	e9c0 3300 	strd	r3, r3, [r0]
 8005862:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005866:	6083      	str	r3, [r0, #8]
 8005868:	8181      	strh	r1, [r0, #12]
 800586a:	6643      	str	r3, [r0, #100]	; 0x64
 800586c:	81c2      	strh	r2, [r0, #14]
 800586e:	6183      	str	r3, [r0, #24]
 8005870:	4619      	mov	r1, r3
 8005872:	2208      	movs	r2, #8
 8005874:	305c      	adds	r0, #92	; 0x5c
 8005876:	f000 f914 	bl	8005aa2 <memset>
 800587a:	4b0d      	ldr	r3, [pc, #52]	; (80058b0 <std+0x58>)
 800587c:	6263      	str	r3, [r4, #36]	; 0x24
 800587e:	4b0d      	ldr	r3, [pc, #52]	; (80058b4 <std+0x5c>)
 8005880:	62a3      	str	r3, [r4, #40]	; 0x28
 8005882:	4b0d      	ldr	r3, [pc, #52]	; (80058b8 <std+0x60>)
 8005884:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005886:	4b0d      	ldr	r3, [pc, #52]	; (80058bc <std+0x64>)
 8005888:	6323      	str	r3, [r4, #48]	; 0x30
 800588a:	4b0d      	ldr	r3, [pc, #52]	; (80058c0 <std+0x68>)
 800588c:	6224      	str	r4, [r4, #32]
 800588e:	429c      	cmp	r4, r3
 8005890:	d006      	beq.n	80058a0 <std+0x48>
 8005892:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005896:	4294      	cmp	r4, r2
 8005898:	d002      	beq.n	80058a0 <std+0x48>
 800589a:	33d0      	adds	r3, #208	; 0xd0
 800589c:	429c      	cmp	r4, r3
 800589e:	d105      	bne.n	80058ac <std+0x54>
 80058a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80058a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058a8:	f000 b9a0 	b.w	8005bec <__retarget_lock_init_recursive>
 80058ac:	bd10      	pop	{r4, pc}
 80058ae:	bf00      	nop
 80058b0:	08005a1d 	.word	0x08005a1d
 80058b4:	08005a3f 	.word	0x08005a3f
 80058b8:	08005a77 	.word	0x08005a77
 80058bc:	08005a9b 	.word	0x08005a9b
 80058c0:	2000018c 	.word	0x2000018c

080058c4 <stdio_exit_handler>:
 80058c4:	4a02      	ldr	r2, [pc, #8]	; (80058d0 <stdio_exit_handler+0xc>)
 80058c6:	4903      	ldr	r1, [pc, #12]	; (80058d4 <stdio_exit_handler+0x10>)
 80058c8:	4803      	ldr	r0, [pc, #12]	; (80058d8 <stdio_exit_handler+0x14>)
 80058ca:	f000 b869 	b.w	80059a0 <_fwalk_sglue>
 80058ce:	bf00      	nop
 80058d0:	20000014 	.word	0x20000014
 80058d4:	0800650d 	.word	0x0800650d
 80058d8:	20000020 	.word	0x20000020

080058dc <cleanup_stdio>:
 80058dc:	6841      	ldr	r1, [r0, #4]
 80058de:	4b0c      	ldr	r3, [pc, #48]	; (8005910 <cleanup_stdio+0x34>)
 80058e0:	4299      	cmp	r1, r3
 80058e2:	b510      	push	{r4, lr}
 80058e4:	4604      	mov	r4, r0
 80058e6:	d001      	beq.n	80058ec <cleanup_stdio+0x10>
 80058e8:	f000 fe10 	bl	800650c <_fflush_r>
 80058ec:	68a1      	ldr	r1, [r4, #8]
 80058ee:	4b09      	ldr	r3, [pc, #36]	; (8005914 <cleanup_stdio+0x38>)
 80058f0:	4299      	cmp	r1, r3
 80058f2:	d002      	beq.n	80058fa <cleanup_stdio+0x1e>
 80058f4:	4620      	mov	r0, r4
 80058f6:	f000 fe09 	bl	800650c <_fflush_r>
 80058fa:	68e1      	ldr	r1, [r4, #12]
 80058fc:	4b06      	ldr	r3, [pc, #24]	; (8005918 <cleanup_stdio+0x3c>)
 80058fe:	4299      	cmp	r1, r3
 8005900:	d004      	beq.n	800590c <cleanup_stdio+0x30>
 8005902:	4620      	mov	r0, r4
 8005904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005908:	f000 be00 	b.w	800650c <_fflush_r>
 800590c:	bd10      	pop	{r4, pc}
 800590e:	bf00      	nop
 8005910:	2000018c 	.word	0x2000018c
 8005914:	200001f4 	.word	0x200001f4
 8005918:	2000025c 	.word	0x2000025c

0800591c <global_stdio_init.part.0>:
 800591c:	b510      	push	{r4, lr}
 800591e:	4b0b      	ldr	r3, [pc, #44]	; (800594c <global_stdio_init.part.0+0x30>)
 8005920:	4c0b      	ldr	r4, [pc, #44]	; (8005950 <global_stdio_init.part.0+0x34>)
 8005922:	4a0c      	ldr	r2, [pc, #48]	; (8005954 <global_stdio_init.part.0+0x38>)
 8005924:	601a      	str	r2, [r3, #0]
 8005926:	4620      	mov	r0, r4
 8005928:	2200      	movs	r2, #0
 800592a:	2104      	movs	r1, #4
 800592c:	f7ff ff94 	bl	8005858 <std>
 8005930:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005934:	2201      	movs	r2, #1
 8005936:	2109      	movs	r1, #9
 8005938:	f7ff ff8e 	bl	8005858 <std>
 800593c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005940:	2202      	movs	r2, #2
 8005942:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005946:	2112      	movs	r1, #18
 8005948:	f7ff bf86 	b.w	8005858 <std>
 800594c:	200002c4 	.word	0x200002c4
 8005950:	2000018c 	.word	0x2000018c
 8005954:	080058c5 	.word	0x080058c5

08005958 <__sfp_lock_acquire>:
 8005958:	4801      	ldr	r0, [pc, #4]	; (8005960 <__sfp_lock_acquire+0x8>)
 800595a:	f000 b948 	b.w	8005bee <__retarget_lock_acquire_recursive>
 800595e:	bf00      	nop
 8005960:	200002cd 	.word	0x200002cd

08005964 <__sfp_lock_release>:
 8005964:	4801      	ldr	r0, [pc, #4]	; (800596c <__sfp_lock_release+0x8>)
 8005966:	f000 b943 	b.w	8005bf0 <__retarget_lock_release_recursive>
 800596a:	bf00      	nop
 800596c:	200002cd 	.word	0x200002cd

08005970 <__sinit>:
 8005970:	b510      	push	{r4, lr}
 8005972:	4604      	mov	r4, r0
 8005974:	f7ff fff0 	bl	8005958 <__sfp_lock_acquire>
 8005978:	6a23      	ldr	r3, [r4, #32]
 800597a:	b11b      	cbz	r3, 8005984 <__sinit+0x14>
 800597c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005980:	f7ff bff0 	b.w	8005964 <__sfp_lock_release>
 8005984:	4b04      	ldr	r3, [pc, #16]	; (8005998 <__sinit+0x28>)
 8005986:	6223      	str	r3, [r4, #32]
 8005988:	4b04      	ldr	r3, [pc, #16]	; (800599c <__sinit+0x2c>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1f5      	bne.n	800597c <__sinit+0xc>
 8005990:	f7ff ffc4 	bl	800591c <global_stdio_init.part.0>
 8005994:	e7f2      	b.n	800597c <__sinit+0xc>
 8005996:	bf00      	nop
 8005998:	080058dd 	.word	0x080058dd
 800599c:	200002c4 	.word	0x200002c4

080059a0 <_fwalk_sglue>:
 80059a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059a4:	4607      	mov	r7, r0
 80059a6:	4688      	mov	r8, r1
 80059a8:	4614      	mov	r4, r2
 80059aa:	2600      	movs	r6, #0
 80059ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059b0:	f1b9 0901 	subs.w	r9, r9, #1
 80059b4:	d505      	bpl.n	80059c2 <_fwalk_sglue+0x22>
 80059b6:	6824      	ldr	r4, [r4, #0]
 80059b8:	2c00      	cmp	r4, #0
 80059ba:	d1f7      	bne.n	80059ac <_fwalk_sglue+0xc>
 80059bc:	4630      	mov	r0, r6
 80059be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059c2:	89ab      	ldrh	r3, [r5, #12]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d907      	bls.n	80059d8 <_fwalk_sglue+0x38>
 80059c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059cc:	3301      	adds	r3, #1
 80059ce:	d003      	beq.n	80059d8 <_fwalk_sglue+0x38>
 80059d0:	4629      	mov	r1, r5
 80059d2:	4638      	mov	r0, r7
 80059d4:	47c0      	blx	r8
 80059d6:	4306      	orrs	r6, r0
 80059d8:	3568      	adds	r5, #104	; 0x68
 80059da:	e7e9      	b.n	80059b0 <_fwalk_sglue+0x10>

080059dc <siprintf>:
 80059dc:	b40e      	push	{r1, r2, r3}
 80059de:	b500      	push	{lr}
 80059e0:	b09c      	sub	sp, #112	; 0x70
 80059e2:	ab1d      	add	r3, sp, #116	; 0x74
 80059e4:	9002      	str	r0, [sp, #8]
 80059e6:	9006      	str	r0, [sp, #24]
 80059e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80059ec:	4809      	ldr	r0, [pc, #36]	; (8005a14 <siprintf+0x38>)
 80059ee:	9107      	str	r1, [sp, #28]
 80059f0:	9104      	str	r1, [sp, #16]
 80059f2:	4909      	ldr	r1, [pc, #36]	; (8005a18 <siprintf+0x3c>)
 80059f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80059f8:	9105      	str	r1, [sp, #20]
 80059fa:	6800      	ldr	r0, [r0, #0]
 80059fc:	9301      	str	r3, [sp, #4]
 80059fe:	a902      	add	r1, sp, #8
 8005a00:	f000 fa70 	bl	8005ee4 <_svfiprintf_r>
 8005a04:	9b02      	ldr	r3, [sp, #8]
 8005a06:	2200      	movs	r2, #0
 8005a08:	701a      	strb	r2, [r3, #0]
 8005a0a:	b01c      	add	sp, #112	; 0x70
 8005a0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a10:	b003      	add	sp, #12
 8005a12:	4770      	bx	lr
 8005a14:	2000006c 	.word	0x2000006c
 8005a18:	ffff0208 	.word	0xffff0208

08005a1c <__sread>:
 8005a1c:	b510      	push	{r4, lr}
 8005a1e:	460c      	mov	r4, r1
 8005a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a24:	f000 f894 	bl	8005b50 <_read_r>
 8005a28:	2800      	cmp	r0, #0
 8005a2a:	bfab      	itete	ge
 8005a2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a2e:	89a3      	ldrhlt	r3, [r4, #12]
 8005a30:	181b      	addge	r3, r3, r0
 8005a32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a36:	bfac      	ite	ge
 8005a38:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a3a:	81a3      	strhlt	r3, [r4, #12]
 8005a3c:	bd10      	pop	{r4, pc}

08005a3e <__swrite>:
 8005a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a42:	461f      	mov	r7, r3
 8005a44:	898b      	ldrh	r3, [r1, #12]
 8005a46:	05db      	lsls	r3, r3, #23
 8005a48:	4605      	mov	r5, r0
 8005a4a:	460c      	mov	r4, r1
 8005a4c:	4616      	mov	r6, r2
 8005a4e:	d505      	bpl.n	8005a5c <__swrite+0x1e>
 8005a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a54:	2302      	movs	r3, #2
 8005a56:	2200      	movs	r2, #0
 8005a58:	f000 f868 	bl	8005b2c <_lseek_r>
 8005a5c:	89a3      	ldrh	r3, [r4, #12]
 8005a5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a66:	81a3      	strh	r3, [r4, #12]
 8005a68:	4632      	mov	r2, r6
 8005a6a:	463b      	mov	r3, r7
 8005a6c:	4628      	mov	r0, r5
 8005a6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a72:	f000 b87f 	b.w	8005b74 <_write_r>

08005a76 <__sseek>:
 8005a76:	b510      	push	{r4, lr}
 8005a78:	460c      	mov	r4, r1
 8005a7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a7e:	f000 f855 	bl	8005b2c <_lseek_r>
 8005a82:	1c43      	adds	r3, r0, #1
 8005a84:	89a3      	ldrh	r3, [r4, #12]
 8005a86:	bf15      	itete	ne
 8005a88:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a92:	81a3      	strheq	r3, [r4, #12]
 8005a94:	bf18      	it	ne
 8005a96:	81a3      	strhne	r3, [r4, #12]
 8005a98:	bd10      	pop	{r4, pc}

08005a9a <__sclose>:
 8005a9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a9e:	f000 b823 	b.w	8005ae8 <_close_r>

08005aa2 <memset>:
 8005aa2:	4402      	add	r2, r0
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d100      	bne.n	8005aac <memset+0xa>
 8005aaa:	4770      	bx	lr
 8005aac:	f803 1b01 	strb.w	r1, [r3], #1
 8005ab0:	e7f9      	b.n	8005aa6 <memset+0x4>
	...

08005ab4 <time>:
 8005ab4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005ab6:	4b0b      	ldr	r3, [pc, #44]	; (8005ae4 <time+0x30>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	4669      	mov	r1, sp
 8005abc:	4604      	mov	r4, r0
 8005abe:	6818      	ldr	r0, [r3, #0]
 8005ac0:	f000 f822 	bl	8005b08 <_gettimeofday_r>
 8005ac4:	2800      	cmp	r0, #0
 8005ac6:	bfbe      	ittt	lt
 8005ac8:	f04f 32ff 	movlt.w	r2, #4294967295
 8005acc:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ad0:	e9cd 2300 	strdlt	r2, r3, [sp]
 8005ad4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ad8:	b10c      	cbz	r4, 8005ade <time+0x2a>
 8005ada:	e9c4 0100 	strd	r0, r1, [r4]
 8005ade:	b004      	add	sp, #16
 8005ae0:	bd10      	pop	{r4, pc}
 8005ae2:	bf00      	nop
 8005ae4:	2000006c 	.word	0x2000006c

08005ae8 <_close_r>:
 8005ae8:	b538      	push	{r3, r4, r5, lr}
 8005aea:	4d06      	ldr	r5, [pc, #24]	; (8005b04 <_close_r+0x1c>)
 8005aec:	2300      	movs	r3, #0
 8005aee:	4604      	mov	r4, r0
 8005af0:	4608      	mov	r0, r1
 8005af2:	602b      	str	r3, [r5, #0]
 8005af4:	f7fb ffe5 	bl	8001ac2 <_close>
 8005af8:	1c43      	adds	r3, r0, #1
 8005afa:	d102      	bne.n	8005b02 <_close_r+0x1a>
 8005afc:	682b      	ldr	r3, [r5, #0]
 8005afe:	b103      	cbz	r3, 8005b02 <_close_r+0x1a>
 8005b00:	6023      	str	r3, [r4, #0]
 8005b02:	bd38      	pop	{r3, r4, r5, pc}
 8005b04:	200002c8 	.word	0x200002c8

08005b08 <_gettimeofday_r>:
 8005b08:	b538      	push	{r3, r4, r5, lr}
 8005b0a:	4d07      	ldr	r5, [pc, #28]	; (8005b28 <_gettimeofday_r+0x20>)
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	4604      	mov	r4, r0
 8005b10:	4608      	mov	r0, r1
 8005b12:	4611      	mov	r1, r2
 8005b14:	602b      	str	r3, [r5, #0]
 8005b16:	f001 f84b 	bl	8006bb0 <_gettimeofday>
 8005b1a:	1c43      	adds	r3, r0, #1
 8005b1c:	d102      	bne.n	8005b24 <_gettimeofday_r+0x1c>
 8005b1e:	682b      	ldr	r3, [r5, #0]
 8005b20:	b103      	cbz	r3, 8005b24 <_gettimeofday_r+0x1c>
 8005b22:	6023      	str	r3, [r4, #0]
 8005b24:	bd38      	pop	{r3, r4, r5, pc}
 8005b26:	bf00      	nop
 8005b28:	200002c8 	.word	0x200002c8

08005b2c <_lseek_r>:
 8005b2c:	b538      	push	{r3, r4, r5, lr}
 8005b2e:	4d07      	ldr	r5, [pc, #28]	; (8005b4c <_lseek_r+0x20>)
 8005b30:	4604      	mov	r4, r0
 8005b32:	4608      	mov	r0, r1
 8005b34:	4611      	mov	r1, r2
 8005b36:	2200      	movs	r2, #0
 8005b38:	602a      	str	r2, [r5, #0]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	f7fb ffe8 	bl	8001b10 <_lseek>
 8005b40:	1c43      	adds	r3, r0, #1
 8005b42:	d102      	bne.n	8005b4a <_lseek_r+0x1e>
 8005b44:	682b      	ldr	r3, [r5, #0]
 8005b46:	b103      	cbz	r3, 8005b4a <_lseek_r+0x1e>
 8005b48:	6023      	str	r3, [r4, #0]
 8005b4a:	bd38      	pop	{r3, r4, r5, pc}
 8005b4c:	200002c8 	.word	0x200002c8

08005b50 <_read_r>:
 8005b50:	b538      	push	{r3, r4, r5, lr}
 8005b52:	4d07      	ldr	r5, [pc, #28]	; (8005b70 <_read_r+0x20>)
 8005b54:	4604      	mov	r4, r0
 8005b56:	4608      	mov	r0, r1
 8005b58:	4611      	mov	r1, r2
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	602a      	str	r2, [r5, #0]
 8005b5e:	461a      	mov	r2, r3
 8005b60:	f7fb ff76 	bl	8001a50 <_read>
 8005b64:	1c43      	adds	r3, r0, #1
 8005b66:	d102      	bne.n	8005b6e <_read_r+0x1e>
 8005b68:	682b      	ldr	r3, [r5, #0]
 8005b6a:	b103      	cbz	r3, 8005b6e <_read_r+0x1e>
 8005b6c:	6023      	str	r3, [r4, #0]
 8005b6e:	bd38      	pop	{r3, r4, r5, pc}
 8005b70:	200002c8 	.word	0x200002c8

08005b74 <_write_r>:
 8005b74:	b538      	push	{r3, r4, r5, lr}
 8005b76:	4d07      	ldr	r5, [pc, #28]	; (8005b94 <_write_r+0x20>)
 8005b78:	4604      	mov	r4, r0
 8005b7a:	4608      	mov	r0, r1
 8005b7c:	4611      	mov	r1, r2
 8005b7e:	2200      	movs	r2, #0
 8005b80:	602a      	str	r2, [r5, #0]
 8005b82:	461a      	mov	r2, r3
 8005b84:	f7fb ff81 	bl	8001a8a <_write>
 8005b88:	1c43      	adds	r3, r0, #1
 8005b8a:	d102      	bne.n	8005b92 <_write_r+0x1e>
 8005b8c:	682b      	ldr	r3, [r5, #0]
 8005b8e:	b103      	cbz	r3, 8005b92 <_write_r+0x1e>
 8005b90:	6023      	str	r3, [r4, #0]
 8005b92:	bd38      	pop	{r3, r4, r5, pc}
 8005b94:	200002c8 	.word	0x200002c8

08005b98 <__errno>:
 8005b98:	4b01      	ldr	r3, [pc, #4]	; (8005ba0 <__errno+0x8>)
 8005b9a:	6818      	ldr	r0, [r3, #0]
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	2000006c 	.word	0x2000006c

08005ba4 <__libc_init_array>:
 8005ba4:	b570      	push	{r4, r5, r6, lr}
 8005ba6:	4d0d      	ldr	r5, [pc, #52]	; (8005bdc <__libc_init_array+0x38>)
 8005ba8:	4c0d      	ldr	r4, [pc, #52]	; (8005be0 <__libc_init_array+0x3c>)
 8005baa:	1b64      	subs	r4, r4, r5
 8005bac:	10a4      	asrs	r4, r4, #2
 8005bae:	2600      	movs	r6, #0
 8005bb0:	42a6      	cmp	r6, r4
 8005bb2:	d109      	bne.n	8005bc8 <__libc_init_array+0x24>
 8005bb4:	4d0b      	ldr	r5, [pc, #44]	; (8005be4 <__libc_init_array+0x40>)
 8005bb6:	4c0c      	ldr	r4, [pc, #48]	; (8005be8 <__libc_init_array+0x44>)
 8005bb8:	f001 f802 	bl	8006bc0 <_init>
 8005bbc:	1b64      	subs	r4, r4, r5
 8005bbe:	10a4      	asrs	r4, r4, #2
 8005bc0:	2600      	movs	r6, #0
 8005bc2:	42a6      	cmp	r6, r4
 8005bc4:	d105      	bne.n	8005bd2 <__libc_init_array+0x2e>
 8005bc6:	bd70      	pop	{r4, r5, r6, pc}
 8005bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bcc:	4798      	blx	r3
 8005bce:	3601      	adds	r6, #1
 8005bd0:	e7ee      	b.n	8005bb0 <__libc_init_array+0xc>
 8005bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bd6:	4798      	blx	r3
 8005bd8:	3601      	adds	r6, #1
 8005bda:	e7f2      	b.n	8005bc2 <__libc_init_array+0x1e>
 8005bdc:	08006e10 	.word	0x08006e10
 8005be0:	08006e10 	.word	0x08006e10
 8005be4:	08006e10 	.word	0x08006e10
 8005be8:	08006e14 	.word	0x08006e14

08005bec <__retarget_lock_init_recursive>:
 8005bec:	4770      	bx	lr

08005bee <__retarget_lock_acquire_recursive>:
 8005bee:	4770      	bx	lr

08005bf0 <__retarget_lock_release_recursive>:
 8005bf0:	4770      	bx	lr
	...

08005bf4 <__assert_func>:
 8005bf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005bf6:	4614      	mov	r4, r2
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	4b09      	ldr	r3, [pc, #36]	; (8005c20 <__assert_func+0x2c>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4605      	mov	r5, r0
 8005c00:	68d8      	ldr	r0, [r3, #12]
 8005c02:	b14c      	cbz	r4, 8005c18 <__assert_func+0x24>
 8005c04:	4b07      	ldr	r3, [pc, #28]	; (8005c24 <__assert_func+0x30>)
 8005c06:	9100      	str	r1, [sp, #0]
 8005c08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005c0c:	4906      	ldr	r1, [pc, #24]	; (8005c28 <__assert_func+0x34>)
 8005c0e:	462b      	mov	r3, r5
 8005c10:	f000 fca4 	bl	800655c <fiprintf>
 8005c14:	f000 fcec 	bl	80065f0 <abort>
 8005c18:	4b04      	ldr	r3, [pc, #16]	; (8005c2c <__assert_func+0x38>)
 8005c1a:	461c      	mov	r4, r3
 8005c1c:	e7f3      	b.n	8005c06 <__assert_func+0x12>
 8005c1e:	bf00      	nop
 8005c20:	2000006c 	.word	0x2000006c
 8005c24:	08006d97 	.word	0x08006d97
 8005c28:	08006da4 	.word	0x08006da4
 8005c2c:	08006dd2 	.word	0x08006dd2

08005c30 <_free_r>:
 8005c30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c32:	2900      	cmp	r1, #0
 8005c34:	d044      	beq.n	8005cc0 <_free_r+0x90>
 8005c36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c3a:	9001      	str	r0, [sp, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f1a1 0404 	sub.w	r4, r1, #4
 8005c42:	bfb8      	it	lt
 8005c44:	18e4      	addlt	r4, r4, r3
 8005c46:	f000 f8e7 	bl	8005e18 <__malloc_lock>
 8005c4a:	4a1e      	ldr	r2, [pc, #120]	; (8005cc4 <_free_r+0x94>)
 8005c4c:	9801      	ldr	r0, [sp, #4]
 8005c4e:	6813      	ldr	r3, [r2, #0]
 8005c50:	b933      	cbnz	r3, 8005c60 <_free_r+0x30>
 8005c52:	6063      	str	r3, [r4, #4]
 8005c54:	6014      	str	r4, [r2, #0]
 8005c56:	b003      	add	sp, #12
 8005c58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c5c:	f000 b8e2 	b.w	8005e24 <__malloc_unlock>
 8005c60:	42a3      	cmp	r3, r4
 8005c62:	d908      	bls.n	8005c76 <_free_r+0x46>
 8005c64:	6825      	ldr	r5, [r4, #0]
 8005c66:	1961      	adds	r1, r4, r5
 8005c68:	428b      	cmp	r3, r1
 8005c6a:	bf01      	itttt	eq
 8005c6c:	6819      	ldreq	r1, [r3, #0]
 8005c6e:	685b      	ldreq	r3, [r3, #4]
 8005c70:	1949      	addeq	r1, r1, r5
 8005c72:	6021      	streq	r1, [r4, #0]
 8005c74:	e7ed      	b.n	8005c52 <_free_r+0x22>
 8005c76:	461a      	mov	r2, r3
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	b10b      	cbz	r3, 8005c80 <_free_r+0x50>
 8005c7c:	42a3      	cmp	r3, r4
 8005c7e:	d9fa      	bls.n	8005c76 <_free_r+0x46>
 8005c80:	6811      	ldr	r1, [r2, #0]
 8005c82:	1855      	adds	r5, r2, r1
 8005c84:	42a5      	cmp	r5, r4
 8005c86:	d10b      	bne.n	8005ca0 <_free_r+0x70>
 8005c88:	6824      	ldr	r4, [r4, #0]
 8005c8a:	4421      	add	r1, r4
 8005c8c:	1854      	adds	r4, r2, r1
 8005c8e:	42a3      	cmp	r3, r4
 8005c90:	6011      	str	r1, [r2, #0]
 8005c92:	d1e0      	bne.n	8005c56 <_free_r+0x26>
 8005c94:	681c      	ldr	r4, [r3, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	6053      	str	r3, [r2, #4]
 8005c9a:	440c      	add	r4, r1
 8005c9c:	6014      	str	r4, [r2, #0]
 8005c9e:	e7da      	b.n	8005c56 <_free_r+0x26>
 8005ca0:	d902      	bls.n	8005ca8 <_free_r+0x78>
 8005ca2:	230c      	movs	r3, #12
 8005ca4:	6003      	str	r3, [r0, #0]
 8005ca6:	e7d6      	b.n	8005c56 <_free_r+0x26>
 8005ca8:	6825      	ldr	r5, [r4, #0]
 8005caa:	1961      	adds	r1, r4, r5
 8005cac:	428b      	cmp	r3, r1
 8005cae:	bf04      	itt	eq
 8005cb0:	6819      	ldreq	r1, [r3, #0]
 8005cb2:	685b      	ldreq	r3, [r3, #4]
 8005cb4:	6063      	str	r3, [r4, #4]
 8005cb6:	bf04      	itt	eq
 8005cb8:	1949      	addeq	r1, r1, r5
 8005cba:	6021      	streq	r1, [r4, #0]
 8005cbc:	6054      	str	r4, [r2, #4]
 8005cbe:	e7ca      	b.n	8005c56 <_free_r+0x26>
 8005cc0:	b003      	add	sp, #12
 8005cc2:	bd30      	pop	{r4, r5, pc}
 8005cc4:	200002d0 	.word	0x200002d0

08005cc8 <malloc>:
 8005cc8:	4b02      	ldr	r3, [pc, #8]	; (8005cd4 <malloc+0xc>)
 8005cca:	4601      	mov	r1, r0
 8005ccc:	6818      	ldr	r0, [r3, #0]
 8005cce:	f000 b823 	b.w	8005d18 <_malloc_r>
 8005cd2:	bf00      	nop
 8005cd4:	2000006c 	.word	0x2000006c

08005cd8 <sbrk_aligned>:
 8005cd8:	b570      	push	{r4, r5, r6, lr}
 8005cda:	4e0e      	ldr	r6, [pc, #56]	; (8005d14 <sbrk_aligned+0x3c>)
 8005cdc:	460c      	mov	r4, r1
 8005cde:	6831      	ldr	r1, [r6, #0]
 8005ce0:	4605      	mov	r5, r0
 8005ce2:	b911      	cbnz	r1, 8005cea <sbrk_aligned+0x12>
 8005ce4:	f000 fc66 	bl	80065b4 <_sbrk_r>
 8005ce8:	6030      	str	r0, [r6, #0]
 8005cea:	4621      	mov	r1, r4
 8005cec:	4628      	mov	r0, r5
 8005cee:	f000 fc61 	bl	80065b4 <_sbrk_r>
 8005cf2:	1c43      	adds	r3, r0, #1
 8005cf4:	d00a      	beq.n	8005d0c <sbrk_aligned+0x34>
 8005cf6:	1cc4      	adds	r4, r0, #3
 8005cf8:	f024 0403 	bic.w	r4, r4, #3
 8005cfc:	42a0      	cmp	r0, r4
 8005cfe:	d007      	beq.n	8005d10 <sbrk_aligned+0x38>
 8005d00:	1a21      	subs	r1, r4, r0
 8005d02:	4628      	mov	r0, r5
 8005d04:	f000 fc56 	bl	80065b4 <_sbrk_r>
 8005d08:	3001      	adds	r0, #1
 8005d0a:	d101      	bne.n	8005d10 <sbrk_aligned+0x38>
 8005d0c:	f04f 34ff 	mov.w	r4, #4294967295
 8005d10:	4620      	mov	r0, r4
 8005d12:	bd70      	pop	{r4, r5, r6, pc}
 8005d14:	200002d4 	.word	0x200002d4

08005d18 <_malloc_r>:
 8005d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d1c:	1ccd      	adds	r5, r1, #3
 8005d1e:	f025 0503 	bic.w	r5, r5, #3
 8005d22:	3508      	adds	r5, #8
 8005d24:	2d0c      	cmp	r5, #12
 8005d26:	bf38      	it	cc
 8005d28:	250c      	movcc	r5, #12
 8005d2a:	2d00      	cmp	r5, #0
 8005d2c:	4607      	mov	r7, r0
 8005d2e:	db01      	blt.n	8005d34 <_malloc_r+0x1c>
 8005d30:	42a9      	cmp	r1, r5
 8005d32:	d905      	bls.n	8005d40 <_malloc_r+0x28>
 8005d34:	230c      	movs	r3, #12
 8005d36:	603b      	str	r3, [r7, #0]
 8005d38:	2600      	movs	r6, #0
 8005d3a:	4630      	mov	r0, r6
 8005d3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d40:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005e14 <_malloc_r+0xfc>
 8005d44:	f000 f868 	bl	8005e18 <__malloc_lock>
 8005d48:	f8d8 3000 	ldr.w	r3, [r8]
 8005d4c:	461c      	mov	r4, r3
 8005d4e:	bb5c      	cbnz	r4, 8005da8 <_malloc_r+0x90>
 8005d50:	4629      	mov	r1, r5
 8005d52:	4638      	mov	r0, r7
 8005d54:	f7ff ffc0 	bl	8005cd8 <sbrk_aligned>
 8005d58:	1c43      	adds	r3, r0, #1
 8005d5a:	4604      	mov	r4, r0
 8005d5c:	d155      	bne.n	8005e0a <_malloc_r+0xf2>
 8005d5e:	f8d8 4000 	ldr.w	r4, [r8]
 8005d62:	4626      	mov	r6, r4
 8005d64:	2e00      	cmp	r6, #0
 8005d66:	d145      	bne.n	8005df4 <_malloc_r+0xdc>
 8005d68:	2c00      	cmp	r4, #0
 8005d6a:	d048      	beq.n	8005dfe <_malloc_r+0xe6>
 8005d6c:	6823      	ldr	r3, [r4, #0]
 8005d6e:	4631      	mov	r1, r6
 8005d70:	4638      	mov	r0, r7
 8005d72:	eb04 0903 	add.w	r9, r4, r3
 8005d76:	f000 fc1d 	bl	80065b4 <_sbrk_r>
 8005d7a:	4581      	cmp	r9, r0
 8005d7c:	d13f      	bne.n	8005dfe <_malloc_r+0xe6>
 8005d7e:	6821      	ldr	r1, [r4, #0]
 8005d80:	1a6d      	subs	r5, r5, r1
 8005d82:	4629      	mov	r1, r5
 8005d84:	4638      	mov	r0, r7
 8005d86:	f7ff ffa7 	bl	8005cd8 <sbrk_aligned>
 8005d8a:	3001      	adds	r0, #1
 8005d8c:	d037      	beq.n	8005dfe <_malloc_r+0xe6>
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	442b      	add	r3, r5
 8005d92:	6023      	str	r3, [r4, #0]
 8005d94:	f8d8 3000 	ldr.w	r3, [r8]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d038      	beq.n	8005e0e <_malloc_r+0xf6>
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	42a2      	cmp	r2, r4
 8005da0:	d12b      	bne.n	8005dfa <_malloc_r+0xe2>
 8005da2:	2200      	movs	r2, #0
 8005da4:	605a      	str	r2, [r3, #4]
 8005da6:	e00f      	b.n	8005dc8 <_malloc_r+0xb0>
 8005da8:	6822      	ldr	r2, [r4, #0]
 8005daa:	1b52      	subs	r2, r2, r5
 8005dac:	d41f      	bmi.n	8005dee <_malloc_r+0xd6>
 8005dae:	2a0b      	cmp	r2, #11
 8005db0:	d917      	bls.n	8005de2 <_malloc_r+0xca>
 8005db2:	1961      	adds	r1, r4, r5
 8005db4:	42a3      	cmp	r3, r4
 8005db6:	6025      	str	r5, [r4, #0]
 8005db8:	bf18      	it	ne
 8005dba:	6059      	strne	r1, [r3, #4]
 8005dbc:	6863      	ldr	r3, [r4, #4]
 8005dbe:	bf08      	it	eq
 8005dc0:	f8c8 1000 	streq.w	r1, [r8]
 8005dc4:	5162      	str	r2, [r4, r5]
 8005dc6:	604b      	str	r3, [r1, #4]
 8005dc8:	4638      	mov	r0, r7
 8005dca:	f104 060b 	add.w	r6, r4, #11
 8005dce:	f000 f829 	bl	8005e24 <__malloc_unlock>
 8005dd2:	f026 0607 	bic.w	r6, r6, #7
 8005dd6:	1d23      	adds	r3, r4, #4
 8005dd8:	1af2      	subs	r2, r6, r3
 8005dda:	d0ae      	beq.n	8005d3a <_malloc_r+0x22>
 8005ddc:	1b9b      	subs	r3, r3, r6
 8005dde:	50a3      	str	r3, [r4, r2]
 8005de0:	e7ab      	b.n	8005d3a <_malloc_r+0x22>
 8005de2:	42a3      	cmp	r3, r4
 8005de4:	6862      	ldr	r2, [r4, #4]
 8005de6:	d1dd      	bne.n	8005da4 <_malloc_r+0x8c>
 8005de8:	f8c8 2000 	str.w	r2, [r8]
 8005dec:	e7ec      	b.n	8005dc8 <_malloc_r+0xb0>
 8005dee:	4623      	mov	r3, r4
 8005df0:	6864      	ldr	r4, [r4, #4]
 8005df2:	e7ac      	b.n	8005d4e <_malloc_r+0x36>
 8005df4:	4634      	mov	r4, r6
 8005df6:	6876      	ldr	r6, [r6, #4]
 8005df8:	e7b4      	b.n	8005d64 <_malloc_r+0x4c>
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	e7cc      	b.n	8005d98 <_malloc_r+0x80>
 8005dfe:	230c      	movs	r3, #12
 8005e00:	603b      	str	r3, [r7, #0]
 8005e02:	4638      	mov	r0, r7
 8005e04:	f000 f80e 	bl	8005e24 <__malloc_unlock>
 8005e08:	e797      	b.n	8005d3a <_malloc_r+0x22>
 8005e0a:	6025      	str	r5, [r4, #0]
 8005e0c:	e7dc      	b.n	8005dc8 <_malloc_r+0xb0>
 8005e0e:	605b      	str	r3, [r3, #4]
 8005e10:	deff      	udf	#255	; 0xff
 8005e12:	bf00      	nop
 8005e14:	200002d0 	.word	0x200002d0

08005e18 <__malloc_lock>:
 8005e18:	4801      	ldr	r0, [pc, #4]	; (8005e20 <__malloc_lock+0x8>)
 8005e1a:	f7ff bee8 	b.w	8005bee <__retarget_lock_acquire_recursive>
 8005e1e:	bf00      	nop
 8005e20:	200002cc 	.word	0x200002cc

08005e24 <__malloc_unlock>:
 8005e24:	4801      	ldr	r0, [pc, #4]	; (8005e2c <__malloc_unlock+0x8>)
 8005e26:	f7ff bee3 	b.w	8005bf0 <__retarget_lock_release_recursive>
 8005e2a:	bf00      	nop
 8005e2c:	200002cc 	.word	0x200002cc

08005e30 <__ssputs_r>:
 8005e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e34:	688e      	ldr	r6, [r1, #8]
 8005e36:	461f      	mov	r7, r3
 8005e38:	42be      	cmp	r6, r7
 8005e3a:	680b      	ldr	r3, [r1, #0]
 8005e3c:	4682      	mov	sl, r0
 8005e3e:	460c      	mov	r4, r1
 8005e40:	4690      	mov	r8, r2
 8005e42:	d82c      	bhi.n	8005e9e <__ssputs_r+0x6e>
 8005e44:	898a      	ldrh	r2, [r1, #12]
 8005e46:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e4a:	d026      	beq.n	8005e9a <__ssputs_r+0x6a>
 8005e4c:	6965      	ldr	r5, [r4, #20]
 8005e4e:	6909      	ldr	r1, [r1, #16]
 8005e50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e54:	eba3 0901 	sub.w	r9, r3, r1
 8005e58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e5c:	1c7b      	adds	r3, r7, #1
 8005e5e:	444b      	add	r3, r9
 8005e60:	106d      	asrs	r5, r5, #1
 8005e62:	429d      	cmp	r5, r3
 8005e64:	bf38      	it	cc
 8005e66:	461d      	movcc	r5, r3
 8005e68:	0553      	lsls	r3, r2, #21
 8005e6a:	d527      	bpl.n	8005ebc <__ssputs_r+0x8c>
 8005e6c:	4629      	mov	r1, r5
 8005e6e:	f7ff ff53 	bl	8005d18 <_malloc_r>
 8005e72:	4606      	mov	r6, r0
 8005e74:	b360      	cbz	r0, 8005ed0 <__ssputs_r+0xa0>
 8005e76:	6921      	ldr	r1, [r4, #16]
 8005e78:	464a      	mov	r2, r9
 8005e7a:	f000 fbab 	bl	80065d4 <memcpy>
 8005e7e:	89a3      	ldrh	r3, [r4, #12]
 8005e80:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e88:	81a3      	strh	r3, [r4, #12]
 8005e8a:	6126      	str	r6, [r4, #16]
 8005e8c:	6165      	str	r5, [r4, #20]
 8005e8e:	444e      	add	r6, r9
 8005e90:	eba5 0509 	sub.w	r5, r5, r9
 8005e94:	6026      	str	r6, [r4, #0]
 8005e96:	60a5      	str	r5, [r4, #8]
 8005e98:	463e      	mov	r6, r7
 8005e9a:	42be      	cmp	r6, r7
 8005e9c:	d900      	bls.n	8005ea0 <__ssputs_r+0x70>
 8005e9e:	463e      	mov	r6, r7
 8005ea0:	6820      	ldr	r0, [r4, #0]
 8005ea2:	4632      	mov	r2, r6
 8005ea4:	4641      	mov	r1, r8
 8005ea6:	f000 fb6b 	bl	8006580 <memmove>
 8005eaa:	68a3      	ldr	r3, [r4, #8]
 8005eac:	1b9b      	subs	r3, r3, r6
 8005eae:	60a3      	str	r3, [r4, #8]
 8005eb0:	6823      	ldr	r3, [r4, #0]
 8005eb2:	4433      	add	r3, r6
 8005eb4:	6023      	str	r3, [r4, #0]
 8005eb6:	2000      	movs	r0, #0
 8005eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ebc:	462a      	mov	r2, r5
 8005ebe:	f000 fb9e 	bl	80065fe <_realloc_r>
 8005ec2:	4606      	mov	r6, r0
 8005ec4:	2800      	cmp	r0, #0
 8005ec6:	d1e0      	bne.n	8005e8a <__ssputs_r+0x5a>
 8005ec8:	6921      	ldr	r1, [r4, #16]
 8005eca:	4650      	mov	r0, sl
 8005ecc:	f7ff feb0 	bl	8005c30 <_free_r>
 8005ed0:	230c      	movs	r3, #12
 8005ed2:	f8ca 3000 	str.w	r3, [sl]
 8005ed6:	89a3      	ldrh	r3, [r4, #12]
 8005ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005edc:	81a3      	strh	r3, [r4, #12]
 8005ede:	f04f 30ff 	mov.w	r0, #4294967295
 8005ee2:	e7e9      	b.n	8005eb8 <__ssputs_r+0x88>

08005ee4 <_svfiprintf_r>:
 8005ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ee8:	4698      	mov	r8, r3
 8005eea:	898b      	ldrh	r3, [r1, #12]
 8005eec:	061b      	lsls	r3, r3, #24
 8005eee:	b09d      	sub	sp, #116	; 0x74
 8005ef0:	4607      	mov	r7, r0
 8005ef2:	460d      	mov	r5, r1
 8005ef4:	4614      	mov	r4, r2
 8005ef6:	d50e      	bpl.n	8005f16 <_svfiprintf_r+0x32>
 8005ef8:	690b      	ldr	r3, [r1, #16]
 8005efa:	b963      	cbnz	r3, 8005f16 <_svfiprintf_r+0x32>
 8005efc:	2140      	movs	r1, #64	; 0x40
 8005efe:	f7ff ff0b 	bl	8005d18 <_malloc_r>
 8005f02:	6028      	str	r0, [r5, #0]
 8005f04:	6128      	str	r0, [r5, #16]
 8005f06:	b920      	cbnz	r0, 8005f12 <_svfiprintf_r+0x2e>
 8005f08:	230c      	movs	r3, #12
 8005f0a:	603b      	str	r3, [r7, #0]
 8005f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f10:	e0d0      	b.n	80060b4 <_svfiprintf_r+0x1d0>
 8005f12:	2340      	movs	r3, #64	; 0x40
 8005f14:	616b      	str	r3, [r5, #20]
 8005f16:	2300      	movs	r3, #0
 8005f18:	9309      	str	r3, [sp, #36]	; 0x24
 8005f1a:	2320      	movs	r3, #32
 8005f1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f20:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f24:	2330      	movs	r3, #48	; 0x30
 8005f26:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80060cc <_svfiprintf_r+0x1e8>
 8005f2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f2e:	f04f 0901 	mov.w	r9, #1
 8005f32:	4623      	mov	r3, r4
 8005f34:	469a      	mov	sl, r3
 8005f36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f3a:	b10a      	cbz	r2, 8005f40 <_svfiprintf_r+0x5c>
 8005f3c:	2a25      	cmp	r2, #37	; 0x25
 8005f3e:	d1f9      	bne.n	8005f34 <_svfiprintf_r+0x50>
 8005f40:	ebba 0b04 	subs.w	fp, sl, r4
 8005f44:	d00b      	beq.n	8005f5e <_svfiprintf_r+0x7a>
 8005f46:	465b      	mov	r3, fp
 8005f48:	4622      	mov	r2, r4
 8005f4a:	4629      	mov	r1, r5
 8005f4c:	4638      	mov	r0, r7
 8005f4e:	f7ff ff6f 	bl	8005e30 <__ssputs_r>
 8005f52:	3001      	adds	r0, #1
 8005f54:	f000 80a9 	beq.w	80060aa <_svfiprintf_r+0x1c6>
 8005f58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f5a:	445a      	add	r2, fp
 8005f5c:	9209      	str	r2, [sp, #36]	; 0x24
 8005f5e:	f89a 3000 	ldrb.w	r3, [sl]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f000 80a1 	beq.w	80060aa <_svfiprintf_r+0x1c6>
 8005f68:	2300      	movs	r3, #0
 8005f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f72:	f10a 0a01 	add.w	sl, sl, #1
 8005f76:	9304      	str	r3, [sp, #16]
 8005f78:	9307      	str	r3, [sp, #28]
 8005f7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f7e:	931a      	str	r3, [sp, #104]	; 0x68
 8005f80:	4654      	mov	r4, sl
 8005f82:	2205      	movs	r2, #5
 8005f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f88:	4850      	ldr	r0, [pc, #320]	; (80060cc <_svfiprintf_r+0x1e8>)
 8005f8a:	f7fa f931 	bl	80001f0 <memchr>
 8005f8e:	9a04      	ldr	r2, [sp, #16]
 8005f90:	b9d8      	cbnz	r0, 8005fca <_svfiprintf_r+0xe6>
 8005f92:	06d0      	lsls	r0, r2, #27
 8005f94:	bf44      	itt	mi
 8005f96:	2320      	movmi	r3, #32
 8005f98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f9c:	0711      	lsls	r1, r2, #28
 8005f9e:	bf44      	itt	mi
 8005fa0:	232b      	movmi	r3, #43	; 0x2b
 8005fa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fa6:	f89a 3000 	ldrb.w	r3, [sl]
 8005faa:	2b2a      	cmp	r3, #42	; 0x2a
 8005fac:	d015      	beq.n	8005fda <_svfiprintf_r+0xf6>
 8005fae:	9a07      	ldr	r2, [sp, #28]
 8005fb0:	4654      	mov	r4, sl
 8005fb2:	2000      	movs	r0, #0
 8005fb4:	f04f 0c0a 	mov.w	ip, #10
 8005fb8:	4621      	mov	r1, r4
 8005fba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fbe:	3b30      	subs	r3, #48	; 0x30
 8005fc0:	2b09      	cmp	r3, #9
 8005fc2:	d94d      	bls.n	8006060 <_svfiprintf_r+0x17c>
 8005fc4:	b1b0      	cbz	r0, 8005ff4 <_svfiprintf_r+0x110>
 8005fc6:	9207      	str	r2, [sp, #28]
 8005fc8:	e014      	b.n	8005ff4 <_svfiprintf_r+0x110>
 8005fca:	eba0 0308 	sub.w	r3, r0, r8
 8005fce:	fa09 f303 	lsl.w	r3, r9, r3
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	9304      	str	r3, [sp, #16]
 8005fd6:	46a2      	mov	sl, r4
 8005fd8:	e7d2      	b.n	8005f80 <_svfiprintf_r+0x9c>
 8005fda:	9b03      	ldr	r3, [sp, #12]
 8005fdc:	1d19      	adds	r1, r3, #4
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	9103      	str	r1, [sp, #12]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	bfbb      	ittet	lt
 8005fe6:	425b      	neglt	r3, r3
 8005fe8:	f042 0202 	orrlt.w	r2, r2, #2
 8005fec:	9307      	strge	r3, [sp, #28]
 8005fee:	9307      	strlt	r3, [sp, #28]
 8005ff0:	bfb8      	it	lt
 8005ff2:	9204      	strlt	r2, [sp, #16]
 8005ff4:	7823      	ldrb	r3, [r4, #0]
 8005ff6:	2b2e      	cmp	r3, #46	; 0x2e
 8005ff8:	d10c      	bne.n	8006014 <_svfiprintf_r+0x130>
 8005ffa:	7863      	ldrb	r3, [r4, #1]
 8005ffc:	2b2a      	cmp	r3, #42	; 0x2a
 8005ffe:	d134      	bne.n	800606a <_svfiprintf_r+0x186>
 8006000:	9b03      	ldr	r3, [sp, #12]
 8006002:	1d1a      	adds	r2, r3, #4
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	9203      	str	r2, [sp, #12]
 8006008:	2b00      	cmp	r3, #0
 800600a:	bfb8      	it	lt
 800600c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006010:	3402      	adds	r4, #2
 8006012:	9305      	str	r3, [sp, #20]
 8006014:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80060dc <_svfiprintf_r+0x1f8>
 8006018:	7821      	ldrb	r1, [r4, #0]
 800601a:	2203      	movs	r2, #3
 800601c:	4650      	mov	r0, sl
 800601e:	f7fa f8e7 	bl	80001f0 <memchr>
 8006022:	b138      	cbz	r0, 8006034 <_svfiprintf_r+0x150>
 8006024:	9b04      	ldr	r3, [sp, #16]
 8006026:	eba0 000a 	sub.w	r0, r0, sl
 800602a:	2240      	movs	r2, #64	; 0x40
 800602c:	4082      	lsls	r2, r0
 800602e:	4313      	orrs	r3, r2
 8006030:	3401      	adds	r4, #1
 8006032:	9304      	str	r3, [sp, #16]
 8006034:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006038:	4825      	ldr	r0, [pc, #148]	; (80060d0 <_svfiprintf_r+0x1ec>)
 800603a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800603e:	2206      	movs	r2, #6
 8006040:	f7fa f8d6 	bl	80001f0 <memchr>
 8006044:	2800      	cmp	r0, #0
 8006046:	d038      	beq.n	80060ba <_svfiprintf_r+0x1d6>
 8006048:	4b22      	ldr	r3, [pc, #136]	; (80060d4 <_svfiprintf_r+0x1f0>)
 800604a:	bb1b      	cbnz	r3, 8006094 <_svfiprintf_r+0x1b0>
 800604c:	9b03      	ldr	r3, [sp, #12]
 800604e:	3307      	adds	r3, #7
 8006050:	f023 0307 	bic.w	r3, r3, #7
 8006054:	3308      	adds	r3, #8
 8006056:	9303      	str	r3, [sp, #12]
 8006058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800605a:	4433      	add	r3, r6
 800605c:	9309      	str	r3, [sp, #36]	; 0x24
 800605e:	e768      	b.n	8005f32 <_svfiprintf_r+0x4e>
 8006060:	fb0c 3202 	mla	r2, ip, r2, r3
 8006064:	460c      	mov	r4, r1
 8006066:	2001      	movs	r0, #1
 8006068:	e7a6      	b.n	8005fb8 <_svfiprintf_r+0xd4>
 800606a:	2300      	movs	r3, #0
 800606c:	3401      	adds	r4, #1
 800606e:	9305      	str	r3, [sp, #20]
 8006070:	4619      	mov	r1, r3
 8006072:	f04f 0c0a 	mov.w	ip, #10
 8006076:	4620      	mov	r0, r4
 8006078:	f810 2b01 	ldrb.w	r2, [r0], #1
 800607c:	3a30      	subs	r2, #48	; 0x30
 800607e:	2a09      	cmp	r2, #9
 8006080:	d903      	bls.n	800608a <_svfiprintf_r+0x1a6>
 8006082:	2b00      	cmp	r3, #0
 8006084:	d0c6      	beq.n	8006014 <_svfiprintf_r+0x130>
 8006086:	9105      	str	r1, [sp, #20]
 8006088:	e7c4      	b.n	8006014 <_svfiprintf_r+0x130>
 800608a:	fb0c 2101 	mla	r1, ip, r1, r2
 800608e:	4604      	mov	r4, r0
 8006090:	2301      	movs	r3, #1
 8006092:	e7f0      	b.n	8006076 <_svfiprintf_r+0x192>
 8006094:	ab03      	add	r3, sp, #12
 8006096:	9300      	str	r3, [sp, #0]
 8006098:	462a      	mov	r2, r5
 800609a:	4b0f      	ldr	r3, [pc, #60]	; (80060d8 <_svfiprintf_r+0x1f4>)
 800609c:	a904      	add	r1, sp, #16
 800609e:	4638      	mov	r0, r7
 80060a0:	f3af 8000 	nop.w
 80060a4:	1c42      	adds	r2, r0, #1
 80060a6:	4606      	mov	r6, r0
 80060a8:	d1d6      	bne.n	8006058 <_svfiprintf_r+0x174>
 80060aa:	89ab      	ldrh	r3, [r5, #12]
 80060ac:	065b      	lsls	r3, r3, #25
 80060ae:	f53f af2d 	bmi.w	8005f0c <_svfiprintf_r+0x28>
 80060b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060b4:	b01d      	add	sp, #116	; 0x74
 80060b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ba:	ab03      	add	r3, sp, #12
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	462a      	mov	r2, r5
 80060c0:	4b05      	ldr	r3, [pc, #20]	; (80060d8 <_svfiprintf_r+0x1f4>)
 80060c2:	a904      	add	r1, sp, #16
 80060c4:	4638      	mov	r0, r7
 80060c6:	f000 f879 	bl	80061bc <_printf_i>
 80060ca:	e7eb      	b.n	80060a4 <_svfiprintf_r+0x1c0>
 80060cc:	08006dd3 	.word	0x08006dd3
 80060d0:	08006ddd 	.word	0x08006ddd
 80060d4:	00000000 	.word	0x00000000
 80060d8:	08005e31 	.word	0x08005e31
 80060dc:	08006dd9 	.word	0x08006dd9

080060e0 <_printf_common>:
 80060e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060e4:	4616      	mov	r6, r2
 80060e6:	4699      	mov	r9, r3
 80060e8:	688a      	ldr	r2, [r1, #8]
 80060ea:	690b      	ldr	r3, [r1, #16]
 80060ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060f0:	4293      	cmp	r3, r2
 80060f2:	bfb8      	it	lt
 80060f4:	4613      	movlt	r3, r2
 80060f6:	6033      	str	r3, [r6, #0]
 80060f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060fc:	4607      	mov	r7, r0
 80060fe:	460c      	mov	r4, r1
 8006100:	b10a      	cbz	r2, 8006106 <_printf_common+0x26>
 8006102:	3301      	adds	r3, #1
 8006104:	6033      	str	r3, [r6, #0]
 8006106:	6823      	ldr	r3, [r4, #0]
 8006108:	0699      	lsls	r1, r3, #26
 800610a:	bf42      	ittt	mi
 800610c:	6833      	ldrmi	r3, [r6, #0]
 800610e:	3302      	addmi	r3, #2
 8006110:	6033      	strmi	r3, [r6, #0]
 8006112:	6825      	ldr	r5, [r4, #0]
 8006114:	f015 0506 	ands.w	r5, r5, #6
 8006118:	d106      	bne.n	8006128 <_printf_common+0x48>
 800611a:	f104 0a19 	add.w	sl, r4, #25
 800611e:	68e3      	ldr	r3, [r4, #12]
 8006120:	6832      	ldr	r2, [r6, #0]
 8006122:	1a9b      	subs	r3, r3, r2
 8006124:	42ab      	cmp	r3, r5
 8006126:	dc26      	bgt.n	8006176 <_printf_common+0x96>
 8006128:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800612c:	1e13      	subs	r3, r2, #0
 800612e:	6822      	ldr	r2, [r4, #0]
 8006130:	bf18      	it	ne
 8006132:	2301      	movne	r3, #1
 8006134:	0692      	lsls	r2, r2, #26
 8006136:	d42b      	bmi.n	8006190 <_printf_common+0xb0>
 8006138:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800613c:	4649      	mov	r1, r9
 800613e:	4638      	mov	r0, r7
 8006140:	47c0      	blx	r8
 8006142:	3001      	adds	r0, #1
 8006144:	d01e      	beq.n	8006184 <_printf_common+0xa4>
 8006146:	6823      	ldr	r3, [r4, #0]
 8006148:	6922      	ldr	r2, [r4, #16]
 800614a:	f003 0306 	and.w	r3, r3, #6
 800614e:	2b04      	cmp	r3, #4
 8006150:	bf02      	ittt	eq
 8006152:	68e5      	ldreq	r5, [r4, #12]
 8006154:	6833      	ldreq	r3, [r6, #0]
 8006156:	1aed      	subeq	r5, r5, r3
 8006158:	68a3      	ldr	r3, [r4, #8]
 800615a:	bf0c      	ite	eq
 800615c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006160:	2500      	movne	r5, #0
 8006162:	4293      	cmp	r3, r2
 8006164:	bfc4      	itt	gt
 8006166:	1a9b      	subgt	r3, r3, r2
 8006168:	18ed      	addgt	r5, r5, r3
 800616a:	2600      	movs	r6, #0
 800616c:	341a      	adds	r4, #26
 800616e:	42b5      	cmp	r5, r6
 8006170:	d11a      	bne.n	80061a8 <_printf_common+0xc8>
 8006172:	2000      	movs	r0, #0
 8006174:	e008      	b.n	8006188 <_printf_common+0xa8>
 8006176:	2301      	movs	r3, #1
 8006178:	4652      	mov	r2, sl
 800617a:	4649      	mov	r1, r9
 800617c:	4638      	mov	r0, r7
 800617e:	47c0      	blx	r8
 8006180:	3001      	adds	r0, #1
 8006182:	d103      	bne.n	800618c <_printf_common+0xac>
 8006184:	f04f 30ff 	mov.w	r0, #4294967295
 8006188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800618c:	3501      	adds	r5, #1
 800618e:	e7c6      	b.n	800611e <_printf_common+0x3e>
 8006190:	18e1      	adds	r1, r4, r3
 8006192:	1c5a      	adds	r2, r3, #1
 8006194:	2030      	movs	r0, #48	; 0x30
 8006196:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800619a:	4422      	add	r2, r4
 800619c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061a4:	3302      	adds	r3, #2
 80061a6:	e7c7      	b.n	8006138 <_printf_common+0x58>
 80061a8:	2301      	movs	r3, #1
 80061aa:	4622      	mov	r2, r4
 80061ac:	4649      	mov	r1, r9
 80061ae:	4638      	mov	r0, r7
 80061b0:	47c0      	blx	r8
 80061b2:	3001      	adds	r0, #1
 80061b4:	d0e6      	beq.n	8006184 <_printf_common+0xa4>
 80061b6:	3601      	adds	r6, #1
 80061b8:	e7d9      	b.n	800616e <_printf_common+0x8e>
	...

080061bc <_printf_i>:
 80061bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061c0:	7e0f      	ldrb	r7, [r1, #24]
 80061c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80061c4:	2f78      	cmp	r7, #120	; 0x78
 80061c6:	4691      	mov	r9, r2
 80061c8:	4680      	mov	r8, r0
 80061ca:	460c      	mov	r4, r1
 80061cc:	469a      	mov	sl, r3
 80061ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80061d2:	d807      	bhi.n	80061e4 <_printf_i+0x28>
 80061d4:	2f62      	cmp	r7, #98	; 0x62
 80061d6:	d80a      	bhi.n	80061ee <_printf_i+0x32>
 80061d8:	2f00      	cmp	r7, #0
 80061da:	f000 80d4 	beq.w	8006386 <_printf_i+0x1ca>
 80061de:	2f58      	cmp	r7, #88	; 0x58
 80061e0:	f000 80c0 	beq.w	8006364 <_printf_i+0x1a8>
 80061e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061ec:	e03a      	b.n	8006264 <_printf_i+0xa8>
 80061ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061f2:	2b15      	cmp	r3, #21
 80061f4:	d8f6      	bhi.n	80061e4 <_printf_i+0x28>
 80061f6:	a101      	add	r1, pc, #4	; (adr r1, 80061fc <_printf_i+0x40>)
 80061f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061fc:	08006255 	.word	0x08006255
 8006200:	08006269 	.word	0x08006269
 8006204:	080061e5 	.word	0x080061e5
 8006208:	080061e5 	.word	0x080061e5
 800620c:	080061e5 	.word	0x080061e5
 8006210:	080061e5 	.word	0x080061e5
 8006214:	08006269 	.word	0x08006269
 8006218:	080061e5 	.word	0x080061e5
 800621c:	080061e5 	.word	0x080061e5
 8006220:	080061e5 	.word	0x080061e5
 8006224:	080061e5 	.word	0x080061e5
 8006228:	0800636d 	.word	0x0800636d
 800622c:	08006295 	.word	0x08006295
 8006230:	08006327 	.word	0x08006327
 8006234:	080061e5 	.word	0x080061e5
 8006238:	080061e5 	.word	0x080061e5
 800623c:	0800638f 	.word	0x0800638f
 8006240:	080061e5 	.word	0x080061e5
 8006244:	08006295 	.word	0x08006295
 8006248:	080061e5 	.word	0x080061e5
 800624c:	080061e5 	.word	0x080061e5
 8006250:	0800632f 	.word	0x0800632f
 8006254:	682b      	ldr	r3, [r5, #0]
 8006256:	1d1a      	adds	r2, r3, #4
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	602a      	str	r2, [r5, #0]
 800625c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006260:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006264:	2301      	movs	r3, #1
 8006266:	e09f      	b.n	80063a8 <_printf_i+0x1ec>
 8006268:	6820      	ldr	r0, [r4, #0]
 800626a:	682b      	ldr	r3, [r5, #0]
 800626c:	0607      	lsls	r7, r0, #24
 800626e:	f103 0104 	add.w	r1, r3, #4
 8006272:	6029      	str	r1, [r5, #0]
 8006274:	d501      	bpl.n	800627a <_printf_i+0xbe>
 8006276:	681e      	ldr	r6, [r3, #0]
 8006278:	e003      	b.n	8006282 <_printf_i+0xc6>
 800627a:	0646      	lsls	r6, r0, #25
 800627c:	d5fb      	bpl.n	8006276 <_printf_i+0xba>
 800627e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006282:	2e00      	cmp	r6, #0
 8006284:	da03      	bge.n	800628e <_printf_i+0xd2>
 8006286:	232d      	movs	r3, #45	; 0x2d
 8006288:	4276      	negs	r6, r6
 800628a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800628e:	485a      	ldr	r0, [pc, #360]	; (80063f8 <_printf_i+0x23c>)
 8006290:	230a      	movs	r3, #10
 8006292:	e012      	b.n	80062ba <_printf_i+0xfe>
 8006294:	682b      	ldr	r3, [r5, #0]
 8006296:	6820      	ldr	r0, [r4, #0]
 8006298:	1d19      	adds	r1, r3, #4
 800629a:	6029      	str	r1, [r5, #0]
 800629c:	0605      	lsls	r5, r0, #24
 800629e:	d501      	bpl.n	80062a4 <_printf_i+0xe8>
 80062a0:	681e      	ldr	r6, [r3, #0]
 80062a2:	e002      	b.n	80062aa <_printf_i+0xee>
 80062a4:	0641      	lsls	r1, r0, #25
 80062a6:	d5fb      	bpl.n	80062a0 <_printf_i+0xe4>
 80062a8:	881e      	ldrh	r6, [r3, #0]
 80062aa:	4853      	ldr	r0, [pc, #332]	; (80063f8 <_printf_i+0x23c>)
 80062ac:	2f6f      	cmp	r7, #111	; 0x6f
 80062ae:	bf0c      	ite	eq
 80062b0:	2308      	moveq	r3, #8
 80062b2:	230a      	movne	r3, #10
 80062b4:	2100      	movs	r1, #0
 80062b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062ba:	6865      	ldr	r5, [r4, #4]
 80062bc:	60a5      	str	r5, [r4, #8]
 80062be:	2d00      	cmp	r5, #0
 80062c0:	bfa2      	ittt	ge
 80062c2:	6821      	ldrge	r1, [r4, #0]
 80062c4:	f021 0104 	bicge.w	r1, r1, #4
 80062c8:	6021      	strge	r1, [r4, #0]
 80062ca:	b90e      	cbnz	r6, 80062d0 <_printf_i+0x114>
 80062cc:	2d00      	cmp	r5, #0
 80062ce:	d04b      	beq.n	8006368 <_printf_i+0x1ac>
 80062d0:	4615      	mov	r5, r2
 80062d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80062d6:	fb03 6711 	mls	r7, r3, r1, r6
 80062da:	5dc7      	ldrb	r7, [r0, r7]
 80062dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80062e0:	4637      	mov	r7, r6
 80062e2:	42bb      	cmp	r3, r7
 80062e4:	460e      	mov	r6, r1
 80062e6:	d9f4      	bls.n	80062d2 <_printf_i+0x116>
 80062e8:	2b08      	cmp	r3, #8
 80062ea:	d10b      	bne.n	8006304 <_printf_i+0x148>
 80062ec:	6823      	ldr	r3, [r4, #0]
 80062ee:	07de      	lsls	r6, r3, #31
 80062f0:	d508      	bpl.n	8006304 <_printf_i+0x148>
 80062f2:	6923      	ldr	r3, [r4, #16]
 80062f4:	6861      	ldr	r1, [r4, #4]
 80062f6:	4299      	cmp	r1, r3
 80062f8:	bfde      	ittt	le
 80062fa:	2330      	movle	r3, #48	; 0x30
 80062fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006300:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006304:	1b52      	subs	r2, r2, r5
 8006306:	6122      	str	r2, [r4, #16]
 8006308:	f8cd a000 	str.w	sl, [sp]
 800630c:	464b      	mov	r3, r9
 800630e:	aa03      	add	r2, sp, #12
 8006310:	4621      	mov	r1, r4
 8006312:	4640      	mov	r0, r8
 8006314:	f7ff fee4 	bl	80060e0 <_printf_common>
 8006318:	3001      	adds	r0, #1
 800631a:	d14a      	bne.n	80063b2 <_printf_i+0x1f6>
 800631c:	f04f 30ff 	mov.w	r0, #4294967295
 8006320:	b004      	add	sp, #16
 8006322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006326:	6823      	ldr	r3, [r4, #0]
 8006328:	f043 0320 	orr.w	r3, r3, #32
 800632c:	6023      	str	r3, [r4, #0]
 800632e:	4833      	ldr	r0, [pc, #204]	; (80063fc <_printf_i+0x240>)
 8006330:	2778      	movs	r7, #120	; 0x78
 8006332:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006336:	6823      	ldr	r3, [r4, #0]
 8006338:	6829      	ldr	r1, [r5, #0]
 800633a:	061f      	lsls	r7, r3, #24
 800633c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006340:	d402      	bmi.n	8006348 <_printf_i+0x18c>
 8006342:	065f      	lsls	r7, r3, #25
 8006344:	bf48      	it	mi
 8006346:	b2b6      	uxthmi	r6, r6
 8006348:	07df      	lsls	r7, r3, #31
 800634a:	bf48      	it	mi
 800634c:	f043 0320 	orrmi.w	r3, r3, #32
 8006350:	6029      	str	r1, [r5, #0]
 8006352:	bf48      	it	mi
 8006354:	6023      	strmi	r3, [r4, #0]
 8006356:	b91e      	cbnz	r6, 8006360 <_printf_i+0x1a4>
 8006358:	6823      	ldr	r3, [r4, #0]
 800635a:	f023 0320 	bic.w	r3, r3, #32
 800635e:	6023      	str	r3, [r4, #0]
 8006360:	2310      	movs	r3, #16
 8006362:	e7a7      	b.n	80062b4 <_printf_i+0xf8>
 8006364:	4824      	ldr	r0, [pc, #144]	; (80063f8 <_printf_i+0x23c>)
 8006366:	e7e4      	b.n	8006332 <_printf_i+0x176>
 8006368:	4615      	mov	r5, r2
 800636a:	e7bd      	b.n	80062e8 <_printf_i+0x12c>
 800636c:	682b      	ldr	r3, [r5, #0]
 800636e:	6826      	ldr	r6, [r4, #0]
 8006370:	6961      	ldr	r1, [r4, #20]
 8006372:	1d18      	adds	r0, r3, #4
 8006374:	6028      	str	r0, [r5, #0]
 8006376:	0635      	lsls	r5, r6, #24
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	d501      	bpl.n	8006380 <_printf_i+0x1c4>
 800637c:	6019      	str	r1, [r3, #0]
 800637e:	e002      	b.n	8006386 <_printf_i+0x1ca>
 8006380:	0670      	lsls	r0, r6, #25
 8006382:	d5fb      	bpl.n	800637c <_printf_i+0x1c0>
 8006384:	8019      	strh	r1, [r3, #0]
 8006386:	2300      	movs	r3, #0
 8006388:	6123      	str	r3, [r4, #16]
 800638a:	4615      	mov	r5, r2
 800638c:	e7bc      	b.n	8006308 <_printf_i+0x14c>
 800638e:	682b      	ldr	r3, [r5, #0]
 8006390:	1d1a      	adds	r2, r3, #4
 8006392:	602a      	str	r2, [r5, #0]
 8006394:	681d      	ldr	r5, [r3, #0]
 8006396:	6862      	ldr	r2, [r4, #4]
 8006398:	2100      	movs	r1, #0
 800639a:	4628      	mov	r0, r5
 800639c:	f7f9 ff28 	bl	80001f0 <memchr>
 80063a0:	b108      	cbz	r0, 80063a6 <_printf_i+0x1ea>
 80063a2:	1b40      	subs	r0, r0, r5
 80063a4:	6060      	str	r0, [r4, #4]
 80063a6:	6863      	ldr	r3, [r4, #4]
 80063a8:	6123      	str	r3, [r4, #16]
 80063aa:	2300      	movs	r3, #0
 80063ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063b0:	e7aa      	b.n	8006308 <_printf_i+0x14c>
 80063b2:	6923      	ldr	r3, [r4, #16]
 80063b4:	462a      	mov	r2, r5
 80063b6:	4649      	mov	r1, r9
 80063b8:	4640      	mov	r0, r8
 80063ba:	47d0      	blx	sl
 80063bc:	3001      	adds	r0, #1
 80063be:	d0ad      	beq.n	800631c <_printf_i+0x160>
 80063c0:	6823      	ldr	r3, [r4, #0]
 80063c2:	079b      	lsls	r3, r3, #30
 80063c4:	d413      	bmi.n	80063ee <_printf_i+0x232>
 80063c6:	68e0      	ldr	r0, [r4, #12]
 80063c8:	9b03      	ldr	r3, [sp, #12]
 80063ca:	4298      	cmp	r0, r3
 80063cc:	bfb8      	it	lt
 80063ce:	4618      	movlt	r0, r3
 80063d0:	e7a6      	b.n	8006320 <_printf_i+0x164>
 80063d2:	2301      	movs	r3, #1
 80063d4:	4632      	mov	r2, r6
 80063d6:	4649      	mov	r1, r9
 80063d8:	4640      	mov	r0, r8
 80063da:	47d0      	blx	sl
 80063dc:	3001      	adds	r0, #1
 80063de:	d09d      	beq.n	800631c <_printf_i+0x160>
 80063e0:	3501      	adds	r5, #1
 80063e2:	68e3      	ldr	r3, [r4, #12]
 80063e4:	9903      	ldr	r1, [sp, #12]
 80063e6:	1a5b      	subs	r3, r3, r1
 80063e8:	42ab      	cmp	r3, r5
 80063ea:	dcf2      	bgt.n	80063d2 <_printf_i+0x216>
 80063ec:	e7eb      	b.n	80063c6 <_printf_i+0x20a>
 80063ee:	2500      	movs	r5, #0
 80063f0:	f104 0619 	add.w	r6, r4, #25
 80063f4:	e7f5      	b.n	80063e2 <_printf_i+0x226>
 80063f6:	bf00      	nop
 80063f8:	08006de4 	.word	0x08006de4
 80063fc:	08006df5 	.word	0x08006df5

08006400 <__sflush_r>:
 8006400:	898a      	ldrh	r2, [r1, #12]
 8006402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006406:	4605      	mov	r5, r0
 8006408:	0710      	lsls	r0, r2, #28
 800640a:	460c      	mov	r4, r1
 800640c:	d458      	bmi.n	80064c0 <__sflush_r+0xc0>
 800640e:	684b      	ldr	r3, [r1, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	dc05      	bgt.n	8006420 <__sflush_r+0x20>
 8006414:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006416:	2b00      	cmp	r3, #0
 8006418:	dc02      	bgt.n	8006420 <__sflush_r+0x20>
 800641a:	2000      	movs	r0, #0
 800641c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006420:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006422:	2e00      	cmp	r6, #0
 8006424:	d0f9      	beq.n	800641a <__sflush_r+0x1a>
 8006426:	2300      	movs	r3, #0
 8006428:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800642c:	682f      	ldr	r7, [r5, #0]
 800642e:	6a21      	ldr	r1, [r4, #32]
 8006430:	602b      	str	r3, [r5, #0]
 8006432:	d032      	beq.n	800649a <__sflush_r+0x9a>
 8006434:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006436:	89a3      	ldrh	r3, [r4, #12]
 8006438:	075a      	lsls	r2, r3, #29
 800643a:	d505      	bpl.n	8006448 <__sflush_r+0x48>
 800643c:	6863      	ldr	r3, [r4, #4]
 800643e:	1ac0      	subs	r0, r0, r3
 8006440:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006442:	b10b      	cbz	r3, 8006448 <__sflush_r+0x48>
 8006444:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006446:	1ac0      	subs	r0, r0, r3
 8006448:	2300      	movs	r3, #0
 800644a:	4602      	mov	r2, r0
 800644c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800644e:	6a21      	ldr	r1, [r4, #32]
 8006450:	4628      	mov	r0, r5
 8006452:	47b0      	blx	r6
 8006454:	1c43      	adds	r3, r0, #1
 8006456:	89a3      	ldrh	r3, [r4, #12]
 8006458:	d106      	bne.n	8006468 <__sflush_r+0x68>
 800645a:	6829      	ldr	r1, [r5, #0]
 800645c:	291d      	cmp	r1, #29
 800645e:	d82b      	bhi.n	80064b8 <__sflush_r+0xb8>
 8006460:	4a29      	ldr	r2, [pc, #164]	; (8006508 <__sflush_r+0x108>)
 8006462:	410a      	asrs	r2, r1
 8006464:	07d6      	lsls	r6, r2, #31
 8006466:	d427      	bmi.n	80064b8 <__sflush_r+0xb8>
 8006468:	2200      	movs	r2, #0
 800646a:	6062      	str	r2, [r4, #4]
 800646c:	04d9      	lsls	r1, r3, #19
 800646e:	6922      	ldr	r2, [r4, #16]
 8006470:	6022      	str	r2, [r4, #0]
 8006472:	d504      	bpl.n	800647e <__sflush_r+0x7e>
 8006474:	1c42      	adds	r2, r0, #1
 8006476:	d101      	bne.n	800647c <__sflush_r+0x7c>
 8006478:	682b      	ldr	r3, [r5, #0]
 800647a:	b903      	cbnz	r3, 800647e <__sflush_r+0x7e>
 800647c:	6560      	str	r0, [r4, #84]	; 0x54
 800647e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006480:	602f      	str	r7, [r5, #0]
 8006482:	2900      	cmp	r1, #0
 8006484:	d0c9      	beq.n	800641a <__sflush_r+0x1a>
 8006486:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800648a:	4299      	cmp	r1, r3
 800648c:	d002      	beq.n	8006494 <__sflush_r+0x94>
 800648e:	4628      	mov	r0, r5
 8006490:	f7ff fbce 	bl	8005c30 <_free_r>
 8006494:	2000      	movs	r0, #0
 8006496:	6360      	str	r0, [r4, #52]	; 0x34
 8006498:	e7c0      	b.n	800641c <__sflush_r+0x1c>
 800649a:	2301      	movs	r3, #1
 800649c:	4628      	mov	r0, r5
 800649e:	47b0      	blx	r6
 80064a0:	1c41      	adds	r1, r0, #1
 80064a2:	d1c8      	bne.n	8006436 <__sflush_r+0x36>
 80064a4:	682b      	ldr	r3, [r5, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d0c5      	beq.n	8006436 <__sflush_r+0x36>
 80064aa:	2b1d      	cmp	r3, #29
 80064ac:	d001      	beq.n	80064b2 <__sflush_r+0xb2>
 80064ae:	2b16      	cmp	r3, #22
 80064b0:	d101      	bne.n	80064b6 <__sflush_r+0xb6>
 80064b2:	602f      	str	r7, [r5, #0]
 80064b4:	e7b1      	b.n	800641a <__sflush_r+0x1a>
 80064b6:	89a3      	ldrh	r3, [r4, #12]
 80064b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064bc:	81a3      	strh	r3, [r4, #12]
 80064be:	e7ad      	b.n	800641c <__sflush_r+0x1c>
 80064c0:	690f      	ldr	r7, [r1, #16]
 80064c2:	2f00      	cmp	r7, #0
 80064c4:	d0a9      	beq.n	800641a <__sflush_r+0x1a>
 80064c6:	0793      	lsls	r3, r2, #30
 80064c8:	680e      	ldr	r6, [r1, #0]
 80064ca:	bf08      	it	eq
 80064cc:	694b      	ldreq	r3, [r1, #20]
 80064ce:	600f      	str	r7, [r1, #0]
 80064d0:	bf18      	it	ne
 80064d2:	2300      	movne	r3, #0
 80064d4:	eba6 0807 	sub.w	r8, r6, r7
 80064d8:	608b      	str	r3, [r1, #8]
 80064da:	f1b8 0f00 	cmp.w	r8, #0
 80064de:	dd9c      	ble.n	800641a <__sflush_r+0x1a>
 80064e0:	6a21      	ldr	r1, [r4, #32]
 80064e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80064e4:	4643      	mov	r3, r8
 80064e6:	463a      	mov	r2, r7
 80064e8:	4628      	mov	r0, r5
 80064ea:	47b0      	blx	r6
 80064ec:	2800      	cmp	r0, #0
 80064ee:	dc06      	bgt.n	80064fe <__sflush_r+0xfe>
 80064f0:	89a3      	ldrh	r3, [r4, #12]
 80064f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064f6:	81a3      	strh	r3, [r4, #12]
 80064f8:	f04f 30ff 	mov.w	r0, #4294967295
 80064fc:	e78e      	b.n	800641c <__sflush_r+0x1c>
 80064fe:	4407      	add	r7, r0
 8006500:	eba8 0800 	sub.w	r8, r8, r0
 8006504:	e7e9      	b.n	80064da <__sflush_r+0xda>
 8006506:	bf00      	nop
 8006508:	dfbffffe 	.word	0xdfbffffe

0800650c <_fflush_r>:
 800650c:	b538      	push	{r3, r4, r5, lr}
 800650e:	690b      	ldr	r3, [r1, #16]
 8006510:	4605      	mov	r5, r0
 8006512:	460c      	mov	r4, r1
 8006514:	b913      	cbnz	r3, 800651c <_fflush_r+0x10>
 8006516:	2500      	movs	r5, #0
 8006518:	4628      	mov	r0, r5
 800651a:	bd38      	pop	{r3, r4, r5, pc}
 800651c:	b118      	cbz	r0, 8006526 <_fflush_r+0x1a>
 800651e:	6a03      	ldr	r3, [r0, #32]
 8006520:	b90b      	cbnz	r3, 8006526 <_fflush_r+0x1a>
 8006522:	f7ff fa25 	bl	8005970 <__sinit>
 8006526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d0f3      	beq.n	8006516 <_fflush_r+0xa>
 800652e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006530:	07d0      	lsls	r0, r2, #31
 8006532:	d404      	bmi.n	800653e <_fflush_r+0x32>
 8006534:	0599      	lsls	r1, r3, #22
 8006536:	d402      	bmi.n	800653e <_fflush_r+0x32>
 8006538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800653a:	f7ff fb58 	bl	8005bee <__retarget_lock_acquire_recursive>
 800653e:	4628      	mov	r0, r5
 8006540:	4621      	mov	r1, r4
 8006542:	f7ff ff5d 	bl	8006400 <__sflush_r>
 8006546:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006548:	07da      	lsls	r2, r3, #31
 800654a:	4605      	mov	r5, r0
 800654c:	d4e4      	bmi.n	8006518 <_fflush_r+0xc>
 800654e:	89a3      	ldrh	r3, [r4, #12]
 8006550:	059b      	lsls	r3, r3, #22
 8006552:	d4e1      	bmi.n	8006518 <_fflush_r+0xc>
 8006554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006556:	f7ff fb4b 	bl	8005bf0 <__retarget_lock_release_recursive>
 800655a:	e7dd      	b.n	8006518 <_fflush_r+0xc>

0800655c <fiprintf>:
 800655c:	b40e      	push	{r1, r2, r3}
 800655e:	b503      	push	{r0, r1, lr}
 8006560:	4601      	mov	r1, r0
 8006562:	ab03      	add	r3, sp, #12
 8006564:	4805      	ldr	r0, [pc, #20]	; (800657c <fiprintf+0x20>)
 8006566:	f853 2b04 	ldr.w	r2, [r3], #4
 800656a:	6800      	ldr	r0, [r0, #0]
 800656c:	9301      	str	r3, [sp, #4]
 800656e:	f000 f89f 	bl	80066b0 <_vfiprintf_r>
 8006572:	b002      	add	sp, #8
 8006574:	f85d eb04 	ldr.w	lr, [sp], #4
 8006578:	b003      	add	sp, #12
 800657a:	4770      	bx	lr
 800657c:	2000006c 	.word	0x2000006c

08006580 <memmove>:
 8006580:	4288      	cmp	r0, r1
 8006582:	b510      	push	{r4, lr}
 8006584:	eb01 0402 	add.w	r4, r1, r2
 8006588:	d902      	bls.n	8006590 <memmove+0x10>
 800658a:	4284      	cmp	r4, r0
 800658c:	4623      	mov	r3, r4
 800658e:	d807      	bhi.n	80065a0 <memmove+0x20>
 8006590:	1e43      	subs	r3, r0, #1
 8006592:	42a1      	cmp	r1, r4
 8006594:	d008      	beq.n	80065a8 <memmove+0x28>
 8006596:	f811 2b01 	ldrb.w	r2, [r1], #1
 800659a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800659e:	e7f8      	b.n	8006592 <memmove+0x12>
 80065a0:	4402      	add	r2, r0
 80065a2:	4601      	mov	r1, r0
 80065a4:	428a      	cmp	r2, r1
 80065a6:	d100      	bne.n	80065aa <memmove+0x2a>
 80065a8:	bd10      	pop	{r4, pc}
 80065aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80065b2:	e7f7      	b.n	80065a4 <memmove+0x24>

080065b4 <_sbrk_r>:
 80065b4:	b538      	push	{r3, r4, r5, lr}
 80065b6:	4d06      	ldr	r5, [pc, #24]	; (80065d0 <_sbrk_r+0x1c>)
 80065b8:	2300      	movs	r3, #0
 80065ba:	4604      	mov	r4, r0
 80065bc:	4608      	mov	r0, r1
 80065be:	602b      	str	r3, [r5, #0]
 80065c0:	f7fb fab4 	bl	8001b2c <_sbrk>
 80065c4:	1c43      	adds	r3, r0, #1
 80065c6:	d102      	bne.n	80065ce <_sbrk_r+0x1a>
 80065c8:	682b      	ldr	r3, [r5, #0]
 80065ca:	b103      	cbz	r3, 80065ce <_sbrk_r+0x1a>
 80065cc:	6023      	str	r3, [r4, #0]
 80065ce:	bd38      	pop	{r3, r4, r5, pc}
 80065d0:	200002c8 	.word	0x200002c8

080065d4 <memcpy>:
 80065d4:	440a      	add	r2, r1
 80065d6:	4291      	cmp	r1, r2
 80065d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80065dc:	d100      	bne.n	80065e0 <memcpy+0xc>
 80065de:	4770      	bx	lr
 80065e0:	b510      	push	{r4, lr}
 80065e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065ea:	4291      	cmp	r1, r2
 80065ec:	d1f9      	bne.n	80065e2 <memcpy+0xe>
 80065ee:	bd10      	pop	{r4, pc}

080065f0 <abort>:
 80065f0:	b508      	push	{r3, lr}
 80065f2:	2006      	movs	r0, #6
 80065f4:	f000 fa34 	bl	8006a60 <raise>
 80065f8:	2001      	movs	r0, #1
 80065fa:	f7fb fa1f 	bl	8001a3c <_exit>

080065fe <_realloc_r>:
 80065fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006602:	4680      	mov	r8, r0
 8006604:	4614      	mov	r4, r2
 8006606:	460e      	mov	r6, r1
 8006608:	b921      	cbnz	r1, 8006614 <_realloc_r+0x16>
 800660a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800660e:	4611      	mov	r1, r2
 8006610:	f7ff bb82 	b.w	8005d18 <_malloc_r>
 8006614:	b92a      	cbnz	r2, 8006622 <_realloc_r+0x24>
 8006616:	f7ff fb0b 	bl	8005c30 <_free_r>
 800661a:	4625      	mov	r5, r4
 800661c:	4628      	mov	r0, r5
 800661e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006622:	f000 fa39 	bl	8006a98 <_malloc_usable_size_r>
 8006626:	4284      	cmp	r4, r0
 8006628:	4607      	mov	r7, r0
 800662a:	d802      	bhi.n	8006632 <_realloc_r+0x34>
 800662c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006630:	d812      	bhi.n	8006658 <_realloc_r+0x5a>
 8006632:	4621      	mov	r1, r4
 8006634:	4640      	mov	r0, r8
 8006636:	f7ff fb6f 	bl	8005d18 <_malloc_r>
 800663a:	4605      	mov	r5, r0
 800663c:	2800      	cmp	r0, #0
 800663e:	d0ed      	beq.n	800661c <_realloc_r+0x1e>
 8006640:	42bc      	cmp	r4, r7
 8006642:	4622      	mov	r2, r4
 8006644:	4631      	mov	r1, r6
 8006646:	bf28      	it	cs
 8006648:	463a      	movcs	r2, r7
 800664a:	f7ff ffc3 	bl	80065d4 <memcpy>
 800664e:	4631      	mov	r1, r6
 8006650:	4640      	mov	r0, r8
 8006652:	f7ff faed 	bl	8005c30 <_free_r>
 8006656:	e7e1      	b.n	800661c <_realloc_r+0x1e>
 8006658:	4635      	mov	r5, r6
 800665a:	e7df      	b.n	800661c <_realloc_r+0x1e>

0800665c <__sfputc_r>:
 800665c:	6893      	ldr	r3, [r2, #8]
 800665e:	3b01      	subs	r3, #1
 8006660:	2b00      	cmp	r3, #0
 8006662:	b410      	push	{r4}
 8006664:	6093      	str	r3, [r2, #8]
 8006666:	da08      	bge.n	800667a <__sfputc_r+0x1e>
 8006668:	6994      	ldr	r4, [r2, #24]
 800666a:	42a3      	cmp	r3, r4
 800666c:	db01      	blt.n	8006672 <__sfputc_r+0x16>
 800666e:	290a      	cmp	r1, #10
 8006670:	d103      	bne.n	800667a <__sfputc_r+0x1e>
 8006672:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006676:	f000 b935 	b.w	80068e4 <__swbuf_r>
 800667a:	6813      	ldr	r3, [r2, #0]
 800667c:	1c58      	adds	r0, r3, #1
 800667e:	6010      	str	r0, [r2, #0]
 8006680:	7019      	strb	r1, [r3, #0]
 8006682:	4608      	mov	r0, r1
 8006684:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006688:	4770      	bx	lr

0800668a <__sfputs_r>:
 800668a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800668c:	4606      	mov	r6, r0
 800668e:	460f      	mov	r7, r1
 8006690:	4614      	mov	r4, r2
 8006692:	18d5      	adds	r5, r2, r3
 8006694:	42ac      	cmp	r4, r5
 8006696:	d101      	bne.n	800669c <__sfputs_r+0x12>
 8006698:	2000      	movs	r0, #0
 800669a:	e007      	b.n	80066ac <__sfputs_r+0x22>
 800669c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066a0:	463a      	mov	r2, r7
 80066a2:	4630      	mov	r0, r6
 80066a4:	f7ff ffda 	bl	800665c <__sfputc_r>
 80066a8:	1c43      	adds	r3, r0, #1
 80066aa:	d1f3      	bne.n	8006694 <__sfputs_r+0xa>
 80066ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080066b0 <_vfiprintf_r>:
 80066b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b4:	460d      	mov	r5, r1
 80066b6:	b09d      	sub	sp, #116	; 0x74
 80066b8:	4614      	mov	r4, r2
 80066ba:	4698      	mov	r8, r3
 80066bc:	4606      	mov	r6, r0
 80066be:	b118      	cbz	r0, 80066c8 <_vfiprintf_r+0x18>
 80066c0:	6a03      	ldr	r3, [r0, #32]
 80066c2:	b90b      	cbnz	r3, 80066c8 <_vfiprintf_r+0x18>
 80066c4:	f7ff f954 	bl	8005970 <__sinit>
 80066c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066ca:	07d9      	lsls	r1, r3, #31
 80066cc:	d405      	bmi.n	80066da <_vfiprintf_r+0x2a>
 80066ce:	89ab      	ldrh	r3, [r5, #12]
 80066d0:	059a      	lsls	r2, r3, #22
 80066d2:	d402      	bmi.n	80066da <_vfiprintf_r+0x2a>
 80066d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066d6:	f7ff fa8a 	bl	8005bee <__retarget_lock_acquire_recursive>
 80066da:	89ab      	ldrh	r3, [r5, #12]
 80066dc:	071b      	lsls	r3, r3, #28
 80066de:	d501      	bpl.n	80066e4 <_vfiprintf_r+0x34>
 80066e0:	692b      	ldr	r3, [r5, #16]
 80066e2:	b99b      	cbnz	r3, 800670c <_vfiprintf_r+0x5c>
 80066e4:	4629      	mov	r1, r5
 80066e6:	4630      	mov	r0, r6
 80066e8:	f000 f93a 	bl	8006960 <__swsetup_r>
 80066ec:	b170      	cbz	r0, 800670c <_vfiprintf_r+0x5c>
 80066ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066f0:	07dc      	lsls	r4, r3, #31
 80066f2:	d504      	bpl.n	80066fe <_vfiprintf_r+0x4e>
 80066f4:	f04f 30ff 	mov.w	r0, #4294967295
 80066f8:	b01d      	add	sp, #116	; 0x74
 80066fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066fe:	89ab      	ldrh	r3, [r5, #12]
 8006700:	0598      	lsls	r0, r3, #22
 8006702:	d4f7      	bmi.n	80066f4 <_vfiprintf_r+0x44>
 8006704:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006706:	f7ff fa73 	bl	8005bf0 <__retarget_lock_release_recursive>
 800670a:	e7f3      	b.n	80066f4 <_vfiprintf_r+0x44>
 800670c:	2300      	movs	r3, #0
 800670e:	9309      	str	r3, [sp, #36]	; 0x24
 8006710:	2320      	movs	r3, #32
 8006712:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006716:	f8cd 800c 	str.w	r8, [sp, #12]
 800671a:	2330      	movs	r3, #48	; 0x30
 800671c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80068d0 <_vfiprintf_r+0x220>
 8006720:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006724:	f04f 0901 	mov.w	r9, #1
 8006728:	4623      	mov	r3, r4
 800672a:	469a      	mov	sl, r3
 800672c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006730:	b10a      	cbz	r2, 8006736 <_vfiprintf_r+0x86>
 8006732:	2a25      	cmp	r2, #37	; 0x25
 8006734:	d1f9      	bne.n	800672a <_vfiprintf_r+0x7a>
 8006736:	ebba 0b04 	subs.w	fp, sl, r4
 800673a:	d00b      	beq.n	8006754 <_vfiprintf_r+0xa4>
 800673c:	465b      	mov	r3, fp
 800673e:	4622      	mov	r2, r4
 8006740:	4629      	mov	r1, r5
 8006742:	4630      	mov	r0, r6
 8006744:	f7ff ffa1 	bl	800668a <__sfputs_r>
 8006748:	3001      	adds	r0, #1
 800674a:	f000 80a9 	beq.w	80068a0 <_vfiprintf_r+0x1f0>
 800674e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006750:	445a      	add	r2, fp
 8006752:	9209      	str	r2, [sp, #36]	; 0x24
 8006754:	f89a 3000 	ldrb.w	r3, [sl]
 8006758:	2b00      	cmp	r3, #0
 800675a:	f000 80a1 	beq.w	80068a0 <_vfiprintf_r+0x1f0>
 800675e:	2300      	movs	r3, #0
 8006760:	f04f 32ff 	mov.w	r2, #4294967295
 8006764:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006768:	f10a 0a01 	add.w	sl, sl, #1
 800676c:	9304      	str	r3, [sp, #16]
 800676e:	9307      	str	r3, [sp, #28]
 8006770:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006774:	931a      	str	r3, [sp, #104]	; 0x68
 8006776:	4654      	mov	r4, sl
 8006778:	2205      	movs	r2, #5
 800677a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800677e:	4854      	ldr	r0, [pc, #336]	; (80068d0 <_vfiprintf_r+0x220>)
 8006780:	f7f9 fd36 	bl	80001f0 <memchr>
 8006784:	9a04      	ldr	r2, [sp, #16]
 8006786:	b9d8      	cbnz	r0, 80067c0 <_vfiprintf_r+0x110>
 8006788:	06d1      	lsls	r1, r2, #27
 800678a:	bf44      	itt	mi
 800678c:	2320      	movmi	r3, #32
 800678e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006792:	0713      	lsls	r3, r2, #28
 8006794:	bf44      	itt	mi
 8006796:	232b      	movmi	r3, #43	; 0x2b
 8006798:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800679c:	f89a 3000 	ldrb.w	r3, [sl]
 80067a0:	2b2a      	cmp	r3, #42	; 0x2a
 80067a2:	d015      	beq.n	80067d0 <_vfiprintf_r+0x120>
 80067a4:	9a07      	ldr	r2, [sp, #28]
 80067a6:	4654      	mov	r4, sl
 80067a8:	2000      	movs	r0, #0
 80067aa:	f04f 0c0a 	mov.w	ip, #10
 80067ae:	4621      	mov	r1, r4
 80067b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067b4:	3b30      	subs	r3, #48	; 0x30
 80067b6:	2b09      	cmp	r3, #9
 80067b8:	d94d      	bls.n	8006856 <_vfiprintf_r+0x1a6>
 80067ba:	b1b0      	cbz	r0, 80067ea <_vfiprintf_r+0x13a>
 80067bc:	9207      	str	r2, [sp, #28]
 80067be:	e014      	b.n	80067ea <_vfiprintf_r+0x13a>
 80067c0:	eba0 0308 	sub.w	r3, r0, r8
 80067c4:	fa09 f303 	lsl.w	r3, r9, r3
 80067c8:	4313      	orrs	r3, r2
 80067ca:	9304      	str	r3, [sp, #16]
 80067cc:	46a2      	mov	sl, r4
 80067ce:	e7d2      	b.n	8006776 <_vfiprintf_r+0xc6>
 80067d0:	9b03      	ldr	r3, [sp, #12]
 80067d2:	1d19      	adds	r1, r3, #4
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	9103      	str	r1, [sp, #12]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	bfbb      	ittet	lt
 80067dc:	425b      	neglt	r3, r3
 80067de:	f042 0202 	orrlt.w	r2, r2, #2
 80067e2:	9307      	strge	r3, [sp, #28]
 80067e4:	9307      	strlt	r3, [sp, #28]
 80067e6:	bfb8      	it	lt
 80067e8:	9204      	strlt	r2, [sp, #16]
 80067ea:	7823      	ldrb	r3, [r4, #0]
 80067ec:	2b2e      	cmp	r3, #46	; 0x2e
 80067ee:	d10c      	bne.n	800680a <_vfiprintf_r+0x15a>
 80067f0:	7863      	ldrb	r3, [r4, #1]
 80067f2:	2b2a      	cmp	r3, #42	; 0x2a
 80067f4:	d134      	bne.n	8006860 <_vfiprintf_r+0x1b0>
 80067f6:	9b03      	ldr	r3, [sp, #12]
 80067f8:	1d1a      	adds	r2, r3, #4
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	9203      	str	r2, [sp, #12]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	bfb8      	it	lt
 8006802:	f04f 33ff 	movlt.w	r3, #4294967295
 8006806:	3402      	adds	r4, #2
 8006808:	9305      	str	r3, [sp, #20]
 800680a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80068e0 <_vfiprintf_r+0x230>
 800680e:	7821      	ldrb	r1, [r4, #0]
 8006810:	2203      	movs	r2, #3
 8006812:	4650      	mov	r0, sl
 8006814:	f7f9 fcec 	bl	80001f0 <memchr>
 8006818:	b138      	cbz	r0, 800682a <_vfiprintf_r+0x17a>
 800681a:	9b04      	ldr	r3, [sp, #16]
 800681c:	eba0 000a 	sub.w	r0, r0, sl
 8006820:	2240      	movs	r2, #64	; 0x40
 8006822:	4082      	lsls	r2, r0
 8006824:	4313      	orrs	r3, r2
 8006826:	3401      	adds	r4, #1
 8006828:	9304      	str	r3, [sp, #16]
 800682a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800682e:	4829      	ldr	r0, [pc, #164]	; (80068d4 <_vfiprintf_r+0x224>)
 8006830:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006834:	2206      	movs	r2, #6
 8006836:	f7f9 fcdb 	bl	80001f0 <memchr>
 800683a:	2800      	cmp	r0, #0
 800683c:	d03f      	beq.n	80068be <_vfiprintf_r+0x20e>
 800683e:	4b26      	ldr	r3, [pc, #152]	; (80068d8 <_vfiprintf_r+0x228>)
 8006840:	bb1b      	cbnz	r3, 800688a <_vfiprintf_r+0x1da>
 8006842:	9b03      	ldr	r3, [sp, #12]
 8006844:	3307      	adds	r3, #7
 8006846:	f023 0307 	bic.w	r3, r3, #7
 800684a:	3308      	adds	r3, #8
 800684c:	9303      	str	r3, [sp, #12]
 800684e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006850:	443b      	add	r3, r7
 8006852:	9309      	str	r3, [sp, #36]	; 0x24
 8006854:	e768      	b.n	8006728 <_vfiprintf_r+0x78>
 8006856:	fb0c 3202 	mla	r2, ip, r2, r3
 800685a:	460c      	mov	r4, r1
 800685c:	2001      	movs	r0, #1
 800685e:	e7a6      	b.n	80067ae <_vfiprintf_r+0xfe>
 8006860:	2300      	movs	r3, #0
 8006862:	3401      	adds	r4, #1
 8006864:	9305      	str	r3, [sp, #20]
 8006866:	4619      	mov	r1, r3
 8006868:	f04f 0c0a 	mov.w	ip, #10
 800686c:	4620      	mov	r0, r4
 800686e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006872:	3a30      	subs	r2, #48	; 0x30
 8006874:	2a09      	cmp	r2, #9
 8006876:	d903      	bls.n	8006880 <_vfiprintf_r+0x1d0>
 8006878:	2b00      	cmp	r3, #0
 800687a:	d0c6      	beq.n	800680a <_vfiprintf_r+0x15a>
 800687c:	9105      	str	r1, [sp, #20]
 800687e:	e7c4      	b.n	800680a <_vfiprintf_r+0x15a>
 8006880:	fb0c 2101 	mla	r1, ip, r1, r2
 8006884:	4604      	mov	r4, r0
 8006886:	2301      	movs	r3, #1
 8006888:	e7f0      	b.n	800686c <_vfiprintf_r+0x1bc>
 800688a:	ab03      	add	r3, sp, #12
 800688c:	9300      	str	r3, [sp, #0]
 800688e:	462a      	mov	r2, r5
 8006890:	4b12      	ldr	r3, [pc, #72]	; (80068dc <_vfiprintf_r+0x22c>)
 8006892:	a904      	add	r1, sp, #16
 8006894:	4630      	mov	r0, r6
 8006896:	f3af 8000 	nop.w
 800689a:	4607      	mov	r7, r0
 800689c:	1c78      	adds	r0, r7, #1
 800689e:	d1d6      	bne.n	800684e <_vfiprintf_r+0x19e>
 80068a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068a2:	07d9      	lsls	r1, r3, #31
 80068a4:	d405      	bmi.n	80068b2 <_vfiprintf_r+0x202>
 80068a6:	89ab      	ldrh	r3, [r5, #12]
 80068a8:	059a      	lsls	r2, r3, #22
 80068aa:	d402      	bmi.n	80068b2 <_vfiprintf_r+0x202>
 80068ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068ae:	f7ff f99f 	bl	8005bf0 <__retarget_lock_release_recursive>
 80068b2:	89ab      	ldrh	r3, [r5, #12]
 80068b4:	065b      	lsls	r3, r3, #25
 80068b6:	f53f af1d 	bmi.w	80066f4 <_vfiprintf_r+0x44>
 80068ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068bc:	e71c      	b.n	80066f8 <_vfiprintf_r+0x48>
 80068be:	ab03      	add	r3, sp, #12
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	462a      	mov	r2, r5
 80068c4:	4b05      	ldr	r3, [pc, #20]	; (80068dc <_vfiprintf_r+0x22c>)
 80068c6:	a904      	add	r1, sp, #16
 80068c8:	4630      	mov	r0, r6
 80068ca:	f7ff fc77 	bl	80061bc <_printf_i>
 80068ce:	e7e4      	b.n	800689a <_vfiprintf_r+0x1ea>
 80068d0:	08006dd3 	.word	0x08006dd3
 80068d4:	08006ddd 	.word	0x08006ddd
 80068d8:	00000000 	.word	0x00000000
 80068dc:	0800668b 	.word	0x0800668b
 80068e0:	08006dd9 	.word	0x08006dd9

080068e4 <__swbuf_r>:
 80068e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068e6:	460e      	mov	r6, r1
 80068e8:	4614      	mov	r4, r2
 80068ea:	4605      	mov	r5, r0
 80068ec:	b118      	cbz	r0, 80068f6 <__swbuf_r+0x12>
 80068ee:	6a03      	ldr	r3, [r0, #32]
 80068f0:	b90b      	cbnz	r3, 80068f6 <__swbuf_r+0x12>
 80068f2:	f7ff f83d 	bl	8005970 <__sinit>
 80068f6:	69a3      	ldr	r3, [r4, #24]
 80068f8:	60a3      	str	r3, [r4, #8]
 80068fa:	89a3      	ldrh	r3, [r4, #12]
 80068fc:	071a      	lsls	r2, r3, #28
 80068fe:	d525      	bpl.n	800694c <__swbuf_r+0x68>
 8006900:	6923      	ldr	r3, [r4, #16]
 8006902:	b31b      	cbz	r3, 800694c <__swbuf_r+0x68>
 8006904:	6823      	ldr	r3, [r4, #0]
 8006906:	6922      	ldr	r2, [r4, #16]
 8006908:	1a98      	subs	r0, r3, r2
 800690a:	6963      	ldr	r3, [r4, #20]
 800690c:	b2f6      	uxtb	r6, r6
 800690e:	4283      	cmp	r3, r0
 8006910:	4637      	mov	r7, r6
 8006912:	dc04      	bgt.n	800691e <__swbuf_r+0x3a>
 8006914:	4621      	mov	r1, r4
 8006916:	4628      	mov	r0, r5
 8006918:	f7ff fdf8 	bl	800650c <_fflush_r>
 800691c:	b9e0      	cbnz	r0, 8006958 <__swbuf_r+0x74>
 800691e:	68a3      	ldr	r3, [r4, #8]
 8006920:	3b01      	subs	r3, #1
 8006922:	60a3      	str	r3, [r4, #8]
 8006924:	6823      	ldr	r3, [r4, #0]
 8006926:	1c5a      	adds	r2, r3, #1
 8006928:	6022      	str	r2, [r4, #0]
 800692a:	701e      	strb	r6, [r3, #0]
 800692c:	6962      	ldr	r2, [r4, #20]
 800692e:	1c43      	adds	r3, r0, #1
 8006930:	429a      	cmp	r2, r3
 8006932:	d004      	beq.n	800693e <__swbuf_r+0x5a>
 8006934:	89a3      	ldrh	r3, [r4, #12]
 8006936:	07db      	lsls	r3, r3, #31
 8006938:	d506      	bpl.n	8006948 <__swbuf_r+0x64>
 800693a:	2e0a      	cmp	r6, #10
 800693c:	d104      	bne.n	8006948 <__swbuf_r+0x64>
 800693e:	4621      	mov	r1, r4
 8006940:	4628      	mov	r0, r5
 8006942:	f7ff fde3 	bl	800650c <_fflush_r>
 8006946:	b938      	cbnz	r0, 8006958 <__swbuf_r+0x74>
 8006948:	4638      	mov	r0, r7
 800694a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800694c:	4621      	mov	r1, r4
 800694e:	4628      	mov	r0, r5
 8006950:	f000 f806 	bl	8006960 <__swsetup_r>
 8006954:	2800      	cmp	r0, #0
 8006956:	d0d5      	beq.n	8006904 <__swbuf_r+0x20>
 8006958:	f04f 37ff 	mov.w	r7, #4294967295
 800695c:	e7f4      	b.n	8006948 <__swbuf_r+0x64>
	...

08006960 <__swsetup_r>:
 8006960:	b538      	push	{r3, r4, r5, lr}
 8006962:	4b2a      	ldr	r3, [pc, #168]	; (8006a0c <__swsetup_r+0xac>)
 8006964:	4605      	mov	r5, r0
 8006966:	6818      	ldr	r0, [r3, #0]
 8006968:	460c      	mov	r4, r1
 800696a:	b118      	cbz	r0, 8006974 <__swsetup_r+0x14>
 800696c:	6a03      	ldr	r3, [r0, #32]
 800696e:	b90b      	cbnz	r3, 8006974 <__swsetup_r+0x14>
 8006970:	f7fe fffe 	bl	8005970 <__sinit>
 8006974:	89a3      	ldrh	r3, [r4, #12]
 8006976:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800697a:	0718      	lsls	r0, r3, #28
 800697c:	d422      	bmi.n	80069c4 <__swsetup_r+0x64>
 800697e:	06d9      	lsls	r1, r3, #27
 8006980:	d407      	bmi.n	8006992 <__swsetup_r+0x32>
 8006982:	2309      	movs	r3, #9
 8006984:	602b      	str	r3, [r5, #0]
 8006986:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800698a:	81a3      	strh	r3, [r4, #12]
 800698c:	f04f 30ff 	mov.w	r0, #4294967295
 8006990:	e034      	b.n	80069fc <__swsetup_r+0x9c>
 8006992:	0758      	lsls	r0, r3, #29
 8006994:	d512      	bpl.n	80069bc <__swsetup_r+0x5c>
 8006996:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006998:	b141      	cbz	r1, 80069ac <__swsetup_r+0x4c>
 800699a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800699e:	4299      	cmp	r1, r3
 80069a0:	d002      	beq.n	80069a8 <__swsetup_r+0x48>
 80069a2:	4628      	mov	r0, r5
 80069a4:	f7ff f944 	bl	8005c30 <_free_r>
 80069a8:	2300      	movs	r3, #0
 80069aa:	6363      	str	r3, [r4, #52]	; 0x34
 80069ac:	89a3      	ldrh	r3, [r4, #12]
 80069ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80069b2:	81a3      	strh	r3, [r4, #12]
 80069b4:	2300      	movs	r3, #0
 80069b6:	6063      	str	r3, [r4, #4]
 80069b8:	6923      	ldr	r3, [r4, #16]
 80069ba:	6023      	str	r3, [r4, #0]
 80069bc:	89a3      	ldrh	r3, [r4, #12]
 80069be:	f043 0308 	orr.w	r3, r3, #8
 80069c2:	81a3      	strh	r3, [r4, #12]
 80069c4:	6923      	ldr	r3, [r4, #16]
 80069c6:	b94b      	cbnz	r3, 80069dc <__swsetup_r+0x7c>
 80069c8:	89a3      	ldrh	r3, [r4, #12]
 80069ca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80069ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069d2:	d003      	beq.n	80069dc <__swsetup_r+0x7c>
 80069d4:	4621      	mov	r1, r4
 80069d6:	4628      	mov	r0, r5
 80069d8:	f000 f88c 	bl	8006af4 <__smakebuf_r>
 80069dc:	89a0      	ldrh	r0, [r4, #12]
 80069de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069e2:	f010 0301 	ands.w	r3, r0, #1
 80069e6:	d00a      	beq.n	80069fe <__swsetup_r+0x9e>
 80069e8:	2300      	movs	r3, #0
 80069ea:	60a3      	str	r3, [r4, #8]
 80069ec:	6963      	ldr	r3, [r4, #20]
 80069ee:	425b      	negs	r3, r3
 80069f0:	61a3      	str	r3, [r4, #24]
 80069f2:	6923      	ldr	r3, [r4, #16]
 80069f4:	b943      	cbnz	r3, 8006a08 <__swsetup_r+0xa8>
 80069f6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80069fa:	d1c4      	bne.n	8006986 <__swsetup_r+0x26>
 80069fc:	bd38      	pop	{r3, r4, r5, pc}
 80069fe:	0781      	lsls	r1, r0, #30
 8006a00:	bf58      	it	pl
 8006a02:	6963      	ldrpl	r3, [r4, #20]
 8006a04:	60a3      	str	r3, [r4, #8]
 8006a06:	e7f4      	b.n	80069f2 <__swsetup_r+0x92>
 8006a08:	2000      	movs	r0, #0
 8006a0a:	e7f7      	b.n	80069fc <__swsetup_r+0x9c>
 8006a0c:	2000006c 	.word	0x2000006c

08006a10 <_raise_r>:
 8006a10:	291f      	cmp	r1, #31
 8006a12:	b538      	push	{r3, r4, r5, lr}
 8006a14:	4604      	mov	r4, r0
 8006a16:	460d      	mov	r5, r1
 8006a18:	d904      	bls.n	8006a24 <_raise_r+0x14>
 8006a1a:	2316      	movs	r3, #22
 8006a1c:	6003      	str	r3, [r0, #0]
 8006a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a22:	bd38      	pop	{r3, r4, r5, pc}
 8006a24:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006a26:	b112      	cbz	r2, 8006a2e <_raise_r+0x1e>
 8006a28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006a2c:	b94b      	cbnz	r3, 8006a42 <_raise_r+0x32>
 8006a2e:	4620      	mov	r0, r4
 8006a30:	f000 f830 	bl	8006a94 <_getpid_r>
 8006a34:	462a      	mov	r2, r5
 8006a36:	4601      	mov	r1, r0
 8006a38:	4620      	mov	r0, r4
 8006a3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a3e:	f000 b817 	b.w	8006a70 <_kill_r>
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d00a      	beq.n	8006a5c <_raise_r+0x4c>
 8006a46:	1c59      	adds	r1, r3, #1
 8006a48:	d103      	bne.n	8006a52 <_raise_r+0x42>
 8006a4a:	2316      	movs	r3, #22
 8006a4c:	6003      	str	r3, [r0, #0]
 8006a4e:	2001      	movs	r0, #1
 8006a50:	e7e7      	b.n	8006a22 <_raise_r+0x12>
 8006a52:	2400      	movs	r4, #0
 8006a54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006a58:	4628      	mov	r0, r5
 8006a5a:	4798      	blx	r3
 8006a5c:	2000      	movs	r0, #0
 8006a5e:	e7e0      	b.n	8006a22 <_raise_r+0x12>

08006a60 <raise>:
 8006a60:	4b02      	ldr	r3, [pc, #8]	; (8006a6c <raise+0xc>)
 8006a62:	4601      	mov	r1, r0
 8006a64:	6818      	ldr	r0, [r3, #0]
 8006a66:	f7ff bfd3 	b.w	8006a10 <_raise_r>
 8006a6a:	bf00      	nop
 8006a6c:	2000006c 	.word	0x2000006c

08006a70 <_kill_r>:
 8006a70:	b538      	push	{r3, r4, r5, lr}
 8006a72:	4d07      	ldr	r5, [pc, #28]	; (8006a90 <_kill_r+0x20>)
 8006a74:	2300      	movs	r3, #0
 8006a76:	4604      	mov	r4, r0
 8006a78:	4608      	mov	r0, r1
 8006a7a:	4611      	mov	r1, r2
 8006a7c:	602b      	str	r3, [r5, #0]
 8006a7e:	f7fa ffcd 	bl	8001a1c <_kill>
 8006a82:	1c43      	adds	r3, r0, #1
 8006a84:	d102      	bne.n	8006a8c <_kill_r+0x1c>
 8006a86:	682b      	ldr	r3, [r5, #0]
 8006a88:	b103      	cbz	r3, 8006a8c <_kill_r+0x1c>
 8006a8a:	6023      	str	r3, [r4, #0]
 8006a8c:	bd38      	pop	{r3, r4, r5, pc}
 8006a8e:	bf00      	nop
 8006a90:	200002c8 	.word	0x200002c8

08006a94 <_getpid_r>:
 8006a94:	f7fa bfba 	b.w	8001a0c <_getpid>

08006a98 <_malloc_usable_size_r>:
 8006a98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a9c:	1f18      	subs	r0, r3, #4
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	bfbc      	itt	lt
 8006aa2:	580b      	ldrlt	r3, [r1, r0]
 8006aa4:	18c0      	addlt	r0, r0, r3
 8006aa6:	4770      	bx	lr

08006aa8 <__swhatbuf_r>:
 8006aa8:	b570      	push	{r4, r5, r6, lr}
 8006aaa:	460c      	mov	r4, r1
 8006aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ab0:	2900      	cmp	r1, #0
 8006ab2:	b096      	sub	sp, #88	; 0x58
 8006ab4:	4615      	mov	r5, r2
 8006ab6:	461e      	mov	r6, r3
 8006ab8:	da0d      	bge.n	8006ad6 <__swhatbuf_r+0x2e>
 8006aba:	89a3      	ldrh	r3, [r4, #12]
 8006abc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006ac0:	f04f 0100 	mov.w	r1, #0
 8006ac4:	bf0c      	ite	eq
 8006ac6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006aca:	2340      	movne	r3, #64	; 0x40
 8006acc:	2000      	movs	r0, #0
 8006ace:	6031      	str	r1, [r6, #0]
 8006ad0:	602b      	str	r3, [r5, #0]
 8006ad2:	b016      	add	sp, #88	; 0x58
 8006ad4:	bd70      	pop	{r4, r5, r6, pc}
 8006ad6:	466a      	mov	r2, sp
 8006ad8:	f000 f848 	bl	8006b6c <_fstat_r>
 8006adc:	2800      	cmp	r0, #0
 8006ade:	dbec      	blt.n	8006aba <__swhatbuf_r+0x12>
 8006ae0:	9901      	ldr	r1, [sp, #4]
 8006ae2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006ae6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006aea:	4259      	negs	r1, r3
 8006aec:	4159      	adcs	r1, r3
 8006aee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006af2:	e7eb      	b.n	8006acc <__swhatbuf_r+0x24>

08006af4 <__smakebuf_r>:
 8006af4:	898b      	ldrh	r3, [r1, #12]
 8006af6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006af8:	079d      	lsls	r5, r3, #30
 8006afa:	4606      	mov	r6, r0
 8006afc:	460c      	mov	r4, r1
 8006afe:	d507      	bpl.n	8006b10 <__smakebuf_r+0x1c>
 8006b00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b04:	6023      	str	r3, [r4, #0]
 8006b06:	6123      	str	r3, [r4, #16]
 8006b08:	2301      	movs	r3, #1
 8006b0a:	6163      	str	r3, [r4, #20]
 8006b0c:	b002      	add	sp, #8
 8006b0e:	bd70      	pop	{r4, r5, r6, pc}
 8006b10:	ab01      	add	r3, sp, #4
 8006b12:	466a      	mov	r2, sp
 8006b14:	f7ff ffc8 	bl	8006aa8 <__swhatbuf_r>
 8006b18:	9900      	ldr	r1, [sp, #0]
 8006b1a:	4605      	mov	r5, r0
 8006b1c:	4630      	mov	r0, r6
 8006b1e:	f7ff f8fb 	bl	8005d18 <_malloc_r>
 8006b22:	b948      	cbnz	r0, 8006b38 <__smakebuf_r+0x44>
 8006b24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b28:	059a      	lsls	r2, r3, #22
 8006b2a:	d4ef      	bmi.n	8006b0c <__smakebuf_r+0x18>
 8006b2c:	f023 0303 	bic.w	r3, r3, #3
 8006b30:	f043 0302 	orr.w	r3, r3, #2
 8006b34:	81a3      	strh	r3, [r4, #12]
 8006b36:	e7e3      	b.n	8006b00 <__smakebuf_r+0xc>
 8006b38:	89a3      	ldrh	r3, [r4, #12]
 8006b3a:	6020      	str	r0, [r4, #0]
 8006b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b40:	81a3      	strh	r3, [r4, #12]
 8006b42:	9b00      	ldr	r3, [sp, #0]
 8006b44:	6163      	str	r3, [r4, #20]
 8006b46:	9b01      	ldr	r3, [sp, #4]
 8006b48:	6120      	str	r0, [r4, #16]
 8006b4a:	b15b      	cbz	r3, 8006b64 <__smakebuf_r+0x70>
 8006b4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b50:	4630      	mov	r0, r6
 8006b52:	f000 f81d 	bl	8006b90 <_isatty_r>
 8006b56:	b128      	cbz	r0, 8006b64 <__smakebuf_r+0x70>
 8006b58:	89a3      	ldrh	r3, [r4, #12]
 8006b5a:	f023 0303 	bic.w	r3, r3, #3
 8006b5e:	f043 0301 	orr.w	r3, r3, #1
 8006b62:	81a3      	strh	r3, [r4, #12]
 8006b64:	89a3      	ldrh	r3, [r4, #12]
 8006b66:	431d      	orrs	r5, r3
 8006b68:	81a5      	strh	r5, [r4, #12]
 8006b6a:	e7cf      	b.n	8006b0c <__smakebuf_r+0x18>

08006b6c <_fstat_r>:
 8006b6c:	b538      	push	{r3, r4, r5, lr}
 8006b6e:	4d07      	ldr	r5, [pc, #28]	; (8006b8c <_fstat_r+0x20>)
 8006b70:	2300      	movs	r3, #0
 8006b72:	4604      	mov	r4, r0
 8006b74:	4608      	mov	r0, r1
 8006b76:	4611      	mov	r1, r2
 8006b78:	602b      	str	r3, [r5, #0]
 8006b7a:	f7fa ffae 	bl	8001ada <_fstat>
 8006b7e:	1c43      	adds	r3, r0, #1
 8006b80:	d102      	bne.n	8006b88 <_fstat_r+0x1c>
 8006b82:	682b      	ldr	r3, [r5, #0]
 8006b84:	b103      	cbz	r3, 8006b88 <_fstat_r+0x1c>
 8006b86:	6023      	str	r3, [r4, #0]
 8006b88:	bd38      	pop	{r3, r4, r5, pc}
 8006b8a:	bf00      	nop
 8006b8c:	200002c8 	.word	0x200002c8

08006b90 <_isatty_r>:
 8006b90:	b538      	push	{r3, r4, r5, lr}
 8006b92:	4d06      	ldr	r5, [pc, #24]	; (8006bac <_isatty_r+0x1c>)
 8006b94:	2300      	movs	r3, #0
 8006b96:	4604      	mov	r4, r0
 8006b98:	4608      	mov	r0, r1
 8006b9a:	602b      	str	r3, [r5, #0]
 8006b9c:	f7fa ffad 	bl	8001afa <_isatty>
 8006ba0:	1c43      	adds	r3, r0, #1
 8006ba2:	d102      	bne.n	8006baa <_isatty_r+0x1a>
 8006ba4:	682b      	ldr	r3, [r5, #0]
 8006ba6:	b103      	cbz	r3, 8006baa <_isatty_r+0x1a>
 8006ba8:	6023      	str	r3, [r4, #0]
 8006baa:	bd38      	pop	{r3, r4, r5, pc}
 8006bac:	200002c8 	.word	0x200002c8

08006bb0 <_gettimeofday>:
 8006bb0:	4b02      	ldr	r3, [pc, #8]	; (8006bbc <_gettimeofday+0xc>)
 8006bb2:	2258      	movs	r2, #88	; 0x58
 8006bb4:	601a      	str	r2, [r3, #0]
 8006bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8006bba:	4770      	bx	lr
 8006bbc:	200002c8 	.word	0x200002c8

08006bc0 <_init>:
 8006bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc2:	bf00      	nop
 8006bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bc6:	bc08      	pop	{r3}
 8006bc8:	469e      	mov	lr, r3
 8006bca:	4770      	bx	lr

08006bcc <_fini>:
 8006bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bce:	bf00      	nop
 8006bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bd2:	bc08      	pop	{r3}
 8006bd4:	469e      	mov	lr, r3
 8006bd6:	4770      	bx	lr
