
projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005aa4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08005c34  08005c34  00015c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d58  08005d58  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08005d58  08005d58  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d58  08005d58  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d58  08005d58  00015d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d5c  08005d5c  00015d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000068  08005dc8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08005dc8  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ac51  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e13  00000000  00000000  0002ad2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b78  00000000  00000000  0002cb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000898  00000000  00000000  0002d6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028079  00000000  00000000  0002df50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000caec  00000000  00000000  00055fc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7754  00000000  00000000  00062ab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b8c  00000000  00000000  0015a20c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0015dd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c1c 	.word	0x08005c1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005c1c 	.word	0x08005c1c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2f>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b24:	bf24      	itt	cs
 8000b26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_d2f+0x30>
 8000b30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b44:	bf08      	it	eq
 8000b46:	f020 0001 	biceq.w	r0, r0, #1
 8000b4a:	4770      	bx	lr
 8000b4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b50:	d121      	bne.n	8000b96 <__aeabi_d2f+0x7a>
 8000b52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b56:	bfbc      	itt	lt
 8000b58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	4770      	bxlt	lr
 8000b5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b66:	f1c2 0218 	rsb	r2, r2, #24
 8000b6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b72:	fa20 f002 	lsr.w	r0, r0, r2
 8000b76:	bf18      	it	ne
 8000b78:	f040 0001 	orrne.w	r0, r0, #1
 8000b7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b88:	ea40 000c 	orr.w	r0, r0, ip
 8000b8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b94:	e7cc      	b.n	8000b30 <__aeabi_d2f+0x14>
 8000b96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9a:	d107      	bne.n	8000bac <__aeabi_d2f+0x90>
 8000b9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba0:	bf1e      	ittt	ne
 8000ba2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ba6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000baa:	4770      	bxne	lr
 8000bac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <Delay>:
#include "stm32l4xx_hal.h"
#include "main.h"
#include "lcd.h"

void Delay(uint32_t nCount)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  for(; nCount != 0; nCount--);
 8000bc4:	e002      	b.n	8000bcc <Delay+0x10>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	3b01      	subs	r3, #1
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d1f9      	bne.n	8000bc6 <Delay+0xa>
}
 8000bd2:	bf00      	nop
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <lcd_delay>:
void lcd_delay(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	Delay(200);
 8000be4:	20c8      	movs	r0, #200	; 0xc8
 8000be6:	f7ff ffe9 	bl	8000bbc <Delay>
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <lcd_cmd>:

void lcd_cmd(char out_char)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->BRR  = LCD_RS_Pin;
 8000bfa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c02:	629a      	str	r2, [r3, #40]	; 0x28

	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 8000c04:	4b5e      	ldr	r3, [pc, #376]	; (8000d80 <lcd_cmd+0x190>)
 8000c06:	2280      	movs	r2, #128	; 0x80
 8000c08:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 8000c0a:	4b5e      	ldr	r3, [pc, #376]	; (8000d84 <lcd_cmd+0x194>)
 8000c0c:	2220      	movs	r2, #32
 8000c0e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 8000c10:	4b5c      	ldr	r3, [pc, #368]	; (8000d84 <lcd_cmd+0x194>)
 8000c12:	2210      	movs	r2, #16
 8000c14:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 8000c16:	4b5b      	ldr	r3, [pc, #364]	; (8000d84 <lcd_cmd+0x194>)
 8000c18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c1c:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 8000c1e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c26:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 8000c28:	f7ff ffda 	bl	8000be0 <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000c2c:	4b54      	ldr	r3, [pc, #336]	; (8000d80 <lcd_cmd+0x190>)
 8000c2e:	695b      	ldr	r3, [r3, #20]
 8000c30:	4a53      	ldr	r2, [pc, #332]	; (8000d80 <lcd_cmd+0x190>)
 8000c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c36:	6153      	str	r3, [r2, #20]

	if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	f003 0310 	and.w	r3, r3, #16
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d003      	beq.n	8000c4a <lcd_cmd+0x5a>
 8000c42:	4b50      	ldr	r3, [pc, #320]	; (8000d84 <lcd_cmd+0x194>)
 8000c44:	2220      	movs	r2, #32
 8000c46:	619a      	str	r2, [r3, #24]
 8000c48:	e003      	b.n	8000c52 <lcd_cmd+0x62>
 8000c4a:	4b4e      	ldr	r3, [pc, #312]	; (8000d84 <lcd_cmd+0x194>)
 8000c4c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000c50:	619a      	str	r2, [r3, #24]
	if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	f003 0320 	and.w	r3, r3, #32
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d003      	beq.n	8000c64 <lcd_cmd+0x74>
 8000c5c:	4b49      	ldr	r3, [pc, #292]	; (8000d84 <lcd_cmd+0x194>)
 8000c5e:	2210      	movs	r2, #16
 8000c60:	619a      	str	r2, [r3, #24]
 8000c62:	e003      	b.n	8000c6c <lcd_cmd+0x7c>
 8000c64:	4b47      	ldr	r3, [pc, #284]	; (8000d84 <lcd_cmd+0x194>)
 8000c66:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000c6a:	619a      	str	r2, [r3, #24]
	if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d004      	beq.n	8000c80 <lcd_cmd+0x90>
 8000c76:	4b43      	ldr	r3, [pc, #268]	; (8000d84 <lcd_cmd+0x194>)
 8000c78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c7c:	619a      	str	r2, [r3, #24]
 8000c7e:	e003      	b.n	8000c88 <lcd_cmd+0x98>
 8000c80:	4b40      	ldr	r3, [pc, #256]	; (8000d84 <lcd_cmd+0x194>)
 8000c82:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000c86:	619a      	str	r2, [r3, #24]
	if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	da05      	bge.n	8000c9c <lcd_cmd+0xac>
 8000c90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c98:	619a      	str	r2, [r3, #24]
 8000c9a:	e004      	b.n	8000ca6 <lcd_cmd+0xb6>
 8000c9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ca0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000ca4:	619a      	str	r2, [r3, #24]

	lcd_delay();
 8000ca6:	f7ff ff9b 	bl	8000be0 <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000caa:	4b35      	ldr	r3, [pc, #212]	; (8000d80 <lcd_cmd+0x190>)
 8000cac:	2280      	movs	r2, #128	; 0x80
 8000cae:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000cb0:	4b34      	ldr	r3, [pc, #208]	; (8000d84 <lcd_cmd+0x194>)
 8000cb2:	2220      	movs	r2, #32
 8000cb4:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000cb6:	4b33      	ldr	r3, [pc, #204]	; (8000d84 <lcd_cmd+0x194>)
 8000cb8:	2210      	movs	r2, #16
 8000cba:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000cbc:	4b31      	ldr	r3, [pc, #196]	; (8000d84 <lcd_cmd+0x194>)
 8000cbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cc2:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000cc4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ccc:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 8000cce:	f7ff ff87 	bl	8000be0 <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000cd2:	4b2b      	ldr	r3, [pc, #172]	; (8000d80 <lcd_cmd+0x190>)
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	4a2a      	ldr	r2, [pc, #168]	; (8000d80 <lcd_cmd+0x190>)
 8000cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cdc:	6153      	str	r3, [r2, #20]

	if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d003      	beq.n	8000cf0 <lcd_cmd+0x100>
 8000ce8:	4b26      	ldr	r3, [pc, #152]	; (8000d84 <lcd_cmd+0x194>)
 8000cea:	2220      	movs	r2, #32
 8000cec:	619a      	str	r2, [r3, #24]
 8000cee:	e003      	b.n	8000cf8 <lcd_cmd+0x108>
 8000cf0:	4b24      	ldr	r3, [pc, #144]	; (8000d84 <lcd_cmd+0x194>)
 8000cf2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000cf6:	619a      	str	r2, [r3, #24]
	if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d003      	beq.n	8000d0a <lcd_cmd+0x11a>
 8000d02:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <lcd_cmd+0x194>)
 8000d04:	2210      	movs	r2, #16
 8000d06:	619a      	str	r2, [r3, #24]
 8000d08:	e003      	b.n	8000d12 <lcd_cmd+0x122>
 8000d0a:	4b1e      	ldr	r3, [pc, #120]	; (8000d84 <lcd_cmd+0x194>)
 8000d0c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000d10:	619a      	str	r2, [r3, #24]
	if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	f003 0304 	and.w	r3, r3, #4
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d004      	beq.n	8000d26 <lcd_cmd+0x136>
 8000d1c:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <lcd_cmd+0x194>)
 8000d1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d22:	619a      	str	r2, [r3, #24]
 8000d24:	e003      	b.n	8000d2e <lcd_cmd+0x13e>
 8000d26:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <lcd_cmd+0x194>)
 8000d28:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000d2c:	619a      	str	r2, [r3, #24]
	if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	f003 0308 	and.w	r3, r3, #8
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d005      	beq.n	8000d44 <lcd_cmd+0x154>
 8000d38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d40:	619a      	str	r2, [r3, #24]
 8000d42:	e004      	b.n	8000d4e <lcd_cmd+0x15e>
 8000d44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000d4c:	619a      	str	r2, [r3, #24]

	lcd_delay();
 8000d4e:	f7ff ff47 	bl	8000be0 <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <lcd_cmd+0x190>)
 8000d54:	2280      	movs	r2, #128	; 0x80
 8000d56:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000d58:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <lcd_cmd+0x194>)
 8000d5a:	2220      	movs	r2, #32
 8000d5c:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <lcd_cmd+0x194>)
 8000d60:	2210      	movs	r2, #16
 8000d62:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000d64:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <lcd_cmd+0x194>)
 8000d66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d6a:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000d6c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d74:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	48000800 	.word	0x48000800
 8000d84:	48000400 	.word	0x48000400

08000d88 <lcd_char_cp>:

void lcd_char_cp(char out_char)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->ODR |= LCD_RS_Pin;
 8000d92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d96:	695b      	ldr	r3, [r3, #20]
 8000d98:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000da0:	6153      	str	r3, [r2, #20]

	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 8000da2:	4b5e      	ldr	r3, [pc, #376]	; (8000f1c <lcd_char_cp+0x194>)
 8000da4:	2280      	movs	r2, #128	; 0x80
 8000da6:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 8000da8:	4b5d      	ldr	r3, [pc, #372]	; (8000f20 <lcd_char_cp+0x198>)
 8000daa:	2220      	movs	r2, #32
 8000dac:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 8000dae:	4b5c      	ldr	r3, [pc, #368]	; (8000f20 <lcd_char_cp+0x198>)
 8000db0:	2210      	movs	r2, #16
 8000db2:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 8000db4:	4b5a      	ldr	r3, [pc, #360]	; (8000f20 <lcd_char_cp+0x198>)
 8000db6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dba:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 8000dbc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000dc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dc4:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 8000dc6:	f7ff ff0b 	bl	8000be0 <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000dca:	4b54      	ldr	r3, [pc, #336]	; (8000f1c <lcd_char_cp+0x194>)
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	4a53      	ldr	r2, [pc, #332]	; (8000f1c <lcd_char_cp+0x194>)
 8000dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd4:	6153      	str	r3, [r2, #20]

	if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	f003 0310 	and.w	r3, r3, #16
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d003      	beq.n	8000de8 <lcd_char_cp+0x60>
 8000de0:	4b4f      	ldr	r3, [pc, #316]	; (8000f20 <lcd_char_cp+0x198>)
 8000de2:	2220      	movs	r2, #32
 8000de4:	619a      	str	r2, [r3, #24]
 8000de6:	e003      	b.n	8000df0 <lcd_char_cp+0x68>
 8000de8:	4b4d      	ldr	r3, [pc, #308]	; (8000f20 <lcd_char_cp+0x198>)
 8000dea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000dee:	619a      	str	r2, [r3, #24]
	if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	f003 0320 	and.w	r3, r3, #32
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d003      	beq.n	8000e02 <lcd_char_cp+0x7a>
 8000dfa:	4b49      	ldr	r3, [pc, #292]	; (8000f20 <lcd_char_cp+0x198>)
 8000dfc:	2210      	movs	r2, #16
 8000dfe:	619a      	str	r2, [r3, #24]
 8000e00:	e003      	b.n	8000e0a <lcd_char_cp+0x82>
 8000e02:	4b47      	ldr	r3, [pc, #284]	; (8000f20 <lcd_char_cp+0x198>)
 8000e04:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000e08:	619a      	str	r2, [r3, #24]
	if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d004      	beq.n	8000e1e <lcd_char_cp+0x96>
 8000e14:	4b42      	ldr	r3, [pc, #264]	; (8000f20 <lcd_char_cp+0x198>)
 8000e16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e1a:	619a      	str	r2, [r3, #24]
 8000e1c:	e003      	b.n	8000e26 <lcd_char_cp+0x9e>
 8000e1e:	4b40      	ldr	r3, [pc, #256]	; (8000f20 <lcd_char_cp+0x198>)
 8000e20:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000e24:	619a      	str	r2, [r3, #24]
	if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	da05      	bge.n	8000e3a <lcd_char_cp+0xb2>
 8000e2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e36:	619a      	str	r2, [r3, #24]
 8000e38:	e004      	b.n	8000e44 <lcd_char_cp+0xbc>
 8000e3a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e3e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000e42:	619a      	str	r2, [r3, #24]

	lcd_delay();
 8000e44:	f7ff fecc 	bl	8000be0 <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000e48:	4b34      	ldr	r3, [pc, #208]	; (8000f1c <lcd_char_cp+0x194>)
 8000e4a:	2280      	movs	r2, #128	; 0x80
 8000e4c:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000e4e:	4b34      	ldr	r3, [pc, #208]	; (8000f20 <lcd_char_cp+0x198>)
 8000e50:	2220      	movs	r2, #32
 8000e52:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000e54:	4b32      	ldr	r3, [pc, #200]	; (8000f20 <lcd_char_cp+0x198>)
 8000e56:	2210      	movs	r2, #16
 8000e58:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000e5a:	4b31      	ldr	r3, [pc, #196]	; (8000f20 <lcd_char_cp+0x198>)
 8000e5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e60:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000e62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e6a:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 8000e6c:	f7ff feb8 	bl	8000be0 <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000e70:	4b2a      	ldr	r3, [pc, #168]	; (8000f1c <lcd_char_cp+0x194>)
 8000e72:	695b      	ldr	r3, [r3, #20]
 8000e74:	4a29      	ldr	r2, [pc, #164]	; (8000f1c <lcd_char_cp+0x194>)
 8000e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e7a:	6153      	str	r3, [r2, #20]

	if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d003      	beq.n	8000e8e <lcd_char_cp+0x106>
 8000e86:	4b26      	ldr	r3, [pc, #152]	; (8000f20 <lcd_char_cp+0x198>)
 8000e88:	2220      	movs	r2, #32
 8000e8a:	619a      	str	r2, [r3, #24]
 8000e8c:	e003      	b.n	8000e96 <lcd_char_cp+0x10e>
 8000e8e:	4b24      	ldr	r3, [pc, #144]	; (8000f20 <lcd_char_cp+0x198>)
 8000e90:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000e94:	619a      	str	r2, [r3, #24]
	if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	f003 0302 	and.w	r3, r3, #2
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d003      	beq.n	8000ea8 <lcd_char_cp+0x120>
 8000ea0:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <lcd_char_cp+0x198>)
 8000ea2:	2210      	movs	r2, #16
 8000ea4:	619a      	str	r2, [r3, #24]
 8000ea6:	e003      	b.n	8000eb0 <lcd_char_cp+0x128>
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <lcd_char_cp+0x198>)
 8000eaa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000eae:	619a      	str	r2, [r3, #24]
	if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	f003 0304 	and.w	r3, r3, #4
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d004      	beq.n	8000ec4 <lcd_char_cp+0x13c>
 8000eba:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <lcd_char_cp+0x198>)
 8000ebc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ec0:	619a      	str	r2, [r3, #24]
 8000ec2:	e003      	b.n	8000ecc <lcd_char_cp+0x144>
 8000ec4:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <lcd_char_cp+0x198>)
 8000ec6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000eca:	619a      	str	r2, [r3, #24]
	if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	f003 0308 	and.w	r3, r3, #8
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d005      	beq.n	8000ee2 <lcd_char_cp+0x15a>
 8000ed6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000eda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ede:	619a      	str	r2, [r3, #24]
 8000ee0:	e004      	b.n	8000eec <lcd_char_cp+0x164>
 8000ee2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ee6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000eea:	619a      	str	r2, [r3, #24]

	lcd_delay();
 8000eec:	f7ff fe78 	bl	8000be0 <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000ef0:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <lcd_char_cp+0x194>)
 8000ef2:	2280      	movs	r2, #128	; 0x80
 8000ef4:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <lcd_char_cp+0x198>)
 8000ef8:	2220      	movs	r2, #32
 8000efa:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <lcd_char_cp+0x198>)
 8000efe:	2210      	movs	r2, #16
 8000f00:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000f02:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <lcd_char_cp+0x198>)
 8000f04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f08:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000f0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	48000800 	.word	0x48000800
 8000f20:	48000400 	.word	0x48000400

08000f24 <lcd_out_cp>:

void lcd_out_cp(char *out_char)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	while(*out_char)
 8000f2c:	e008      	b.n	8000f40 <lcd_out_cp+0x1c>
	{
		lcd_char_cp(*out_char++);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	1c5a      	adds	r2, r3, #1
 8000f32:	607a      	str	r2, [r7, #4]
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff ff26 	bl	8000d88 <lcd_char_cp>
        lcd_delay();
 8000f3c:	f7ff fe50 	bl	8000be0 <lcd_delay>
	while(*out_char)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d1f2      	bne.n	8000f2e <lcd_out_cp+0xa>
	}

}
 8000f48:	bf00      	nop
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <lcd_init>:


void lcd_init(char bits, char font, char lines)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	4603      	mov	r3, r0
 8000f5a:	71fb      	strb	r3, [r7, #7]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	71bb      	strb	r3, [r7, #6]
 8000f60:	4613      	mov	r3, r2
 8000f62:	717b      	strb	r3, [r7, #5]
    HAL_Delay(250);
 8000f64:	20fa      	movs	r0, #250	; 0xfa
 8000f66:	f000 fca1 	bl	80018ac <HAL_Delay>
		lcd_cmd(_RETURN_HOME);
 8000f6a:	2002      	movs	r0, #2
 8000f6c:	f7ff fe40 	bl	8000bf0 <lcd_cmd>
    HAL_Delay(50);
 8000f70:	2032      	movs	r0, #50	; 0x32
 8000f72:	f000 fc9b 	bl	80018ac <HAL_Delay>
    lcd_cmd(0x20 | bits | font | lines);
 8000f76:	79fa      	ldrb	r2, [r7, #7]
 8000f78:	79bb      	ldrb	r3, [r7, #6]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	797b      	ldrb	r3, [r7, #5]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	f043 0320 	orr.w	r3, r3, #32
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fe30 	bl	8000bf0 <lcd_cmd>
    HAL_Delay(50);
 8000f90:	2032      	movs	r0, #50	; 0x32
 8000f92:	f000 fc8b 	bl	80018ac <HAL_Delay>
    lcd_cmd(_LCD_INIT);
 8000f96:	2006      	movs	r0, #6
 8000f98:	f7ff fe2a 	bl	8000bf0 <lcd_cmd>
    HAL_Delay(50);
 8000f9c:	2032      	movs	r0, #50	; 0x32
 8000f9e:	f000 fc85 	bl	80018ac <HAL_Delay>
    lcd_cmd(0x0E);
 8000fa2:	200e      	movs	r0, #14
 8000fa4:	f7ff fe24 	bl	8000bf0 <lcd_cmd>
    HAL_Delay(50);
 8000fa8:	2032      	movs	r0, #50	; 0x32
 8000faa:	f000 fc7f 	bl	80018ac <HAL_Delay>
    lcd_cmd(0x0C);
 8000fae:	200c      	movs	r0, #12
 8000fb0:	f7ff fe1e 	bl	8000bf0 <lcd_cmd>
    HAL_Delay(50);
 8000fb4:	2032      	movs	r0, #50	; 0x32
 8000fb6:	f000 fc79 	bl	80018ac <HAL_Delay>
    lcd_cmd(0x01);
 8000fba:	2001      	movs	r0, #1
 8000fbc:	f7ff fe18 	bl	8000bf0 <lcd_cmd>
    HAL_Delay(100);
 8000fc0:	2064      	movs	r0, #100	; 0x64
 8000fc2:	f000 fc73 	bl	80018ac <HAL_Delay>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	460a      	mov	r2, r1
 8000fd8:	71fb      	strb	r3, [r7, #7]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	71bb      	strb	r3, [r7, #6]
	if(row == 1)
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d106      	bne.n	8000ff2 <lcd_gotoxy+0x24>
	{
		lcd_cmd(0x80 + (column - 1));
 8000fe4:	79bb      	ldrb	r3, [r7, #6]
 8000fe6:	337f      	adds	r3, #127	; 0x7f
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fe00 	bl	8000bf0 <lcd_cmd>
 8000ff0:	e008      	b.n	8001004 <lcd_gotoxy+0x36>
	}
	else if(row == 2)
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d105      	bne.n	8001004 <lcd_gotoxy+0x36>
	{
		lcd_cmd(0xC0 + (column - 1));
 8000ff8:	79bb      	ldrb	r3, [r7, #6]
 8000ffa:	3b41      	subs	r3, #65	; 0x41
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fdf6 	bl	8000bf0 <lcd_cmd>
	}
    HAL_Delay(5);
 8001004:	2005      	movs	r0, #5
 8001006:	f000 fc51 	bl	80018ac <HAL_Delay>

}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <lcd_print>:
	lcd_gotoxy(row, column);
	lcd_char_cp(out_char);
}

void lcd_print(unsigned char row, unsigned char column, char *out_char)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	4603      	mov	r3, r0
 800101a:	603a      	str	r2, [r7, #0]
 800101c:	71fb      	strb	r3, [r7, #7]
 800101e:	460b      	mov	r3, r1
 8001020:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8001022:	79ba      	ldrb	r2, [r7, #6]
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	4611      	mov	r1, r2
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ffd0 	bl	8000fce <lcd_gotoxy>
	lcd_out_cp(out_char);
 800102e:	6838      	ldr	r0, [r7, #0]
 8001030:	f7ff ff78 	bl	8000f24 <lcd_out_cp>
    HAL_Delay(5);
 8001034:	2005      	movs	r0, #5
 8001036:	f000 fc39 	bl	80018ac <HAL_Delay>
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <lcd_clear>:
void lcd_clear(void) {
 8001042:	b580      	push	{r7, lr}
 8001044:	af00      	add	r7, sp, #0

	lcd_cmd(_CLEAR);
 8001046:	2001      	movs	r0, #1
 8001048:	f7ff fdd2 	bl	8000bf0 <lcd_cmd>
    HAL_Delay(5);
 800104c:	2005      	movs	r0, #5
 800104e:	f000 fc2d 	bl	80018ac <HAL_Delay>

}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08c      	sub	sp, #48	; 0x30
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800105e:	f000 fbb0 	bl	80017c2 <HAL_Init>

  /* USER CODE BEGIN Init */

  lcd_init(_LCD_4BIT, _LCD_FONT_5x8, _LCD_2LINE);
 8001062:	2208      	movs	r2, #8
 8001064:	2100      	movs	r1, #0
 8001066:	2000      	movs	r0, #0
 8001068:	f7ff ff73 	bl	8000f52 <lcd_init>
  lcd_clear();
 800106c:	f7ff ffe9 	bl	8001042 <lcd_clear>

  srand(time(NULL));
 8001070:	2000      	movs	r0, #0
 8001072:	f003 fd4d 	bl	8004b10 <time>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	4613      	mov	r3, r2
 800107c:	4618      	mov	r0, r3
 800107e:	f003 fbeb 	bl	8004858 <srand>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001082:	f000 f8ad 	bl	80011e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001086:	f000 f967 	bl	8001358 <MX_GPIO_Init>
  MX_ADC1_Init();
 800108a:	f000 f8ef 	bl	800126c <MX_ADC1_Init>
  char analog[10];
  uint32_t analogValue;

  char buff[10];
  float napiecie;
  int zakres_dolny = -10;
 800108e:	f06f 0309 	mvn.w	r3, #9
 8001092:	62bb      	str	r3, [r7, #40]	; 0x28
  int zakres_gorny = 10;
 8001094:	230a      	movs	r3, #10
 8001096:	627b      	str	r3, [r7, #36]	; 0x24

  int liczba = 10;
 8001098:	230a      	movs	r3, #10
 800109a:	62fb      	str	r3, [r7, #44]	; 0x2c
//	  lcd_clear();
//	  lcd_print(1, 1, analog);
//	  HAL_Delay(50);

//	  int liczba = rand() % (zakres_gorny - zakres_dolny + 1) + zakres_dolny;
	  sprintf(buff, "%d", liczba);
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010a0:	494d      	ldr	r1, [pc, #308]	; (80011d8 <main+0x180>)
 80010a2:	4618      	mov	r0, r3
 80010a4:	f003 fcc8 	bl	8004a38 <siprintf>
	  lcd_clear();
 80010a8:	f7ff ffcb 	bl	8001042 <lcd_clear>
	  lcd_print(1,1,buff);
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	461a      	mov	r2, r3
 80010b0:	2101      	movs	r1, #1
 80010b2:	2001      	movs	r0, #1
 80010b4:	f7ff ffad 	bl	8001012 <lcd_print>


    /* USER CODE BEGIN 3 */

	  HAL_ADC_Start(&hadc1);
 80010b8:	4848      	ldr	r0, [pc, #288]	; (80011dc <main+0x184>)
 80010ba:	f000 ff4f 	bl	8001f5c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80010be:	f04f 31ff 	mov.w	r1, #4294967295
 80010c2:	4846      	ldr	r0, [pc, #280]	; (80011dc <main+0x184>)
 80010c4:	f001 f804 	bl	80020d0 <HAL_ADC_PollForConversion>
	  analogValue = HAL_ADC_GetValue(&hadc1);
 80010c8:	4844      	ldr	r0, [pc, #272]	; (80011dc <main+0x184>)
 80010ca:	f001 f8d9 	bl	8002280 <HAL_ADC_GetValue>
 80010ce:	6238      	str	r0, [r7, #32]
	  napiecie = analogValue*3.3/4095;
 80010d0:	6a38      	ldr	r0, [r7, #32]
 80010d2:	f7ff fa0f 	bl	80004f4 <__aeabi_ui2d>
 80010d6:	a334      	add	r3, pc, #208	; (adr r3, 80011a8 <main+0x150>)
 80010d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010dc:	f7ff fa84 	bl	80005e8 <__aeabi_dmul>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4610      	mov	r0, r2
 80010e6:	4619      	mov	r1, r3
 80010e8:	a331      	add	r3, pc, #196	; (adr r3, 80011b0 <main+0x158>)
 80010ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ee:	f7ff fba5 	bl	800083c <__aeabi_ddiv>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4610      	mov	r0, r2
 80010f8:	4619      	mov	r1, r3
 80010fa:	f7ff fd0f 	bl	8000b1c <__aeabi_d2f>
 80010fe:	4603      	mov	r3, r0
 8001100:	61fb      	str	r3, [r7, #28]

	  if(napiecie < 0.1)
 8001102:	69f8      	ldr	r0, [r7, #28]
 8001104:	f7ff fa18 	bl	8000538 <__aeabi_f2d>
 8001108:	a32b      	add	r3, pc, #172	; (adr r3, 80011b8 <main+0x160>)
 800110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110e:	f7ff fcdd 	bl	8000acc <__aeabi_dcmplt>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <main+0xc8>
	  {
		  liczba +=1 ;
 8001118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800111a:	3301      	adds	r3, #1
 800111c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800111e:	e02f      	b.n	8001180 <main+0x128>
	  }
	  else if(napiecie < 0.6)
 8001120:	69f8      	ldr	r0, [r7, #28]
 8001122:	f7ff fa09 	bl	8000538 <__aeabi_f2d>
 8001126:	a326      	add	r3, pc, #152	; (adr r3, 80011c0 <main+0x168>)
 8001128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112c:	f7ff fcce 	bl	8000acc <__aeabi_dcmplt>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <main+0xe6>
	  {
		  liczba += 10;
 8001136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001138:	330a      	adds	r3, #10
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800113c:	e020      	b.n	8001180 <main+0x128>
	  }
	  else if(napiecie < 1.3)
 800113e:	69f8      	ldr	r0, [r7, #28]
 8001140:	f7ff f9fa 	bl	8000538 <__aeabi_f2d>
 8001144:	a320      	add	r3, pc, #128	; (adr r3, 80011c8 <main+0x170>)
 8001146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114a:	f7ff fcbf 	bl	8000acc <__aeabi_dcmplt>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <main+0x104>
	  {
		  liczba -= 10;
 8001154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001156:	3b0a      	subs	r3, #10
 8001158:	62fb      	str	r3, [r7, #44]	; 0x2c
 800115a:	e011      	b.n	8001180 <main+0x128>
	  }
	  else if(napiecie < 1.8)
 800115c:	69f8      	ldr	r0, [r7, #28]
 800115e:	f7ff f9eb 	bl	8000538 <__aeabi_f2d>
 8001162:	a31b      	add	r3, pc, #108	; (adr r3, 80011d0 <main+0x178>)
 8001164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001168:	f7ff fcb0 	bl	8000acc <__aeabi_dcmplt>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <main+0x122>
	  {
		  liczba -= 1;
 8001172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001174:	3b01      	subs	r3, #1
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001178:	e002      	b.n	8001180 <main+0x128>
	  }
	  else if(napiecie < 2.4)
 800117a:	69f8      	ldr	r0, [r7, #28]
 800117c:	f7ff f9dc 	bl	8000538 <__aeabi_f2d>
	  {

	  }

	  sprintf(buff, "%d", liczba);
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001184:	4914      	ldr	r1, [pc, #80]	; (80011d8 <main+0x180>)
 8001186:	4618      	mov	r0, r3
 8001188:	f003 fc56 	bl	8004a38 <siprintf>
	  lcd_clear();
 800118c:	f7ff ff59 	bl	8001042 <lcd_clear>
	  lcd_print(1,1,buff);
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	461a      	mov	r2, r3
 8001194:	2101      	movs	r1, #1
 8001196:	2001      	movs	r0, #1
 8001198:	f7ff ff3b 	bl	8001012 <lcd_print>
	  HAL_Delay(300);
 800119c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80011a0:	f000 fb84 	bl	80018ac <HAL_Delay>
	  sprintf(buff, "%d", liczba);
 80011a4:	e77a      	b.n	800109c <main+0x44>
 80011a6:	bf00      	nop
 80011a8:	66666666 	.word	0x66666666
 80011ac:	400a6666 	.word	0x400a6666
 80011b0:	00000000 	.word	0x00000000
 80011b4:	40affe00 	.word	0x40affe00
 80011b8:	9999999a 	.word	0x9999999a
 80011bc:	3fb99999 	.word	0x3fb99999
 80011c0:	33333333 	.word	0x33333333
 80011c4:	3fe33333 	.word	0x3fe33333
 80011c8:	cccccccd 	.word	0xcccccccd
 80011cc:	3ff4cccc 	.word	0x3ff4cccc
 80011d0:	cccccccd 	.word	0xcccccccd
 80011d4:	3ffccccc 	.word	0x3ffccccc
 80011d8:	08005c34 	.word	0x08005c34
 80011dc:	20000084 	.word	0x20000084

080011e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b096      	sub	sp, #88	; 0x58
 80011e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	2244      	movs	r2, #68	; 0x44
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f003 fc85 	bl	8004afe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f4:	463b      	mov	r3, r7
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001202:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001206:	f002 f84d 	bl	80032a4 <HAL_PWREx_ControlVoltageScaling>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001210:	f000 f91a 	bl	8001448 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001214:	2310      	movs	r3, #16
 8001216:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001218:	2301      	movs	r3, #1
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001220:	2360      	movs	r3, #96	; 0x60
 8001222:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001224:	2300      	movs	r3, #0
 8001226:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4618      	mov	r0, r3
 800122e:	f002 f88f 	bl	8003350 <HAL_RCC_OscConfig>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001238:	f000 f906 	bl	8001448 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800123c:	230f      	movs	r3, #15
 800123e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001240:	2300      	movs	r3, #0
 8001242:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001244:	2300      	movs	r3, #0
 8001246:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800124c:	2300      	movs	r3, #0
 800124e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001250:	463b      	mov	r3, r7
 8001252:	2100      	movs	r1, #0
 8001254:	4618      	mov	r0, r3
 8001256:	f002 fc57 	bl	8003b08 <HAL_RCC_ClockConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001260:	f000 f8f2 	bl	8001448 <Error_Handler>
  }
}
 8001264:	bf00      	nop
 8001266:	3758      	adds	r7, #88	; 0x58
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	; 0x28
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001272:	f107 031c 	add.w	r3, r7, #28
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
 800128c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800128e:	4b2f      	ldr	r3, [pc, #188]	; (800134c <MX_ADC1_Init+0xe0>)
 8001290:	4a2f      	ldr	r2, [pc, #188]	; (8001350 <MX_ADC1_Init+0xe4>)
 8001292:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001294:	4b2d      	ldr	r3, [pc, #180]	; (800134c <MX_ADC1_Init+0xe0>)
 8001296:	2200      	movs	r2, #0
 8001298:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800129a:	4b2c      	ldr	r3, [pc, #176]	; (800134c <MX_ADC1_Init+0xe0>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012a0:	4b2a      	ldr	r3, [pc, #168]	; (800134c <MX_ADC1_Init+0xe0>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012a6:	4b29      	ldr	r3, [pc, #164]	; (800134c <MX_ADC1_Init+0xe0>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012ac:	4b27      	ldr	r3, [pc, #156]	; (800134c <MX_ADC1_Init+0xe0>)
 80012ae:	2204      	movs	r2, #4
 80012b0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012b2:	4b26      	ldr	r3, [pc, #152]	; (800134c <MX_ADC1_Init+0xe0>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012b8:	4b24      	ldr	r3, [pc, #144]	; (800134c <MX_ADC1_Init+0xe0>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80012be:	4b23      	ldr	r3, [pc, #140]	; (800134c <MX_ADC1_Init+0xe0>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012c4:	4b21      	ldr	r3, [pc, #132]	; (800134c <MX_ADC1_Init+0xe0>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012cc:	4b1f      	ldr	r3, [pc, #124]	; (800134c <MX_ADC1_Init+0xe0>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012d2:	4b1e      	ldr	r3, [pc, #120]	; (800134c <MX_ADC1_Init+0xe0>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012d8:	4b1c      	ldr	r3, [pc, #112]	; (800134c <MX_ADC1_Init+0xe0>)
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012e0:	4b1a      	ldr	r3, [pc, #104]	; (800134c <MX_ADC1_Init+0xe0>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012e6:	4b19      	ldr	r3, [pc, #100]	; (800134c <MX_ADC1_Init+0xe0>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012ee:	4817      	ldr	r0, [pc, #92]	; (800134c <MX_ADC1_Init+0xe0>)
 80012f0:	f000 fce4 	bl	8001cbc <HAL_ADC_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80012fa:	f000 f8a5 	bl	8001448 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	4619      	mov	r1, r3
 8001308:	4810      	ldr	r0, [pc, #64]	; (800134c <MX_ADC1_Init+0xe0>)
 800130a:	f001 fc65 	bl	8002bd8 <HAL_ADCEx_MultiModeConfigChannel>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001314:	f000 f898 	bl	8001448 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001318:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <MX_ADC1_Init+0xe8>)
 800131a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800131c:	2306      	movs	r3, #6
 800131e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001324:	237f      	movs	r3, #127	; 0x7f
 8001326:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001328:	2304      	movs	r3, #4
 800132a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	4619      	mov	r1, r3
 8001334:	4805      	ldr	r0, [pc, #20]	; (800134c <MX_ADC1_Init+0xe0>)
 8001336:	f000 ffb1 	bl	800229c <HAL_ADC_ConfigChannel>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001340:	f000 f882 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001344:	bf00      	nop
 8001346:	3728      	adds	r7, #40	; 0x28
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000084 	.word	0x20000084
 8001350:	50040000 	.word	0x50040000
 8001354:	14f00020 	.word	0x14f00020

08001358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b088      	sub	sp, #32
 800135c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	4b33      	ldr	r3, [pc, #204]	; (800143c <MX_GPIO_Init+0xe4>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	4a32      	ldr	r2, [pc, #200]	; (800143c <MX_GPIO_Init+0xe4>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137a:	4b30      	ldr	r3, [pc, #192]	; (800143c <MX_GPIO_Init+0xe4>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001386:	4b2d      	ldr	r3, [pc, #180]	; (800143c <MX_GPIO_Init+0xe4>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	4a2c      	ldr	r2, [pc, #176]	; (800143c <MX_GPIO_Init+0xe4>)
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001392:	4b2a      	ldr	r3, [pc, #168]	; (800143c <MX_GPIO_Init+0xe4>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800139e:	4b27      	ldr	r3, [pc, #156]	; (800143c <MX_GPIO_Init+0xe4>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a2:	4a26      	ldr	r2, [pc, #152]	; (800143c <MX_GPIO_Init+0xe4>)
 80013a4:	f043 0304 	orr.w	r3, r3, #4
 80013a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013aa:	4b24      	ldr	r3, [pc, #144]	; (800143c <MX_GPIO_Init+0xe4>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	603b      	str	r3, [r7, #0]
 80013b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin, GPIO_PIN_RESET);
 80013b6:	2200      	movs	r2, #0
 80013b8:	f44f 6186 	mov.w	r1, #1072	; 0x430
 80013bc:	4820      	ldr	r0, [pc, #128]	; (8001440 <MX_GPIO_Init+0xe8>)
 80013be:	f001 ff4b 	bl	8003258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2180      	movs	r1, #128	; 0x80
 80013c6:	481f      	ldr	r0, [pc, #124]	; (8001444 <MX_GPIO_Init+0xec>)
 80013c8:	f001 ff46 	bl	8003258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_D7_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 80013cc:	2200      	movs	r2, #0
 80013ce:	f44f 7140 	mov.w	r1, #768	; 0x300
 80013d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d6:	f001 ff3f 	bl	8003258 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin */
  GPIO_InitStruct.Pin = LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin;
 80013da:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80013de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e0:	2301      	movs	r3, #1
 80013e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ec:	f107 030c 	add.w	r3, r7, #12
 80013f0:	4619      	mov	r1, r3
 80013f2:	4813      	ldr	r0, [pc, #76]	; (8001440 <MX_GPIO_Init+0xe8>)
 80013f4:	f001 fd86 	bl	8002f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_EN_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin;
 80013f8:	2380      	movs	r3, #128	; 0x80
 80013fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fc:	2301      	movs	r3, #1
 80013fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2300      	movs	r3, #0
 8001406:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_EN_GPIO_Port, &GPIO_InitStruct);
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	4619      	mov	r1, r3
 800140e:	480d      	ldr	r0, [pc, #52]	; (8001444 <MX_GPIO_Init+0xec>)
 8001410:	f001 fd78 	bl	8002f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D7_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_RS_Pin;
 8001414:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001418:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141a:	2301      	movs	r3, #1
 800141c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001426:	f107 030c 	add.w	r3, r7, #12
 800142a:	4619      	mov	r1, r3
 800142c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001430:	f001 fd68 	bl	8002f04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001434:	bf00      	nop
 8001436:	3720      	adds	r7, #32
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40021000 	.word	0x40021000
 8001440:	48000400 	.word	0x48000400
 8001444:	48000800 	.word	0x48000800

08001448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800144c:	b672      	cpsid	i
}
 800144e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001450:	e7fe      	b.n	8001450 <Error_Handler+0x8>
	...

08001454 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145a:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <HAL_MspInit+0x44>)
 800145c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800145e:	4a0e      	ldr	r2, [pc, #56]	; (8001498 <HAL_MspInit+0x44>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6613      	str	r3, [r2, #96]	; 0x60
 8001466:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <HAL_MspInit+0x44>)
 8001468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <HAL_MspInit+0x44>)
 8001474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001476:	4a08      	ldr	r2, [pc, #32]	; (8001498 <HAL_MspInit+0x44>)
 8001478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800147c:	6593      	str	r3, [r2, #88]	; 0x58
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_MspInit+0x44>)
 8001480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	40021000 	.word	0x40021000

0800149c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b0ac      	sub	sp, #176	; 0xb0
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	2288      	movs	r2, #136	; 0x88
 80014ba:	2100      	movs	r1, #0
 80014bc:	4618      	mov	r0, r3
 80014be:	f003 fb1e 	bl	8004afe <memset>
  if(hadc->Instance==ADC1)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a27      	ldr	r2, [pc, #156]	; (8001564 <HAL_ADC_MspInit+0xc8>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d147      	bne.n	800155c <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014d0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80014d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80014d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80014da:	2301      	movs	r3, #1
 80014dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80014de:	2301      	movs	r3, #1
 80014e0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80014e2:	2308      	movs	r3, #8
 80014e4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80014e6:	2307      	movs	r3, #7
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80014ea:	2302      	movs	r3, #2
 80014ec:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80014ee:	2302      	movs	r3, #2
 80014f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80014f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014f6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4618      	mov	r0, r3
 80014fe:	f002 fcef 	bl	8003ee0 <HAL_RCCEx_PeriphCLKConfig>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001508:	f7ff ff9e 	bl	8001448 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800150c:	4b16      	ldr	r3, [pc, #88]	; (8001568 <HAL_ADC_MspInit+0xcc>)
 800150e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001510:	4a15      	ldr	r2, [pc, #84]	; (8001568 <HAL_ADC_MspInit+0xcc>)
 8001512:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001516:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001518:	4b13      	ldr	r3, [pc, #76]	; (8001568 <HAL_ADC_MspInit+0xcc>)
 800151a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001520:	613b      	str	r3, [r7, #16]
 8001522:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001524:	4b10      	ldr	r3, [pc, #64]	; (8001568 <HAL_ADC_MspInit+0xcc>)
 8001526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001528:	4a0f      	ldr	r2, [pc, #60]	; (8001568 <HAL_ADC_MspInit+0xcc>)
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001530:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <HAL_ADC_MspInit+0xcc>)
 8001532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800153c:	2301      	movs	r3, #1
 800153e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001542:	230b      	movs	r3, #11
 8001544:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001552:	4619      	mov	r1, r3
 8001554:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001558:	f001 fcd4 	bl	8002f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800155c:	bf00      	nop
 800155e:	37b0      	adds	r7, #176	; 0xb0
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	50040000 	.word	0x50040000
 8001568:	40021000 	.word	0x40021000

0800156c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <NMI_Handler+0x4>

08001572 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001576:	e7fe      	b.n	8001576 <HardFault_Handler+0x4>

08001578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800157c:	e7fe      	b.n	800157c <MemManage_Handler+0x4>

0800157e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001582:	e7fe      	b.n	8001582 <BusFault_Handler+0x4>

08001584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001588:	e7fe      	b.n	8001588 <UsageFault_Handler+0x4>

0800158a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b8:	f000 f958 	bl	800186c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}

080015c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return 1;
 80015c4:	2301      	movs	r3, #1
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <_kill>:

int _kill(int pid, int sig)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015da:	f003 fb0b 	bl	8004bf4 <__errno>
 80015de:	4603      	mov	r3, r0
 80015e0:	2216      	movs	r2, #22
 80015e2:	601a      	str	r2, [r3, #0]
  return -1;
 80015e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <_exit>:

void _exit (int status)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015f8:	f04f 31ff 	mov.w	r1, #4294967295
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff ffe7 	bl	80015d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001602:	e7fe      	b.n	8001602 <_exit+0x12>

08001604 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	e00a      	b.n	800162c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001616:	f3af 8000 	nop.w
 800161a:	4601      	mov	r1, r0
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	1c5a      	adds	r2, r3, #1
 8001620:	60ba      	str	r2, [r7, #8]
 8001622:	b2ca      	uxtb	r2, r1
 8001624:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	3301      	adds	r3, #1
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	429a      	cmp	r2, r3
 8001632:	dbf0      	blt.n	8001616 <_read+0x12>
  }

  return len;
 8001634:	687b      	ldr	r3, [r7, #4]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b086      	sub	sp, #24
 8001642:	af00      	add	r7, sp, #0
 8001644:	60f8      	str	r0, [r7, #12]
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	e009      	b.n	8001664 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	1c5a      	adds	r2, r3, #1
 8001654:	60ba      	str	r2, [r7, #8]
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	3301      	adds	r3, #1
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	697a      	ldr	r2, [r7, #20]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	429a      	cmp	r2, r3
 800166a:	dbf1      	blt.n	8001650 <_write+0x12>
  }
  return len;
 800166c:	687b      	ldr	r3, [r7, #4]
}
 800166e:	4618      	mov	r0, r3
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <_close>:

int _close(int file)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800167e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800169e:	605a      	str	r2, [r3, #4]
  return 0;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <_isatty>:

int _isatty(int file)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016b6:	2301      	movs	r3, #1
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016e8:	4a14      	ldr	r2, [pc, #80]	; (800173c <_sbrk+0x5c>)
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <_sbrk+0x60>)
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016f4:	4b13      	ldr	r3, [pc, #76]	; (8001744 <_sbrk+0x64>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d102      	bne.n	8001702 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <_sbrk+0x64>)
 80016fe:	4a12      	ldr	r2, [pc, #72]	; (8001748 <_sbrk+0x68>)
 8001700:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <_sbrk+0x64>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	429a      	cmp	r2, r3
 800170e:	d207      	bcs.n	8001720 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001710:	f003 fa70 	bl	8004bf4 <__errno>
 8001714:	4603      	mov	r3, r0
 8001716:	220c      	movs	r2, #12
 8001718:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800171a:	f04f 33ff 	mov.w	r3, #4294967295
 800171e:	e009      	b.n	8001734 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001720:	4b08      	ldr	r3, [pc, #32]	; (8001744 <_sbrk+0x64>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001726:	4b07      	ldr	r3, [pc, #28]	; (8001744 <_sbrk+0x64>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	4a05      	ldr	r2, [pc, #20]	; (8001744 <_sbrk+0x64>)
 8001730:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001732:	68fb      	ldr	r3, [r7, #12]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20018000 	.word	0x20018000
 8001740:	00000400 	.word	0x00000400
 8001744:	200000e8 	.word	0x200000e8
 8001748:	20000240 	.word	0x20000240

0800174c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <SystemInit+0x20>)
 8001752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001756:	4a05      	ldr	r2, [pc, #20]	; (800176c <SystemInit+0x20>)
 8001758:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800175c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001770:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001774:	f7ff ffea 	bl	800174c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001778:	480c      	ldr	r0, [pc, #48]	; (80017ac <LoopForever+0x6>)
  ldr r1, =_edata
 800177a:	490d      	ldr	r1, [pc, #52]	; (80017b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800177c:	4a0d      	ldr	r2, [pc, #52]	; (80017b4 <LoopForever+0xe>)
  movs r3, #0
 800177e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001780:	e002      	b.n	8001788 <LoopCopyDataInit>

08001782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001786:	3304      	adds	r3, #4

08001788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800178a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800178c:	d3f9      	bcc.n	8001782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800178e:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001790:	4c0a      	ldr	r4, [pc, #40]	; (80017bc <LoopForever+0x16>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001794:	e001      	b.n	800179a <LoopFillZerobss>

08001796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001798:	3204      	adds	r2, #4

0800179a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800179a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800179c:	d3fb      	bcc.n	8001796 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800179e:	f003 fa2f 	bl	8004c00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017a2:	f7ff fc59 	bl	8001058 <main>

080017a6 <LoopForever>:

LoopForever:
    b LoopForever
 80017a6:	e7fe      	b.n	80017a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80017ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80017b4:	08005d60 	.word	0x08005d60
  ldr r2, =_sbss
 80017b8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80017bc:	2000023c 	.word	0x2000023c

080017c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017c0:	e7fe      	b.n	80017c0 <ADC1_2_IRQHandler>

080017c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017c8:	2300      	movs	r3, #0
 80017ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017cc:	2003      	movs	r0, #3
 80017ce:	f001 fb65 	bl	8002e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017d2:	200f      	movs	r0, #15
 80017d4:	f000 f80e 	bl	80017f4 <HAL_InitTick>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d002      	beq.n	80017e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	71fb      	strb	r3, [r7, #7]
 80017e2:	e001      	b.n	80017e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017e4:	f7ff fe36 	bl	8001454 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017e8:	79fb      	ldrb	r3, [r7, #7]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017fc:	2300      	movs	r3, #0
 80017fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001800:	4b17      	ldr	r3, [pc, #92]	; (8001860 <HAL_InitTick+0x6c>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d023      	beq.n	8001850 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001808:	4b16      	ldr	r3, [pc, #88]	; (8001864 <HAL_InitTick+0x70>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4b14      	ldr	r3, [pc, #80]	; (8001860 <HAL_InitTick+0x6c>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	4619      	mov	r1, r3
 8001812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001816:	fbb3 f3f1 	udiv	r3, r3, r1
 800181a:	fbb2 f3f3 	udiv	r3, r2, r3
 800181e:	4618      	mov	r0, r3
 8001820:	f001 fb63 	bl	8002eea <HAL_SYSTICK_Config>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10f      	bne.n	800184a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b0f      	cmp	r3, #15
 800182e:	d809      	bhi.n	8001844 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001830:	2200      	movs	r2, #0
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	f04f 30ff 	mov.w	r0, #4294967295
 8001838:	f001 fb3b 	bl	8002eb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800183c:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <HAL_InitTick+0x74>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	e007      	b.n	8001854 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	73fb      	strb	r3, [r7, #15]
 8001848:	e004      	b.n	8001854 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	73fb      	strb	r3, [r7, #15]
 800184e:	e001      	b.n	8001854 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001854:	7bfb      	ldrb	r3, [r7, #15]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000008 	.word	0x20000008
 8001864:	20000000 	.word	0x20000000
 8001868:	20000004 	.word	0x20000004

0800186c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_IncTick+0x20>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	461a      	mov	r2, r3
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_IncTick+0x24>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4413      	add	r3, r2
 800187c:	4a04      	ldr	r2, [pc, #16]	; (8001890 <HAL_IncTick+0x24>)
 800187e:	6013      	str	r3, [r2, #0]
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	20000008 	.word	0x20000008
 8001890:	200000ec 	.word	0x200000ec

08001894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return uwTick;
 8001898:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <HAL_GetTick+0x14>)
 800189a:	681b      	ldr	r3, [r3, #0]
}
 800189c:	4618      	mov	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	200000ec 	.word	0x200000ec

080018ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b4:	f7ff ffee 	bl	8001894 <HAL_GetTick>
 80018b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c4:	d005      	beq.n	80018d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80018c6:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <HAL_Delay+0x44>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	461a      	mov	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4413      	add	r3, r2
 80018d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018d2:	bf00      	nop
 80018d4:	f7ff ffde 	bl	8001894 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d8f7      	bhi.n	80018d4 <HAL_Delay+0x28>
  {
  }
}
 80018e4:	bf00      	nop
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000008 	.word	0x20000008

080018f4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	431a      	orrs	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	609a      	str	r2, [r3, #8]
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
 8001922:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	431a      	orrs	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	609a      	str	r2, [r3, #8]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001950:	4618      	mov	r0, r3
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800195c:	b480      	push	{r7}
 800195e:	b087      	sub	sp, #28
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
 8001968:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	3360      	adds	r3, #96	; 0x60
 800196e:	461a      	mov	r2, r3
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <LL_ADC_SetOffset+0x44>)
 800197e:	4013      	ands	r3, r2
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	430a      	orrs	r2, r1
 800198a:	4313      	orrs	r3, r2
 800198c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001994:	bf00      	nop
 8001996:	371c      	adds	r7, #28
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	03fff000 	.word	0x03fff000

080019a4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3360      	adds	r3, #96	; 0x60
 80019b2:	461a      	mov	r2, r3
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b087      	sub	sp, #28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	3360      	adds	r3, #96	; 0x60
 80019e0:	461a      	mov	r2, r3
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	431a      	orrs	r2, r3
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80019fa:	bf00      	nop
 80019fc:	371c      	adds	r7, #28
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e000      	b.n	8001a20 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b087      	sub	sp, #28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	3330      	adds	r3, #48	; 0x30
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	0a1b      	lsrs	r3, r3, #8
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	f003 030c 	and.w	r3, r3, #12
 8001a48:	4413      	add	r3, r2
 8001a4a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	f003 031f 	and.w	r3, r3, #31
 8001a56:	211f      	movs	r1, #31
 8001a58:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	401a      	ands	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	0e9b      	lsrs	r3, r3, #26
 8001a64:	f003 011f 	and.w	r1, r3, #31
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	f003 031f 	and.w	r3, r3, #31
 8001a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a72:	431a      	orrs	r2, r3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a78:	bf00      	nop
 8001a7a:	371c      	adds	r7, #28
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b087      	sub	sp, #28
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	3314      	adds	r3, #20
 8001a94:	461a      	mov	r2, r3
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	0e5b      	lsrs	r3, r3, #25
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	4413      	add	r3, r2
 8001aa2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	0d1b      	lsrs	r3, r3, #20
 8001aac:	f003 031f 	and.w	r3, r3, #31
 8001ab0:	2107      	movs	r1, #7
 8001ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	401a      	ands	r2, r3
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	0d1b      	lsrs	r3, r3, #20
 8001abe:	f003 031f 	and.w	r3, r3, #31
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ace:	bf00      	nop
 8001ad0:	371c      	adds	r7, #28
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
	...

08001adc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001af4:	43db      	mvns	r3, r3
 8001af6:	401a      	ands	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f003 0318 	and.w	r3, r3, #24
 8001afe:	4908      	ldr	r1, [pc, #32]	; (8001b20 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b00:	40d9      	lsrs	r1, r3
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	400b      	ands	r3, r1
 8001b06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b12:	bf00      	nop
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	0007ffff 	.word	0x0007ffff

08001b24 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 031f 	and.w	r3, r3, #31
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001b6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6093      	str	r3, [r2, #8]
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b94:	d101      	bne.n	8001b9a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b96:	2301      	movs	r3, #1
 8001b98:	e000      	b.n	8001b9c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001bb8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bbc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001be4:	d101      	bne.n	8001bea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c0c:	f043 0201 	orr.w	r2, r3, #1
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d101      	bne.n	8001c38 <LL_ADC_IsEnabled+0x18>
 8001c34:	2301      	movs	r3, #1
 8001c36:	e000      	b.n	8001c3a <LL_ADC_IsEnabled+0x1a>
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c56:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c5a:	f043 0204 	orr.w	r2, r3, #4
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d101      	bne.n	8001c86 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 0308 	and.w	r3, r3, #8
 8001ca4:	2b08      	cmp	r3, #8
 8001ca6:	d101      	bne.n	8001cac <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e000      	b.n	8001cae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
	...

08001cbc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cbc:	b590      	push	{r4, r7, lr}
 8001cbe:	b089      	sub	sp, #36	; 0x24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e130      	b.n	8001f38 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d109      	bne.n	8001cf8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff fbd9 	bl	800149c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff ff3f 	bl	8001b80 <LL_ADC_IsDeepPowerDownEnabled>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d004      	beq.n	8001d12 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff25 	bl	8001b5c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff ff5a 	bl	8001bd0 <LL_ADC_IsInternalRegulatorEnabled>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d115      	bne.n	8001d4e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff ff3e 	bl	8001ba8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d2c:	4b84      	ldr	r3, [pc, #528]	; (8001f40 <HAL_ADC_Init+0x284>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	099b      	lsrs	r3, r3, #6
 8001d32:	4a84      	ldr	r2, [pc, #528]	; (8001f44 <HAL_ADC_Init+0x288>)
 8001d34:	fba2 2303 	umull	r2, r3, r2, r3
 8001d38:	099b      	lsrs	r3, r3, #6
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d40:	e002      	b.n	8001d48 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	3b01      	subs	r3, #1
 8001d46:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f9      	bne.n	8001d42 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff ff3c 	bl	8001bd0 <LL_ADC_IsInternalRegulatorEnabled>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10d      	bne.n	8001d7a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d62:	f043 0210 	orr.w	r2, r3, #16
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6e:	f043 0201 	orr.w	r2, r3, #1
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff ff75 	bl	8001c6e <LL_ADC_REG_IsConversionOngoing>
 8001d84:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8a:	f003 0310 	and.w	r3, r3, #16
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f040 80c9 	bne.w	8001f26 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f040 80c5 	bne.w	8001f26 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001da4:	f043 0202 	orr.w	r2, r3, #2
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff ff35 	bl	8001c20 <LL_ADC_IsEnabled>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d115      	bne.n	8001de8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001dbc:	4862      	ldr	r0, [pc, #392]	; (8001f48 <HAL_ADC_Init+0x28c>)
 8001dbe:	f7ff ff2f 	bl	8001c20 <LL_ADC_IsEnabled>
 8001dc2:	4604      	mov	r4, r0
 8001dc4:	4861      	ldr	r0, [pc, #388]	; (8001f4c <HAL_ADC_Init+0x290>)
 8001dc6:	f7ff ff2b 	bl	8001c20 <LL_ADC_IsEnabled>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	431c      	orrs	r4, r3
 8001dce:	4860      	ldr	r0, [pc, #384]	; (8001f50 <HAL_ADC_Init+0x294>)
 8001dd0:	f7ff ff26 	bl	8001c20 <LL_ADC_IsEnabled>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	4323      	orrs	r3, r4
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d105      	bne.n	8001de8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	4619      	mov	r1, r3
 8001de2:	485c      	ldr	r0, [pc, #368]	; (8001f54 <HAL_ADC_Init+0x298>)
 8001de4:	f7ff fd86 	bl	80018f4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	7e5b      	ldrb	r3, [r3, #25]
 8001dec:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001df2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001df8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001dfe:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e06:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d106      	bne.n	8001e24 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	045b      	lsls	r3, r3, #17
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d009      	beq.n	8001e40 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e30:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e38:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68da      	ldr	r2, [r3, #12]
 8001e46:	4b44      	ldr	r3, [pc, #272]	; (8001f58 <HAL_ADC_Init+0x29c>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6812      	ldr	r2, [r2, #0]
 8001e4e:	69b9      	ldr	r1, [r7, #24]
 8001e50:	430b      	orrs	r3, r1
 8001e52:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ff1b 	bl	8001c94 <LL_ADC_INJ_IsConversionOngoing>
 8001e5e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d13d      	bne.n	8001ee2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d13a      	bne.n	8001ee2 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e70:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e78:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e88:	f023 0302 	bic.w	r3, r3, #2
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6812      	ldr	r2, [r2, #0]
 8001e90:	69b9      	ldr	r1, [r7, #24]
 8001e92:	430b      	orrs	r3, r1
 8001e94:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d118      	bne.n	8001ed2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001eaa:	f023 0304 	bic.w	r3, r3, #4
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001eb6:	4311      	orrs	r1, r2
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ebc:	4311      	orrs	r1, r2
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 0201 	orr.w	r2, r2, #1
 8001ece:	611a      	str	r2, [r3, #16]
 8001ed0:	e007      	b.n	8001ee2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	691a      	ldr	r2, [r3, #16]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 0201 	bic.w	r2, r2, #1
 8001ee0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d10c      	bne.n	8001f04 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef0:	f023 010f 	bic.w	r1, r3, #15
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	1e5a      	subs	r2, r3, #1
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	631a      	str	r2, [r3, #48]	; 0x30
 8001f02:	e007      	b.n	8001f14 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 020f 	bic.w	r2, r2, #15
 8001f12:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f18:	f023 0303 	bic.w	r3, r3, #3
 8001f1c:	f043 0201 	orr.w	r2, r3, #1
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	655a      	str	r2, [r3, #84]	; 0x54
 8001f24:	e007      	b.n	8001f36 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2a:	f043 0210 	orr.w	r2, r3, #16
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f36:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3724      	adds	r7, #36	; 0x24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd90      	pop	{r4, r7, pc}
 8001f40:	20000000 	.word	0x20000000
 8001f44:	053e2d63 	.word	0x053e2d63
 8001f48:	50040000 	.word	0x50040000
 8001f4c:	50040100 	.word	0x50040100
 8001f50:	50040200 	.word	0x50040200
 8001f54:	50040300 	.word	0x50040300
 8001f58:	fff0c007 	.word	0xfff0c007

08001f5c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f64:	4857      	ldr	r0, [pc, #348]	; (80020c4 <HAL_ADC_Start+0x168>)
 8001f66:	f7ff fddd 	bl	8001b24 <LL_ADC_GetMultimode>
 8001f6a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff fe7c 	bl	8001c6e <LL_ADC_REG_IsConversionOngoing>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f040 809c 	bne.w	80020b6 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d101      	bne.n	8001f8c <HAL_ADC_Start+0x30>
 8001f88:	2302      	movs	r3, #2
 8001f8a:	e097      	b.n	80020bc <HAL_ADC_Start+0x160>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 fd73 	bl	8002a80 <ADC_Enable>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001f9e:	7dfb      	ldrb	r3, [r7, #23]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f040 8083 	bne.w	80020ac <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001faa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001fae:	f023 0301 	bic.w	r3, r3, #1
 8001fb2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a42      	ldr	r2, [pc, #264]	; (80020c8 <HAL_ADC_Start+0x16c>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d002      	beq.n	8001fca <HAL_ADC_Start+0x6e>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	e000      	b.n	8001fcc <HAL_ADC_Start+0x70>
 8001fca:	4b40      	ldr	r3, [pc, #256]	; (80020cc <HAL_ADC_Start+0x170>)
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d002      	beq.n	8001fda <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d105      	bne.n	8001fe6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fde:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ff2:	d106      	bne.n	8002002 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff8:	f023 0206 	bic.w	r2, r3, #6
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	659a      	str	r2, [r3, #88]	; 0x58
 8002000:	e002      	b.n	8002008 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	221c      	movs	r2, #28
 800200e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a2a      	ldr	r2, [pc, #168]	; (80020c8 <HAL_ADC_Start+0x16c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d002      	beq.n	8002028 <HAL_ADC_Start+0xcc>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	e000      	b.n	800202a <HAL_ADC_Start+0xce>
 8002028:	4b28      	ldr	r3, [pc, #160]	; (80020cc <HAL_ADC_Start+0x170>)
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6812      	ldr	r2, [r2, #0]
 800202e:	4293      	cmp	r3, r2
 8002030:	d008      	beq.n	8002044 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d005      	beq.n	8002044 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	2b05      	cmp	r3, #5
 800203c:	d002      	beq.n	8002044 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	2b09      	cmp	r3, #9
 8002042:	d114      	bne.n	800206e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d007      	beq.n	8002062 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002056:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800205a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fded 	bl	8001c46 <LL_ADC_REG_StartConversion>
 800206c:	e025      	b.n	80020ba <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002072:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a12      	ldr	r2, [pc, #72]	; (80020c8 <HAL_ADC_Start+0x16c>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d002      	beq.n	800208a <HAL_ADC_Start+0x12e>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	e000      	b.n	800208c <HAL_ADC_Start+0x130>
 800208a:	4b10      	ldr	r3, [pc, #64]	; (80020cc <HAL_ADC_Start+0x170>)
 800208c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00f      	beq.n	80020ba <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	655a      	str	r2, [r3, #84]	; 0x54
 80020aa:	e006      	b.n	80020ba <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80020b4:	e001      	b.n	80020ba <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80020b6:	2302      	movs	r3, #2
 80020b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80020ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	50040300 	.word	0x50040300
 80020c8:	50040100 	.word	0x50040100
 80020cc:	50040000 	.word	0x50040000

080020d0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b088      	sub	sp, #32
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020da:	4866      	ldr	r0, [pc, #408]	; (8002274 <HAL_ADC_PollForConversion+0x1a4>)
 80020dc:	f7ff fd22 	bl	8001b24 <LL_ADC_GetMultimode>
 80020e0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d102      	bne.n	80020f0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80020ea:	2308      	movs	r3, #8
 80020ec:	61fb      	str	r3, [r7, #28]
 80020ee:	e02a      	b.n	8002146 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d005      	beq.n	8002102 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	2b05      	cmp	r3, #5
 80020fa:	d002      	beq.n	8002102 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	2b09      	cmp	r3, #9
 8002100:	d111      	bne.n	8002126 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b00      	cmp	r3, #0
 800210e:	d007      	beq.n	8002120 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002114:	f043 0220 	orr.w	r2, r3, #32
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0a4      	b.n	800226a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002120:	2304      	movs	r3, #4
 8002122:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002124:	e00f      	b.n	8002146 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002126:	4853      	ldr	r0, [pc, #332]	; (8002274 <HAL_ADC_PollForConversion+0x1a4>)
 8002128:	f7ff fd0a 	bl	8001b40 <LL_ADC_GetMultiDMATransfer>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d007      	beq.n	8002142 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002136:	f043 0220 	orr.w	r2, r3, #32
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e093      	b.n	800226a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002142:	2304      	movs	r3, #4
 8002144:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002146:	f7ff fba5 	bl	8001894 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800214c:	e021      	b.n	8002192 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002154:	d01d      	beq.n	8002192 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002156:	f7ff fb9d 	bl	8001894 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d302      	bcc.n	800216c <HAL_ADC_PollForConversion+0x9c>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d112      	bne.n	8002192 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	4013      	ands	r3, r2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10b      	bne.n	8002192 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217e:	f043 0204 	orr.w	r2, r3, #4
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e06b      	b.n	800226a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	4013      	ands	r3, r2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0d6      	beq.n	800214e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fc28 	bl	8001a06 <LL_ADC_REG_IsTriggerSourceSWStart>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d01c      	beq.n	80021f6 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	7e5b      	ldrb	r3, [r3, #25]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d118      	bne.n	80021f6 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b08      	cmp	r3, #8
 80021d0:	d111      	bne.n	80021f6 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d105      	bne.n	80021f6 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ee:	f043 0201 	orr.w	r2, r3, #1
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a1f      	ldr	r2, [pc, #124]	; (8002278 <HAL_ADC_PollForConversion+0x1a8>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d002      	beq.n	8002206 <HAL_ADC_PollForConversion+0x136>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	e000      	b.n	8002208 <HAL_ADC_PollForConversion+0x138>
 8002206:	4b1d      	ldr	r3, [pc, #116]	; (800227c <HAL_ADC_PollForConversion+0x1ac>)
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6812      	ldr	r2, [r2, #0]
 800220c:	4293      	cmp	r3, r2
 800220e:	d008      	beq.n	8002222 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d005      	beq.n	8002222 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	2b05      	cmp	r3, #5
 800221a:	d002      	beq.n	8002222 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	2b09      	cmp	r3, #9
 8002220:	d104      	bne.n	800222c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	61bb      	str	r3, [r7, #24]
 800222a:	e00c      	b.n	8002246 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a11      	ldr	r2, [pc, #68]	; (8002278 <HAL_ADC_PollForConversion+0x1a8>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d002      	beq.n	800223c <HAL_ADC_PollForConversion+0x16c>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	e000      	b.n	800223e <HAL_ADC_PollForConversion+0x16e>
 800223c:	4b0f      	ldr	r3, [pc, #60]	; (800227c <HAL_ADC_PollForConversion+0x1ac>)
 800223e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	2b08      	cmp	r3, #8
 800224a:	d104      	bne.n	8002256 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2208      	movs	r2, #8
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	e008      	b.n	8002268 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d103      	bne.n	8002268 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	220c      	movs	r2, #12
 8002266:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3720      	adds	r7, #32
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	50040300 	.word	0x50040300
 8002278:	50040100 	.word	0x50040100
 800227c:	50040000 	.word	0x50040000

08002280 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800228e:	4618      	mov	r0, r3
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
	...

0800229c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b0b6      	sub	sp, #216	; 0xd8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022a6:	2300      	movs	r3, #0
 80022a8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d101      	bne.n	80022be <HAL_ADC_ConfigChannel+0x22>
 80022ba:	2302      	movs	r3, #2
 80022bc:	e3c9      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x7b6>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff fccf 	bl	8001c6e <LL_ADC_REG_IsConversionOngoing>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f040 83aa 	bne.w	8002a2c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b05      	cmp	r3, #5
 80022e6:	d824      	bhi.n	8002332 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	3b02      	subs	r3, #2
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	d81b      	bhi.n	800232a <HAL_ADC_ConfigChannel+0x8e>
 80022f2:	a201      	add	r2, pc, #4	; (adr r2, 80022f8 <HAL_ADC_ConfigChannel+0x5c>)
 80022f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f8:	08002309 	.word	0x08002309
 80022fc:	08002311 	.word	0x08002311
 8002300:	08002319 	.word	0x08002319
 8002304:	08002321 	.word	0x08002321
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002308:	230c      	movs	r3, #12
 800230a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800230e:	e010      	b.n	8002332 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002310:	2312      	movs	r3, #18
 8002312:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002316:	e00c      	b.n	8002332 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002318:	2318      	movs	r3, #24
 800231a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800231e:	e008      	b.n	8002332 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002320:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002324:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002328:	e003      	b.n	8002332 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800232a:	2306      	movs	r3, #6
 800232c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002330:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6818      	ldr	r0, [r3, #0]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	461a      	mov	r2, r3
 800233c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002340:	f7ff fb74 	bl	8001a2c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff fc90 	bl	8001c6e <LL_ADC_REG_IsConversionOngoing>
 800234e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff fc9c 	bl	8001c94 <LL_ADC_INJ_IsConversionOngoing>
 800235c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002360:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002364:	2b00      	cmp	r3, #0
 8002366:	f040 81a4 	bne.w	80026b2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800236a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800236e:	2b00      	cmp	r3, #0
 8002370:	f040 819f 	bne.w	80026b2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6818      	ldr	r0, [r3, #0]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	6819      	ldr	r1, [r3, #0]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	461a      	mov	r2, r3
 8002382:	f7ff fb7f 	bl	8001a84 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	695a      	ldr	r2, [r3, #20]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	08db      	lsrs	r3, r3, #3
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d00a      	beq.n	80023be <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6818      	ldr	r0, [r3, #0]
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	6919      	ldr	r1, [r3, #16]
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023b8:	f7ff fad0 	bl	800195c <LL_ADC_SetOffset>
 80023bc:	e179      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2100      	movs	r1, #0
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff faed 	bl	80019a4 <LL_ADC_GetOffsetChannel>
 80023ca:	4603      	mov	r3, r0
 80023cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10a      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x14e>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2100      	movs	r1, #0
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fae2 	bl	80019a4 <LL_ADC_GetOffsetChannel>
 80023e0:	4603      	mov	r3, r0
 80023e2:	0e9b      	lsrs	r3, r3, #26
 80023e4:	f003 021f 	and.w	r2, r3, #31
 80023e8:	e01e      	b.n	8002428 <HAL_ADC_ConfigChannel+0x18c>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2100      	movs	r1, #0
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff fad7 	bl	80019a4 <LL_ADC_GetOffsetChannel>
 80023f6:	4603      	mov	r3, r0
 80023f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002400:	fa93 f3a3 	rbit	r3, r3
 8002404:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002408:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800240c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002410:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002418:	2320      	movs	r3, #32
 800241a:	e004      	b.n	8002426 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800241c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002420:	fab3 f383 	clz	r3, r3
 8002424:	b2db      	uxtb	r3, r3
 8002426:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002430:	2b00      	cmp	r3, #0
 8002432:	d105      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x1a4>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	0e9b      	lsrs	r3, r3, #26
 800243a:	f003 031f 	and.w	r3, r3, #31
 800243e:	e018      	b.n	8002472 <HAL_ADC_ConfigChannel+0x1d6>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002448:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800244c:	fa93 f3a3 	rbit	r3, r3
 8002450:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002454:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002458:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800245c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002464:	2320      	movs	r3, #32
 8002466:	e004      	b.n	8002472 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002468:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800246c:	fab3 f383 	clz	r3, r3
 8002470:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002472:	429a      	cmp	r2, r3
 8002474:	d106      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2200      	movs	r2, #0
 800247c:	2100      	movs	r1, #0
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff faa6 	bl	80019d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2101      	movs	r1, #1
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff fa8a 	bl	80019a4 <LL_ADC_GetOffsetChannel>
 8002490:	4603      	mov	r3, r0
 8002492:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10a      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x214>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2101      	movs	r1, #1
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff fa7f 	bl	80019a4 <LL_ADC_GetOffsetChannel>
 80024a6:	4603      	mov	r3, r0
 80024a8:	0e9b      	lsrs	r3, r3, #26
 80024aa:	f003 021f 	and.w	r2, r3, #31
 80024ae:	e01e      	b.n	80024ee <HAL_ADC_ConfigChannel+0x252>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2101      	movs	r1, #1
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff fa74 	bl	80019a4 <LL_ADC_GetOffsetChannel>
 80024bc:	4603      	mov	r3, r0
 80024be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80024c6:	fa93 f3a3 	rbit	r3, r3
 80024ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80024ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80024d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80024de:	2320      	movs	r3, #32
 80024e0:	e004      	b.n	80024ec <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80024e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024e6:	fab3 f383 	clz	r3, r3
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d105      	bne.n	8002506 <HAL_ADC_ConfigChannel+0x26a>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	0e9b      	lsrs	r3, r3, #26
 8002500:	f003 031f 	and.w	r3, r3, #31
 8002504:	e018      	b.n	8002538 <HAL_ADC_ConfigChannel+0x29c>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002512:	fa93 f3a3 	rbit	r3, r3
 8002516:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800251a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800251e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002522:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800252a:	2320      	movs	r3, #32
 800252c:	e004      	b.n	8002538 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800252e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002532:	fab3 f383 	clz	r3, r3
 8002536:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002538:	429a      	cmp	r2, r3
 800253a:	d106      	bne.n	800254a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2200      	movs	r2, #0
 8002542:	2101      	movs	r1, #1
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff fa43 	bl	80019d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2102      	movs	r1, #2
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff fa27 	bl	80019a4 <LL_ADC_GetOffsetChannel>
 8002556:	4603      	mov	r3, r0
 8002558:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10a      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x2da>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2102      	movs	r1, #2
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff fa1c 	bl	80019a4 <LL_ADC_GetOffsetChannel>
 800256c:	4603      	mov	r3, r0
 800256e:	0e9b      	lsrs	r3, r3, #26
 8002570:	f003 021f 	and.w	r2, r3, #31
 8002574:	e01e      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x318>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2102      	movs	r1, #2
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff fa11 	bl	80019a4 <LL_ADC_GetOffsetChannel>
 8002582:	4603      	mov	r3, r0
 8002584:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002588:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800258c:	fa93 f3a3 	rbit	r3, r3
 8002590:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002594:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002598:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800259c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80025a4:	2320      	movs	r3, #32
 80025a6:	e004      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80025a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025ac:	fab3 f383 	clz	r3, r3
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d105      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x330>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	0e9b      	lsrs	r3, r3, #26
 80025c6:	f003 031f 	and.w	r3, r3, #31
 80025ca:	e014      	b.n	80025f6 <HAL_ADC_ConfigChannel+0x35a>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025d4:	fa93 f3a3 	rbit	r3, r3
 80025d8:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80025da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80025e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80025e8:	2320      	movs	r3, #32
 80025ea:	e004      	b.n	80025f6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80025ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025f0:	fab3 f383 	clz	r3, r3
 80025f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d106      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2200      	movs	r2, #0
 8002600:	2102      	movs	r1, #2
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff f9e4 	bl	80019d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2103      	movs	r1, #3
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff f9c8 	bl	80019a4 <LL_ADC_GetOffsetChannel>
 8002614:	4603      	mov	r3, r0
 8002616:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10a      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x398>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2103      	movs	r1, #3
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff f9bd 	bl	80019a4 <LL_ADC_GetOffsetChannel>
 800262a:	4603      	mov	r3, r0
 800262c:	0e9b      	lsrs	r3, r3, #26
 800262e:	f003 021f 	and.w	r2, r3, #31
 8002632:	e017      	b.n	8002664 <HAL_ADC_ConfigChannel+0x3c8>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2103      	movs	r1, #3
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff f9b2 	bl	80019a4 <LL_ADC_GetOffsetChannel>
 8002640:	4603      	mov	r3, r0
 8002642:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002644:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002646:	fa93 f3a3 	rbit	r3, r3
 800264a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800264c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800264e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002650:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002656:	2320      	movs	r3, #32
 8002658:	e003      	b.n	8002662 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800265a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800265c:	fab3 f383 	clz	r3, r3
 8002660:	b2db      	uxtb	r3, r3
 8002662:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800266c:	2b00      	cmp	r3, #0
 800266e:	d105      	bne.n	800267c <HAL_ADC_ConfigChannel+0x3e0>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	0e9b      	lsrs	r3, r3, #26
 8002676:	f003 031f 	and.w	r3, r3, #31
 800267a:	e011      	b.n	80026a0 <HAL_ADC_ConfigChannel+0x404>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002682:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002684:	fa93 f3a3 	rbit	r3, r3
 8002688:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800268a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800268c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800268e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002694:	2320      	movs	r3, #32
 8002696:	e003      	b.n	80026a0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002698:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800269a:	fab3 f383 	clz	r3, r3
 800269e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d106      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2200      	movs	r2, #0
 80026aa:	2103      	movs	r1, #3
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff f98f 	bl	80019d0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff fab2 	bl	8001c20 <LL_ADC_IsEnabled>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f040 8140 	bne.w	8002944 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6818      	ldr	r0, [r3, #0]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	6819      	ldr	r1, [r3, #0]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	461a      	mov	r2, r3
 80026d2:	f7ff fa03 	bl	8001adc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	4a8f      	ldr	r2, [pc, #572]	; (8002918 <HAL_ADC_ConfigChannel+0x67c>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	f040 8131 	bne.w	8002944 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10b      	bne.n	800270a <HAL_ADC_ConfigChannel+0x46e>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	0e9b      	lsrs	r3, r3, #26
 80026f8:	3301      	adds	r3, #1
 80026fa:	f003 031f 	and.w	r3, r3, #31
 80026fe:	2b09      	cmp	r3, #9
 8002700:	bf94      	ite	ls
 8002702:	2301      	movls	r3, #1
 8002704:	2300      	movhi	r3, #0
 8002706:	b2db      	uxtb	r3, r3
 8002708:	e019      	b.n	800273e <HAL_ADC_ConfigChannel+0x4a2>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002710:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002712:	fa93 f3a3 	rbit	r3, r3
 8002716:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800271a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800271c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002722:	2320      	movs	r3, #32
 8002724:	e003      	b.n	800272e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002726:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002728:	fab3 f383 	clz	r3, r3
 800272c:	b2db      	uxtb	r3, r3
 800272e:	3301      	adds	r3, #1
 8002730:	f003 031f 	and.w	r3, r3, #31
 8002734:	2b09      	cmp	r3, #9
 8002736:	bf94      	ite	ls
 8002738:	2301      	movls	r3, #1
 800273a:	2300      	movhi	r3, #0
 800273c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800273e:	2b00      	cmp	r3, #0
 8002740:	d079      	beq.n	8002836 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800274a:	2b00      	cmp	r3, #0
 800274c:	d107      	bne.n	800275e <HAL_ADC_ConfigChannel+0x4c2>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	0e9b      	lsrs	r3, r3, #26
 8002754:	3301      	adds	r3, #1
 8002756:	069b      	lsls	r3, r3, #26
 8002758:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800275c:	e015      	b.n	800278a <HAL_ADC_ConfigChannel+0x4ee>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002766:	fa93 f3a3 	rbit	r3, r3
 800276a:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800276c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800276e:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002776:	2320      	movs	r3, #32
 8002778:	e003      	b.n	8002782 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800277a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800277c:	fab3 f383 	clz	r3, r3
 8002780:	b2db      	uxtb	r3, r3
 8002782:	3301      	adds	r3, #1
 8002784:	069b      	lsls	r3, r3, #26
 8002786:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002792:	2b00      	cmp	r3, #0
 8002794:	d109      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x50e>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	0e9b      	lsrs	r3, r3, #26
 800279c:	3301      	adds	r3, #1
 800279e:	f003 031f 	and.w	r3, r3, #31
 80027a2:	2101      	movs	r1, #1
 80027a4:	fa01 f303 	lsl.w	r3, r1, r3
 80027a8:	e017      	b.n	80027da <HAL_ADC_ConfigChannel+0x53e>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027b2:	fa93 f3a3 	rbit	r3, r3
 80027b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80027b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027ba:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80027bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80027c2:	2320      	movs	r3, #32
 80027c4:	e003      	b.n	80027ce <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80027c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027c8:	fab3 f383 	clz	r3, r3
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	3301      	adds	r3, #1
 80027d0:	f003 031f 	and.w	r3, r3, #31
 80027d4:	2101      	movs	r1, #1
 80027d6:	fa01 f303 	lsl.w	r3, r1, r3
 80027da:	ea42 0103 	orr.w	r1, r2, r3
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10a      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x564>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	0e9b      	lsrs	r3, r3, #26
 80027f0:	3301      	adds	r3, #1
 80027f2:	f003 021f 	and.w	r2, r3, #31
 80027f6:	4613      	mov	r3, r2
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	4413      	add	r3, r2
 80027fc:	051b      	lsls	r3, r3, #20
 80027fe:	e018      	b.n	8002832 <HAL_ADC_ConfigChannel+0x596>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002808:	fa93 f3a3 	rbit	r3, r3
 800280c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800280e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002810:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002818:	2320      	movs	r3, #32
 800281a:	e003      	b.n	8002824 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800281c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800281e:	fab3 f383 	clz	r3, r3
 8002822:	b2db      	uxtb	r3, r3
 8002824:	3301      	adds	r3, #1
 8002826:	f003 021f 	and.w	r2, r3, #31
 800282a:	4613      	mov	r3, r2
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	4413      	add	r3, r2
 8002830:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002832:	430b      	orrs	r3, r1
 8002834:	e081      	b.n	800293a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800283e:	2b00      	cmp	r3, #0
 8002840:	d107      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x5b6>
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	0e9b      	lsrs	r3, r3, #26
 8002848:	3301      	adds	r3, #1
 800284a:	069b      	lsls	r3, r3, #26
 800284c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002850:	e015      	b.n	800287e <HAL_ADC_ConfigChannel+0x5e2>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285a:	fa93 f3a3 	rbit	r3, r3
 800285e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800286a:	2320      	movs	r3, #32
 800286c:	e003      	b.n	8002876 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800286e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002870:	fab3 f383 	clz	r3, r3
 8002874:	b2db      	uxtb	r3, r3
 8002876:	3301      	adds	r3, #1
 8002878:	069b      	lsls	r3, r3, #26
 800287a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002886:	2b00      	cmp	r3, #0
 8002888:	d109      	bne.n	800289e <HAL_ADC_ConfigChannel+0x602>
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	0e9b      	lsrs	r3, r3, #26
 8002890:	3301      	adds	r3, #1
 8002892:	f003 031f 	and.w	r3, r3, #31
 8002896:	2101      	movs	r1, #1
 8002898:	fa01 f303 	lsl.w	r3, r1, r3
 800289c:	e017      	b.n	80028ce <HAL_ADC_ConfigChannel+0x632>
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	fa93 f3a3 	rbit	r3, r3
 80028aa:	61bb      	str	r3, [r7, #24]
  return result;
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80028b0:	6a3b      	ldr	r3, [r7, #32]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80028b6:	2320      	movs	r3, #32
 80028b8:	e003      	b.n	80028c2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	fab3 f383 	clz	r3, r3
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	3301      	adds	r3, #1
 80028c4:	f003 031f 	and.w	r3, r3, #31
 80028c8:	2101      	movs	r1, #1
 80028ca:	fa01 f303 	lsl.w	r3, r1, r3
 80028ce:	ea42 0103 	orr.w	r1, r2, r3
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10d      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x65e>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	0e9b      	lsrs	r3, r3, #26
 80028e4:	3301      	adds	r3, #1
 80028e6:	f003 021f 	and.w	r2, r3, #31
 80028ea:	4613      	mov	r3, r2
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	4413      	add	r3, r2
 80028f0:	3b1e      	subs	r3, #30
 80028f2:	051b      	lsls	r3, r3, #20
 80028f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028f8:	e01e      	b.n	8002938 <HAL_ADC_ConfigChannel+0x69c>
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	fa93 f3a3 	rbit	r3, r3
 8002906:	60fb      	str	r3, [r7, #12]
  return result;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d104      	bne.n	800291c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002912:	2320      	movs	r3, #32
 8002914:	e006      	b.n	8002924 <HAL_ADC_ConfigChannel+0x688>
 8002916:	bf00      	nop
 8002918:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	fab3 f383 	clz	r3, r3
 8002922:	b2db      	uxtb	r3, r3
 8002924:	3301      	adds	r3, #1
 8002926:	f003 021f 	and.w	r2, r3, #31
 800292a:	4613      	mov	r3, r2
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	4413      	add	r3, r2
 8002930:	3b1e      	subs	r3, #30
 8002932:	051b      	lsls	r3, r3, #20
 8002934:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002938:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800293e:	4619      	mov	r1, r3
 8002940:	f7ff f8a0 	bl	8001a84 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	4b44      	ldr	r3, [pc, #272]	; (8002a5c <HAL_ADC_ConfigChannel+0x7c0>)
 800294a:	4013      	ands	r3, r2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d07a      	beq.n	8002a46 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002950:	4843      	ldr	r0, [pc, #268]	; (8002a60 <HAL_ADC_ConfigChannel+0x7c4>)
 8002952:	f7fe fff5 	bl	8001940 <LL_ADC_GetCommonPathInternalCh>
 8002956:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a41      	ldr	r2, [pc, #260]	; (8002a64 <HAL_ADC_ConfigChannel+0x7c8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d12c      	bne.n	80029be <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002964:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002968:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d126      	bne.n	80029be <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a3c      	ldr	r2, [pc, #240]	; (8002a68 <HAL_ADC_ConfigChannel+0x7cc>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d004      	beq.n	8002984 <HAL_ADC_ConfigChannel+0x6e8>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a3b      	ldr	r2, [pc, #236]	; (8002a6c <HAL_ADC_ConfigChannel+0x7d0>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d15d      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002984:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002988:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800298c:	4619      	mov	r1, r3
 800298e:	4834      	ldr	r0, [pc, #208]	; (8002a60 <HAL_ADC_ConfigChannel+0x7c4>)
 8002990:	f7fe ffc3 	bl	800191a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002994:	4b36      	ldr	r3, [pc, #216]	; (8002a70 <HAL_ADC_ConfigChannel+0x7d4>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	099b      	lsrs	r3, r3, #6
 800299a:	4a36      	ldr	r2, [pc, #216]	; (8002a74 <HAL_ADC_ConfigChannel+0x7d8>)
 800299c:	fba2 2303 	umull	r2, r3, r2, r3
 80029a0:	099b      	lsrs	r3, r3, #6
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	4613      	mov	r3, r2
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	4413      	add	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80029ae:	e002      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1f9      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029bc:	e040      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a2d      	ldr	r2, [pc, #180]	; (8002a78 <HAL_ADC_ConfigChannel+0x7dc>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d118      	bne.n	80029fa <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d112      	bne.n	80029fa <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a23      	ldr	r2, [pc, #140]	; (8002a68 <HAL_ADC_ConfigChannel+0x7cc>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d004      	beq.n	80029e8 <HAL_ADC_ConfigChannel+0x74c>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a22      	ldr	r2, [pc, #136]	; (8002a6c <HAL_ADC_ConfigChannel+0x7d0>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d12d      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029f0:	4619      	mov	r1, r3
 80029f2:	481b      	ldr	r0, [pc, #108]	; (8002a60 <HAL_ADC_ConfigChannel+0x7c4>)
 80029f4:	f7fe ff91 	bl	800191a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029f8:	e024      	b.n	8002a44 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a1f      	ldr	r2, [pc, #124]	; (8002a7c <HAL_ADC_ConfigChannel+0x7e0>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d120      	bne.n	8002a46 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d11a      	bne.n	8002a46 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a14      	ldr	r2, [pc, #80]	; (8002a68 <HAL_ADC_ConfigChannel+0x7cc>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d115      	bne.n	8002a46 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a22:	4619      	mov	r1, r3
 8002a24:	480e      	ldr	r0, [pc, #56]	; (8002a60 <HAL_ADC_ConfigChannel+0x7c4>)
 8002a26:	f7fe ff78 	bl	800191a <LL_ADC_SetCommonPathInternalCh>
 8002a2a:	e00c      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a30:	f043 0220 	orr.w	r2, r3, #32
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002a3e:	e002      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a40:	bf00      	nop
 8002a42:	e000      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a44:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a4e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	37d8      	adds	r7, #216	; 0xd8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	80080000 	.word	0x80080000
 8002a60:	50040300 	.word	0x50040300
 8002a64:	c7520000 	.word	0xc7520000
 8002a68:	50040000 	.word	0x50040000
 8002a6c:	50040200 	.word	0x50040200
 8002a70:	20000000 	.word	0x20000000
 8002a74:	053e2d63 	.word	0x053e2d63
 8002a78:	cb840000 	.word	0xcb840000
 8002a7c:	80000001 	.word	0x80000001

08002a80 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff f8c5 	bl	8001c20 <LL_ADC_IsEnabled>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d169      	bne.n	8002b70 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	4b36      	ldr	r3, [pc, #216]	; (8002b7c <ADC_Enable+0xfc>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00d      	beq.n	8002ac6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aae:	f043 0210 	orr.w	r2, r3, #16
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aba:	f043 0201 	orr.w	r2, r3, #1
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e055      	b.n	8002b72 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff f894 	bl	8001bf8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002ad0:	482b      	ldr	r0, [pc, #172]	; (8002b80 <ADC_Enable+0x100>)
 8002ad2:	f7fe ff35 	bl	8001940 <LL_ADC_GetCommonPathInternalCh>
 8002ad6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002ad8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d013      	beq.n	8002b08 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ae0:	4b28      	ldr	r3, [pc, #160]	; (8002b84 <ADC_Enable+0x104>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	099b      	lsrs	r3, r3, #6
 8002ae6:	4a28      	ldr	r2, [pc, #160]	; (8002b88 <ADC_Enable+0x108>)
 8002ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aec:	099b      	lsrs	r3, r3, #6
 8002aee:	1c5a      	adds	r2, r3, #1
 8002af0:	4613      	mov	r3, r2
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	4413      	add	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002afa:	e002      	b.n	8002b02 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	3b01      	subs	r3, #1
 8002b00:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1f9      	bne.n	8002afc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002b08:	f7fe fec4 	bl	8001894 <HAL_GetTick>
 8002b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b0e:	e028      	b.n	8002b62 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff f883 	bl	8001c20 <LL_ADC_IsEnabled>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d104      	bne.n	8002b2a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff f867 	bl	8001bf8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b2a:	f7fe feb3 	bl	8001894 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d914      	bls.n	8002b62 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d00d      	beq.n	8002b62 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4a:	f043 0210 	orr.w	r2, r3, #16
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b56:	f043 0201 	orr.w	r2, r3, #1
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e007      	b.n	8002b72 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d1cf      	bne.n	8002b10 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	8000003f 	.word	0x8000003f
 8002b80:	50040300 	.word	0x50040300
 8002b84:	20000000 	.word	0x20000000
 8002b88:	053e2d63 	.word	0x053e2d63

08002b8c <LL_ADC_IsEnabled>:
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <LL_ADC_IsEnabled+0x18>
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e000      	b.n	8002ba6 <LL_ADC_IsEnabled+0x1a>
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <LL_ADC_REG_IsConversionOngoing>:
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	d101      	bne.n	8002bca <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002bd8:	b590      	push	{r4, r7, lr}
 8002bda:	b09f      	sub	sp, #124	; 0x7c
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002be2:	2300      	movs	r3, #0
 8002be4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d101      	bne.n	8002bf6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	e093      	b.n	8002d1e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002bfe:	2300      	movs	r3, #0
 8002c00:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002c02:	2300      	movs	r3, #0
 8002c04:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a47      	ldr	r2, [pc, #284]	; (8002d28 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d102      	bne.n	8002c16 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002c10:	4b46      	ldr	r3, [pc, #280]	; (8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002c12:	60bb      	str	r3, [r7, #8]
 8002c14:	e001      	b.n	8002c1a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002c16:	2300      	movs	r3, #0
 8002c18:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10b      	bne.n	8002c38 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c24:	f043 0220 	orr.w	r2, r3, #32
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e072      	b.n	8002d1e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff ffb9 	bl	8002bb2 <LL_ADC_REG_IsConversionOngoing>
 8002c40:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff ffb3 	bl	8002bb2 <LL_ADC_REG_IsConversionOngoing>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d154      	bne.n	8002cfc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002c52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d151      	bne.n	8002cfc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c58:	4b35      	ldr	r3, [pc, #212]	; (8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002c5a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d02c      	beq.n	8002cbe <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	6859      	ldr	r1, [r3, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c76:	035b      	lsls	r3, r3, #13
 8002c78:	430b      	orrs	r3, r1
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c7e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c80:	4829      	ldr	r0, [pc, #164]	; (8002d28 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002c82:	f7ff ff83 	bl	8002b8c <LL_ADC_IsEnabled>
 8002c86:	4604      	mov	r4, r0
 8002c88:	4828      	ldr	r0, [pc, #160]	; (8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002c8a:	f7ff ff7f 	bl	8002b8c <LL_ADC_IsEnabled>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	431c      	orrs	r4, r3
 8002c92:	4828      	ldr	r0, [pc, #160]	; (8002d34 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002c94:	f7ff ff7a 	bl	8002b8c <LL_ADC_IsEnabled>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	4323      	orrs	r3, r4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d137      	bne.n	8002d10 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ca8:	f023 030f 	bic.w	r3, r3, #15
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	6811      	ldr	r1, [r2, #0]
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	6892      	ldr	r2, [r2, #8]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cba:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002cbc:	e028      	b.n	8002d10 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cca:	4817      	ldr	r0, [pc, #92]	; (8002d28 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002ccc:	f7ff ff5e 	bl	8002b8c <LL_ADC_IsEnabled>
 8002cd0:	4604      	mov	r4, r0
 8002cd2:	4816      	ldr	r0, [pc, #88]	; (8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002cd4:	f7ff ff5a 	bl	8002b8c <LL_ADC_IsEnabled>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	431c      	orrs	r4, r3
 8002cdc:	4815      	ldr	r0, [pc, #84]	; (8002d34 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002cde:	f7ff ff55 	bl	8002b8c <LL_ADC_IsEnabled>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	4323      	orrs	r3, r4
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d112      	bne.n	8002d10 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002cf2:	f023 030f 	bic.w	r3, r3, #15
 8002cf6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002cf8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002cfa:	e009      	b.n	8002d10 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d00:	f043 0220 	orr.w	r2, r3, #32
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002d0e:	e000      	b.n	8002d12 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d10:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d1a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	377c      	adds	r7, #124	; 0x7c
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd90      	pop	{r4, r7, pc}
 8002d26:	bf00      	nop
 8002d28:	50040000 	.word	0x50040000
 8002d2c:	50040100 	.word	0x50040100
 8002d30:	50040300 	.word	0x50040300
 8002d34:	50040200 	.word	0x50040200

08002d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d48:	4b0c      	ldr	r3, [pc, #48]	; (8002d7c <__NVIC_SetPriorityGrouping+0x44>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d54:	4013      	ands	r3, r2
 8002d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d6a:	4a04      	ldr	r2, [pc, #16]	; (8002d7c <__NVIC_SetPriorityGrouping+0x44>)
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	60d3      	str	r3, [r2, #12]
}
 8002d70:	bf00      	nop
 8002d72:	3714      	adds	r7, #20
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	e000ed00 	.word	0xe000ed00

08002d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d84:	4b04      	ldr	r3, [pc, #16]	; (8002d98 <__NVIC_GetPriorityGrouping+0x18>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	0a1b      	lsrs	r3, r3, #8
 8002d8a:	f003 0307 	and.w	r3, r3, #7
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	e000ed00 	.word	0xe000ed00

08002d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	6039      	str	r1, [r7, #0]
 8002da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	db0a      	blt.n	8002dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	490c      	ldr	r1, [pc, #48]	; (8002de8 <__NVIC_SetPriority+0x4c>)
 8002db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dba:	0112      	lsls	r2, r2, #4
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dc4:	e00a      	b.n	8002ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	4908      	ldr	r1, [pc, #32]	; (8002dec <__NVIC_SetPriority+0x50>)
 8002dcc:	79fb      	ldrb	r3, [r7, #7]
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	3b04      	subs	r3, #4
 8002dd4:	0112      	lsls	r2, r2, #4
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	440b      	add	r3, r1
 8002dda:	761a      	strb	r2, [r3, #24]
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	e000e100 	.word	0xe000e100
 8002dec:	e000ed00 	.word	0xe000ed00

08002df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b089      	sub	sp, #36	; 0x24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f1c3 0307 	rsb	r3, r3, #7
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	bf28      	it	cs
 8002e0e:	2304      	movcs	r3, #4
 8002e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	3304      	adds	r3, #4
 8002e16:	2b06      	cmp	r3, #6
 8002e18:	d902      	bls.n	8002e20 <NVIC_EncodePriority+0x30>
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	3b03      	subs	r3, #3
 8002e1e:	e000      	b.n	8002e22 <NVIC_EncodePriority+0x32>
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e24:	f04f 32ff 	mov.w	r2, #4294967295
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	43da      	mvns	r2, r3
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	401a      	ands	r2, r3
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e38:	f04f 31ff 	mov.w	r1, #4294967295
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e42:	43d9      	mvns	r1, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e48:	4313      	orrs	r3, r2
         );
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3724      	adds	r7, #36	; 0x24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
	...

08002e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e68:	d301      	bcc.n	8002e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e00f      	b.n	8002e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e6e:	4a0a      	ldr	r2, [pc, #40]	; (8002e98 <SysTick_Config+0x40>)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e76:	210f      	movs	r1, #15
 8002e78:	f04f 30ff 	mov.w	r0, #4294967295
 8002e7c:	f7ff ff8e 	bl	8002d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e80:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <SysTick_Config+0x40>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e86:	4b04      	ldr	r3, [pc, #16]	; (8002e98 <SysTick_Config+0x40>)
 8002e88:	2207      	movs	r2, #7
 8002e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	e000e010 	.word	0xe000e010

08002e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7ff ff47 	bl	8002d38 <__NVIC_SetPriorityGrouping>
}
 8002eaa:	bf00      	nop
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b086      	sub	sp, #24
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	4603      	mov	r3, r0
 8002eba:	60b9      	str	r1, [r7, #8]
 8002ebc:	607a      	str	r2, [r7, #4]
 8002ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ec4:	f7ff ff5c 	bl	8002d80 <__NVIC_GetPriorityGrouping>
 8002ec8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	68b9      	ldr	r1, [r7, #8]
 8002ece:	6978      	ldr	r0, [r7, #20]
 8002ed0:	f7ff ff8e 	bl	8002df0 <NVIC_EncodePriority>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eda:	4611      	mov	r1, r2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff ff5d 	bl	8002d9c <__NVIC_SetPriority>
}
 8002ee2:	bf00      	nop
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7ff ffb0 	bl	8002e58 <SysTick_Config>
 8002ef8:	4603      	mov	r3, r0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b087      	sub	sp, #28
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f12:	e17f      	b.n	8003214 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	2101      	movs	r1, #1
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f20:	4013      	ands	r3, r2
 8002f22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f000 8171 	beq.w	800320e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f003 0303 	and.w	r3, r3, #3
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d005      	beq.n	8002f44 <HAL_GPIO_Init+0x40>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f003 0303 	and.w	r3, r3, #3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d130      	bne.n	8002fa6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	2203      	movs	r2, #3
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	43db      	mvns	r3, r3
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43db      	mvns	r3, r3
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	4013      	ands	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	091b      	lsrs	r3, r3, #4
 8002f90:	f003 0201 	and.w	r2, r3, #1
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d118      	bne.n	8002fe4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002fb8:	2201      	movs	r2, #1
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	08db      	lsrs	r3, r3, #3
 8002fce:	f003 0201 	and.w	r2, r3, #1
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 0303 	and.w	r3, r3, #3
 8002fec:	2b03      	cmp	r3, #3
 8002fee:	d017      	beq.n	8003020 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	2203      	movs	r2, #3
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	43db      	mvns	r3, r3
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	4013      	ands	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	4313      	orrs	r3, r2
 8003018:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 0303 	and.w	r3, r3, #3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d123      	bne.n	8003074 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	08da      	lsrs	r2, r3, #3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3208      	adds	r2, #8
 8003034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003038:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	220f      	movs	r2, #15
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	4013      	ands	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	691a      	ldr	r2, [r3, #16]
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	4313      	orrs	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	08da      	lsrs	r2, r3, #3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	3208      	adds	r2, #8
 800306e:	6939      	ldr	r1, [r7, #16]
 8003070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	2203      	movs	r2, #3
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	43db      	mvns	r3, r3
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	4013      	ands	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 0203 	and.w	r2, r3, #3
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	4313      	orrs	r3, r2
 80030a0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 80ac 	beq.w	800320e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030b6:	4b5f      	ldr	r3, [pc, #380]	; (8003234 <HAL_GPIO_Init+0x330>)
 80030b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ba:	4a5e      	ldr	r2, [pc, #376]	; (8003234 <HAL_GPIO_Init+0x330>)
 80030bc:	f043 0301 	orr.w	r3, r3, #1
 80030c0:	6613      	str	r3, [r2, #96]	; 0x60
 80030c2:	4b5c      	ldr	r3, [pc, #368]	; (8003234 <HAL_GPIO_Init+0x330>)
 80030c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	60bb      	str	r3, [r7, #8]
 80030cc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80030ce:	4a5a      	ldr	r2, [pc, #360]	; (8003238 <HAL_GPIO_Init+0x334>)
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	089b      	lsrs	r3, r3, #2
 80030d4:	3302      	adds	r3, #2
 80030d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030da:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	220f      	movs	r2, #15
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	43db      	mvns	r3, r3
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	4013      	ands	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80030f8:	d025      	beq.n	8003146 <HAL_GPIO_Init+0x242>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a4f      	ldr	r2, [pc, #316]	; (800323c <HAL_GPIO_Init+0x338>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d01f      	beq.n	8003142 <HAL_GPIO_Init+0x23e>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a4e      	ldr	r2, [pc, #312]	; (8003240 <HAL_GPIO_Init+0x33c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d019      	beq.n	800313e <HAL_GPIO_Init+0x23a>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a4d      	ldr	r2, [pc, #308]	; (8003244 <HAL_GPIO_Init+0x340>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d013      	beq.n	800313a <HAL_GPIO_Init+0x236>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a4c      	ldr	r2, [pc, #304]	; (8003248 <HAL_GPIO_Init+0x344>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d00d      	beq.n	8003136 <HAL_GPIO_Init+0x232>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a4b      	ldr	r2, [pc, #300]	; (800324c <HAL_GPIO_Init+0x348>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d007      	beq.n	8003132 <HAL_GPIO_Init+0x22e>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a4a      	ldr	r2, [pc, #296]	; (8003250 <HAL_GPIO_Init+0x34c>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d101      	bne.n	800312e <HAL_GPIO_Init+0x22a>
 800312a:	2306      	movs	r3, #6
 800312c:	e00c      	b.n	8003148 <HAL_GPIO_Init+0x244>
 800312e:	2307      	movs	r3, #7
 8003130:	e00a      	b.n	8003148 <HAL_GPIO_Init+0x244>
 8003132:	2305      	movs	r3, #5
 8003134:	e008      	b.n	8003148 <HAL_GPIO_Init+0x244>
 8003136:	2304      	movs	r3, #4
 8003138:	e006      	b.n	8003148 <HAL_GPIO_Init+0x244>
 800313a:	2303      	movs	r3, #3
 800313c:	e004      	b.n	8003148 <HAL_GPIO_Init+0x244>
 800313e:	2302      	movs	r3, #2
 8003140:	e002      	b.n	8003148 <HAL_GPIO_Init+0x244>
 8003142:	2301      	movs	r3, #1
 8003144:	e000      	b.n	8003148 <HAL_GPIO_Init+0x244>
 8003146:	2300      	movs	r3, #0
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	f002 0203 	and.w	r2, r2, #3
 800314e:	0092      	lsls	r2, r2, #2
 8003150:	4093      	lsls	r3, r2
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003158:	4937      	ldr	r1, [pc, #220]	; (8003238 <HAL_GPIO_Init+0x334>)
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	089b      	lsrs	r3, r3, #2
 800315e:	3302      	adds	r3, #2
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003166:	4b3b      	ldr	r3, [pc, #236]	; (8003254 <HAL_GPIO_Init+0x350>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	43db      	mvns	r3, r3
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	4013      	ands	r3, r2
 8003174:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4313      	orrs	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800318a:	4a32      	ldr	r2, [pc, #200]	; (8003254 <HAL_GPIO_Init+0x350>)
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003190:	4b30      	ldr	r3, [pc, #192]	; (8003254 <HAL_GPIO_Init+0x350>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	43db      	mvns	r3, r3
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	4013      	ands	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031b4:	4a27      	ldr	r2, [pc, #156]	; (8003254 <HAL_GPIO_Init+0x350>)
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80031ba:	4b26      	ldr	r3, [pc, #152]	; (8003254 <HAL_GPIO_Init+0x350>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	43db      	mvns	r3, r3
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	4013      	ands	r3, r2
 80031c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4313      	orrs	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031de:	4a1d      	ldr	r2, [pc, #116]	; (8003254 <HAL_GPIO_Init+0x350>)
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80031e4:	4b1b      	ldr	r3, [pc, #108]	; (8003254 <HAL_GPIO_Init+0x350>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	43db      	mvns	r3, r3
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	4013      	ands	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4313      	orrs	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003208:	4a12      	ldr	r2, [pc, #72]	; (8003254 <HAL_GPIO_Init+0x350>)
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	3301      	adds	r3, #1
 8003212:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	fa22 f303 	lsr.w	r3, r2, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	f47f ae78 	bne.w	8002f14 <HAL_GPIO_Init+0x10>
  }
}
 8003224:	bf00      	nop
 8003226:	bf00      	nop
 8003228:	371c      	adds	r7, #28
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	40021000 	.word	0x40021000
 8003238:	40010000 	.word	0x40010000
 800323c:	48000400 	.word	0x48000400
 8003240:	48000800 	.word	0x48000800
 8003244:	48000c00 	.word	0x48000c00
 8003248:	48001000 	.word	0x48001000
 800324c:	48001400 	.word	0x48001400
 8003250:	48001800 	.word	0x48001800
 8003254:	40010400 	.word	0x40010400

08003258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	460b      	mov	r3, r1
 8003262:	807b      	strh	r3, [r7, #2]
 8003264:	4613      	mov	r3, r2
 8003266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003268:	787b      	ldrb	r3, [r7, #1]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800326e:	887a      	ldrh	r2, [r7, #2]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003274:	e002      	b.n	800327c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003276:	887a      	ldrh	r2, [r7, #2]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800328c:	4b04      	ldr	r3, [pc, #16]	; (80032a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003294:	4618      	mov	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	40007000 	.word	0x40007000

080032a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032b2:	d130      	bne.n	8003316 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80032b4:	4b23      	ldr	r3, [pc, #140]	; (8003344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032c0:	d038      	beq.n	8003334 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032c2:	4b20      	ldr	r3, [pc, #128]	; (8003344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032ca:	4a1e      	ldr	r2, [pc, #120]	; (8003344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032d2:	4b1d      	ldr	r3, [pc, #116]	; (8003348 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2232      	movs	r2, #50	; 0x32
 80032d8:	fb02 f303 	mul.w	r3, r2, r3
 80032dc:	4a1b      	ldr	r2, [pc, #108]	; (800334c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032de:	fba2 2303 	umull	r2, r3, r2, r3
 80032e2:	0c9b      	lsrs	r3, r3, #18
 80032e4:	3301      	adds	r3, #1
 80032e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032e8:	e002      	b.n	80032f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	3b01      	subs	r3, #1
 80032ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032f0:	4b14      	ldr	r3, [pc, #80]	; (8003344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032fc:	d102      	bne.n	8003304 <HAL_PWREx_ControlVoltageScaling+0x60>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1f2      	bne.n	80032ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003304:	4b0f      	ldr	r3, [pc, #60]	; (8003344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800330c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003310:	d110      	bne.n	8003334 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e00f      	b.n	8003336 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003316:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800331e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003322:	d007      	beq.n	8003334 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003324:	4b07      	ldr	r3, [pc, #28]	; (8003344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800332c:	4a05      	ldr	r2, [pc, #20]	; (8003344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800332e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003332:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3714      	adds	r7, #20
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	40007000 	.word	0x40007000
 8003348:	20000000 	.word	0x20000000
 800334c:	431bde83 	.word	0x431bde83

08003350 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b088      	sub	sp, #32
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e3ca      	b.n	8003af8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003362:	4b97      	ldr	r3, [pc, #604]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 030c 	and.w	r3, r3, #12
 800336a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800336c:	4b94      	ldr	r3, [pc, #592]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	f003 0303 	and.w	r3, r3, #3
 8003374:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0310 	and.w	r3, r3, #16
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 80e4 	beq.w	800354c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d007      	beq.n	800339a <HAL_RCC_OscConfig+0x4a>
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	2b0c      	cmp	r3, #12
 800338e:	f040 808b 	bne.w	80034a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	2b01      	cmp	r3, #1
 8003396:	f040 8087 	bne.w	80034a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800339a:	4b89      	ldr	r3, [pc, #548]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d005      	beq.n	80033b2 <HAL_RCC_OscConfig+0x62>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e3a2      	b.n	8003af8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a1a      	ldr	r2, [r3, #32]
 80033b6:	4b82      	ldr	r3, [pc, #520]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d004      	beq.n	80033cc <HAL_RCC_OscConfig+0x7c>
 80033c2:	4b7f      	ldr	r3, [pc, #508]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033ca:	e005      	b.n	80033d8 <HAL_RCC_OscConfig+0x88>
 80033cc:	4b7c      	ldr	r3, [pc, #496]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 80033ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033d2:	091b      	lsrs	r3, r3, #4
 80033d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033d8:	4293      	cmp	r3, r2
 80033da:	d223      	bcs.n	8003424 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 fd1d 	bl	8003e20 <RCC_SetFlashLatencyFromMSIRange>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e383      	b.n	8003af8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033f0:	4b73      	ldr	r3, [pc, #460]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a72      	ldr	r2, [pc, #456]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 80033f6:	f043 0308 	orr.w	r3, r3, #8
 80033fa:	6013      	str	r3, [r2, #0]
 80033fc:	4b70      	ldr	r3, [pc, #448]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	496d      	ldr	r1, [pc, #436]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 800340a:	4313      	orrs	r3, r2
 800340c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800340e:	4b6c      	ldr	r3, [pc, #432]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	021b      	lsls	r3, r3, #8
 800341c:	4968      	ldr	r1, [pc, #416]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 800341e:	4313      	orrs	r3, r2
 8003420:	604b      	str	r3, [r1, #4]
 8003422:	e025      	b.n	8003470 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003424:	4b66      	ldr	r3, [pc, #408]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a65      	ldr	r2, [pc, #404]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 800342a:	f043 0308 	orr.w	r3, r3, #8
 800342e:	6013      	str	r3, [r2, #0]
 8003430:	4b63      	ldr	r3, [pc, #396]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	4960      	ldr	r1, [pc, #384]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 800343e:	4313      	orrs	r3, r2
 8003440:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003442:	4b5f      	ldr	r3, [pc, #380]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	021b      	lsls	r3, r3, #8
 8003450:	495b      	ldr	r1, [pc, #364]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 8003452:	4313      	orrs	r3, r2
 8003454:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d109      	bne.n	8003470 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	4618      	mov	r0, r3
 8003462:	f000 fcdd 	bl	8003e20 <RCC_SetFlashLatencyFromMSIRange>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e343      	b.n	8003af8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003470:	f000 fc4a 	bl	8003d08 <HAL_RCC_GetSysClockFreq>
 8003474:	4602      	mov	r2, r0
 8003476:	4b52      	ldr	r3, [pc, #328]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	091b      	lsrs	r3, r3, #4
 800347c:	f003 030f 	and.w	r3, r3, #15
 8003480:	4950      	ldr	r1, [pc, #320]	; (80035c4 <HAL_RCC_OscConfig+0x274>)
 8003482:	5ccb      	ldrb	r3, [r1, r3]
 8003484:	f003 031f 	and.w	r3, r3, #31
 8003488:	fa22 f303 	lsr.w	r3, r2, r3
 800348c:	4a4e      	ldr	r2, [pc, #312]	; (80035c8 <HAL_RCC_OscConfig+0x278>)
 800348e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003490:	4b4e      	ldr	r3, [pc, #312]	; (80035cc <HAL_RCC_OscConfig+0x27c>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f7fe f9ad 	bl	80017f4 <HAL_InitTick>
 800349a:	4603      	mov	r3, r0
 800349c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800349e:	7bfb      	ldrb	r3, [r7, #15]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d052      	beq.n	800354a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
 80034a6:	e327      	b.n	8003af8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d032      	beq.n	8003516 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034b0:	4b43      	ldr	r3, [pc, #268]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a42      	ldr	r2, [pc, #264]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034bc:	f7fe f9ea 	bl	8001894 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034c4:	f7fe f9e6 	bl	8001894 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e310      	b.n	8003af8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034d6:	4b3a      	ldr	r3, [pc, #232]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0f0      	beq.n	80034c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034e2:	4b37      	ldr	r3, [pc, #220]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a36      	ldr	r2, [pc, #216]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 80034e8:	f043 0308 	orr.w	r3, r3, #8
 80034ec:	6013      	str	r3, [r2, #0]
 80034ee:	4b34      	ldr	r3, [pc, #208]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	4931      	ldr	r1, [pc, #196]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003500:	4b2f      	ldr	r3, [pc, #188]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	69db      	ldr	r3, [r3, #28]
 800350c:	021b      	lsls	r3, r3, #8
 800350e:	492c      	ldr	r1, [pc, #176]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 8003510:	4313      	orrs	r3, r2
 8003512:	604b      	str	r3, [r1, #4]
 8003514:	e01a      	b.n	800354c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003516:	4b2a      	ldr	r3, [pc, #168]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a29      	ldr	r2, [pc, #164]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 800351c:	f023 0301 	bic.w	r3, r3, #1
 8003520:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003522:	f7fe f9b7 	bl	8001894 <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003528:	e008      	b.n	800353c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800352a:	f7fe f9b3 	bl	8001894 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e2dd      	b.n	8003af8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800353c:	4b20      	ldr	r3, [pc, #128]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1f0      	bne.n	800352a <HAL_RCC_OscConfig+0x1da>
 8003548:	e000      	b.n	800354c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800354a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b00      	cmp	r3, #0
 8003556:	d074      	beq.n	8003642 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	2b08      	cmp	r3, #8
 800355c:	d005      	beq.n	800356a <HAL_RCC_OscConfig+0x21a>
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	2b0c      	cmp	r3, #12
 8003562:	d10e      	bne.n	8003582 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	2b03      	cmp	r3, #3
 8003568:	d10b      	bne.n	8003582 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800356a:	4b15      	ldr	r3, [pc, #84]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d064      	beq.n	8003640 <HAL_RCC_OscConfig+0x2f0>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d160      	bne.n	8003640 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e2ba      	b.n	8003af8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800358a:	d106      	bne.n	800359a <HAL_RCC_OscConfig+0x24a>
 800358c:	4b0c      	ldr	r3, [pc, #48]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a0b      	ldr	r2, [pc, #44]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 8003592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003596:	6013      	str	r3, [r2, #0]
 8003598:	e026      	b.n	80035e8 <HAL_RCC_OscConfig+0x298>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035a2:	d115      	bne.n	80035d0 <HAL_RCC_OscConfig+0x280>
 80035a4:	4b06      	ldr	r3, [pc, #24]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a05      	ldr	r2, [pc, #20]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 80035aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035ae:	6013      	str	r3, [r2, #0]
 80035b0:	4b03      	ldr	r3, [pc, #12]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a02      	ldr	r2, [pc, #8]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 80035b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ba:	6013      	str	r3, [r2, #0]
 80035bc:	e014      	b.n	80035e8 <HAL_RCC_OscConfig+0x298>
 80035be:	bf00      	nop
 80035c0:	40021000 	.word	0x40021000
 80035c4:	08005c38 	.word	0x08005c38
 80035c8:	20000000 	.word	0x20000000
 80035cc:	20000004 	.word	0x20000004
 80035d0:	4ba0      	ldr	r3, [pc, #640]	; (8003854 <HAL_RCC_OscConfig+0x504>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a9f      	ldr	r2, [pc, #636]	; (8003854 <HAL_RCC_OscConfig+0x504>)
 80035d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035da:	6013      	str	r3, [r2, #0]
 80035dc:	4b9d      	ldr	r3, [pc, #628]	; (8003854 <HAL_RCC_OscConfig+0x504>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a9c      	ldr	r2, [pc, #624]	; (8003854 <HAL_RCC_OscConfig+0x504>)
 80035e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d013      	beq.n	8003618 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f0:	f7fe f950 	bl	8001894 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035f8:	f7fe f94c 	bl	8001894 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b64      	cmp	r3, #100	; 0x64
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e276      	b.n	8003af8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800360a:	4b92      	ldr	r3, [pc, #584]	; (8003854 <HAL_RCC_OscConfig+0x504>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0f0      	beq.n	80035f8 <HAL_RCC_OscConfig+0x2a8>
 8003616:	e014      	b.n	8003642 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003618:	f7fe f93c 	bl	8001894 <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003620:	f7fe f938 	bl	8001894 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b64      	cmp	r3, #100	; 0x64
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e262      	b.n	8003af8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003632:	4b88      	ldr	r3, [pc, #544]	; (8003854 <HAL_RCC_OscConfig+0x504>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1f0      	bne.n	8003620 <HAL_RCC_OscConfig+0x2d0>
 800363e:	e000      	b.n	8003642 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d060      	beq.n	8003710 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	2b04      	cmp	r3, #4
 8003652:	d005      	beq.n	8003660 <HAL_RCC_OscConfig+0x310>
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	2b0c      	cmp	r3, #12
 8003658:	d119      	bne.n	800368e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	2b02      	cmp	r3, #2
 800365e:	d116      	bne.n	800368e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003660:	4b7c      	ldr	r3, [pc, #496]	; (8003854 <HAL_RCC_OscConfig+0x504>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003668:	2b00      	cmp	r3, #0
 800366a:	d005      	beq.n	8003678 <HAL_RCC_OscConfig+0x328>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e23f      	b.n	8003af8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003678:	4b76      	ldr	r3, [pc, #472]	; (8003854 <HAL_RCC_OscConfig+0x504>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	061b      	lsls	r3, r3, #24
 8003686:	4973      	ldr	r1, [pc, #460]	; (8003854 <HAL_RCC_OscConfig+0x504>)
 8003688:	4313      	orrs	r3, r2
 800368a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800368c:	e040      	b.n	8003710 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d023      	beq.n	80036de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003696:	4b6f      	ldr	r3, [pc, #444]	; (8003854 <HAL_RCC_OscConfig+0x504>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a6e      	ldr	r2, [pc, #440]	; (8003854 <HAL_RCC_OscConfig+0x504>)
 800369c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a2:	f7fe f8f7 	bl	8001894 <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036aa:	f7fe f8f3 	bl	8001894 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e21d      	b.n	8003af8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036bc:	4b65      	ldr	r3, [pc, #404]	; (8003854 <HAL_RCC_OscConfig+0x504>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0f0      	beq.n	80036aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c8:	4b62      	ldr	r3, [pc, #392]	; (8003854 <HAL_RCC_OscConfig+0x504>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	061b      	lsls	r3, r3, #24
 80036d6:	495f      	ldr	r1, [pc, #380]	; (8003854 <HAL_RCC_OscConfig+0x504>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	604b      	str	r3, [r1, #4]
 80036dc:	e018      	b.n	8003710 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036de:	4b5d      	ldr	r3, [pc, #372]	; (8003854 <HAL_RCC_OscConfig+0x504>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a5c      	ldr	r2, [pc, #368]	; (8003854 <HAL_RCC_OscConfig+0x504>)
 80036e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ea:	f7fe f8d3 	bl	8001894 <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036f0:	e008      	b.n	8003704 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036f2:	f7fe f8cf 	bl	8001894 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e1f9      	b.n	8003af8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003704:	4b53      	ldr	r3, [pc, #332]	; (8003854 <HAL_RCC_OscConfig+0x504>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1f0      	bne.n	80036f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0308 	and.w	r3, r3, #8
 8003718:	2b00      	cmp	r3, #0
 800371a:	d03c      	beq.n	8003796 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d01c      	beq.n	800375e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003724:	4b4b      	ldr	r3, [pc, #300]	; (8003854 <HAL_RCC_OscConfig+0x504>)
 8003726:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800372a:	4a4a      	ldr	r2, [pc, #296]	; (8003854 <HAL_RCC_OscConfig+0x504>)
 800372c:	f043 0301 	orr.w	r3, r3, #1
 8003730:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003734:	f7fe f8ae 	bl	8001894 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800373c:	f7fe f8aa 	bl	8001894 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e1d4      	b.n	8003af8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800374e:	4b41      	ldr	r3, [pc, #260]	; (8003854 <HAL_RCC_OscConfig+0x504>)
 8003750:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0ef      	beq.n	800373c <HAL_RCC_OscConfig+0x3ec>
 800375c:	e01b      	b.n	8003796 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800375e:	4b3d      	ldr	r3, [pc, #244]	; (8003854 <HAL_RCC_OscConfig+0x504>)
 8003760:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003764:	4a3b      	ldr	r2, [pc, #236]	; (8003854 <HAL_RCC_OscConfig+0x504>)
 8003766:	f023 0301 	bic.w	r3, r3, #1
 800376a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800376e:	f7fe f891 	bl	8001894 <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003776:	f7fe f88d 	bl	8001894 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e1b7      	b.n	8003af8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003788:	4b32      	ldr	r3, [pc, #200]	; (8003854 <HAL_RCC_OscConfig+0x504>)
 800378a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1ef      	bne.n	8003776 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0304 	and.w	r3, r3, #4
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 80a6 	beq.w	80038f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037a4:	2300      	movs	r3, #0
 80037a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80037a8:	4b2a      	ldr	r3, [pc, #168]	; (8003854 <HAL_RCC_OscConfig+0x504>)
 80037aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10d      	bne.n	80037d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037b4:	4b27      	ldr	r3, [pc, #156]	; (8003854 <HAL_RCC_OscConfig+0x504>)
 80037b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b8:	4a26      	ldr	r2, [pc, #152]	; (8003854 <HAL_RCC_OscConfig+0x504>)
 80037ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037be:	6593      	str	r3, [r2, #88]	; 0x58
 80037c0:	4b24      	ldr	r3, [pc, #144]	; (8003854 <HAL_RCC_OscConfig+0x504>)
 80037c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c8:	60bb      	str	r3, [r7, #8]
 80037ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037cc:	2301      	movs	r3, #1
 80037ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037d0:	4b21      	ldr	r3, [pc, #132]	; (8003858 <HAL_RCC_OscConfig+0x508>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d118      	bne.n	800380e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037dc:	4b1e      	ldr	r3, [pc, #120]	; (8003858 <HAL_RCC_OscConfig+0x508>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a1d      	ldr	r2, [pc, #116]	; (8003858 <HAL_RCC_OscConfig+0x508>)
 80037e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037e8:	f7fe f854 	bl	8001894 <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f0:	f7fe f850 	bl	8001894 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e17a      	b.n	8003af8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003802:	4b15      	ldr	r3, [pc, #84]	; (8003858 <HAL_RCC_OscConfig+0x508>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0f0      	beq.n	80037f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d108      	bne.n	8003828 <HAL_RCC_OscConfig+0x4d8>
 8003816:	4b0f      	ldr	r3, [pc, #60]	; (8003854 <HAL_RCC_OscConfig+0x504>)
 8003818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381c:	4a0d      	ldr	r2, [pc, #52]	; (8003854 <HAL_RCC_OscConfig+0x504>)
 800381e:	f043 0301 	orr.w	r3, r3, #1
 8003822:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003826:	e029      	b.n	800387c <HAL_RCC_OscConfig+0x52c>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	2b05      	cmp	r3, #5
 800382e:	d115      	bne.n	800385c <HAL_RCC_OscConfig+0x50c>
 8003830:	4b08      	ldr	r3, [pc, #32]	; (8003854 <HAL_RCC_OscConfig+0x504>)
 8003832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003836:	4a07      	ldr	r2, [pc, #28]	; (8003854 <HAL_RCC_OscConfig+0x504>)
 8003838:	f043 0304 	orr.w	r3, r3, #4
 800383c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003840:	4b04      	ldr	r3, [pc, #16]	; (8003854 <HAL_RCC_OscConfig+0x504>)
 8003842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003846:	4a03      	ldr	r2, [pc, #12]	; (8003854 <HAL_RCC_OscConfig+0x504>)
 8003848:	f043 0301 	orr.w	r3, r3, #1
 800384c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003850:	e014      	b.n	800387c <HAL_RCC_OscConfig+0x52c>
 8003852:	bf00      	nop
 8003854:	40021000 	.word	0x40021000
 8003858:	40007000 	.word	0x40007000
 800385c:	4b9c      	ldr	r3, [pc, #624]	; (8003ad0 <HAL_RCC_OscConfig+0x780>)
 800385e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003862:	4a9b      	ldr	r2, [pc, #620]	; (8003ad0 <HAL_RCC_OscConfig+0x780>)
 8003864:	f023 0301 	bic.w	r3, r3, #1
 8003868:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800386c:	4b98      	ldr	r3, [pc, #608]	; (8003ad0 <HAL_RCC_OscConfig+0x780>)
 800386e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003872:	4a97      	ldr	r2, [pc, #604]	; (8003ad0 <HAL_RCC_OscConfig+0x780>)
 8003874:	f023 0304 	bic.w	r3, r3, #4
 8003878:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d016      	beq.n	80038b2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003884:	f7fe f806 	bl	8001894 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800388a:	e00a      	b.n	80038a2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800388c:	f7fe f802 	bl	8001894 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	f241 3288 	movw	r2, #5000	; 0x1388
 800389a:	4293      	cmp	r3, r2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e12a      	b.n	8003af8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038a2:	4b8b      	ldr	r3, [pc, #556]	; (8003ad0 <HAL_RCC_OscConfig+0x780>)
 80038a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0ed      	beq.n	800388c <HAL_RCC_OscConfig+0x53c>
 80038b0:	e015      	b.n	80038de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b2:	f7fd ffef 	bl	8001894 <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038b8:	e00a      	b.n	80038d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ba:	f7fd ffeb 	bl	8001894 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e113      	b.n	8003af8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038d0:	4b7f      	ldr	r3, [pc, #508]	; (8003ad0 <HAL_RCC_OscConfig+0x780>)
 80038d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1ed      	bne.n	80038ba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038de:	7ffb      	ldrb	r3, [r7, #31]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d105      	bne.n	80038f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038e4:	4b7a      	ldr	r3, [pc, #488]	; (8003ad0 <HAL_RCC_OscConfig+0x780>)
 80038e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e8:	4a79      	ldr	r2, [pc, #484]	; (8003ad0 <HAL_RCC_OscConfig+0x780>)
 80038ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ee:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 80fe 	beq.w	8003af6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fe:	2b02      	cmp	r3, #2
 8003900:	f040 80d0 	bne.w	8003aa4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003904:	4b72      	ldr	r3, [pc, #456]	; (8003ad0 <HAL_RCC_OscConfig+0x780>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f003 0203 	and.w	r2, r3, #3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003914:	429a      	cmp	r2, r3
 8003916:	d130      	bne.n	800397a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	3b01      	subs	r3, #1
 8003924:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003926:	429a      	cmp	r2, r3
 8003928:	d127      	bne.n	800397a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003934:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003936:	429a      	cmp	r2, r3
 8003938:	d11f      	bne.n	800397a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003944:	2a07      	cmp	r2, #7
 8003946:	bf14      	ite	ne
 8003948:	2201      	movne	r2, #1
 800394a:	2200      	moveq	r2, #0
 800394c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800394e:	4293      	cmp	r3, r2
 8003950:	d113      	bne.n	800397a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395c:	085b      	lsrs	r3, r3, #1
 800395e:	3b01      	subs	r3, #1
 8003960:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003962:	429a      	cmp	r2, r3
 8003964:	d109      	bne.n	800397a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003970:	085b      	lsrs	r3, r3, #1
 8003972:	3b01      	subs	r3, #1
 8003974:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003976:	429a      	cmp	r2, r3
 8003978:	d06e      	beq.n	8003a58 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	2b0c      	cmp	r3, #12
 800397e:	d069      	beq.n	8003a54 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003980:	4b53      	ldr	r3, [pc, #332]	; (8003ad0 <HAL_RCC_OscConfig+0x780>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d105      	bne.n	8003998 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800398c:	4b50      	ldr	r3, [pc, #320]	; (8003ad0 <HAL_RCC_OscConfig+0x780>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e0ad      	b.n	8003af8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800399c:	4b4c      	ldr	r3, [pc, #304]	; (8003ad0 <HAL_RCC_OscConfig+0x780>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a4b      	ldr	r2, [pc, #300]	; (8003ad0 <HAL_RCC_OscConfig+0x780>)
 80039a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039a6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039a8:	f7fd ff74 	bl	8001894 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b0:	f7fd ff70 	bl	8001894 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e09a      	b.n	8003af8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039c2:	4b43      	ldr	r3, [pc, #268]	; (8003ad0 <HAL_RCC_OscConfig+0x780>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1f0      	bne.n	80039b0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039ce:	4b40      	ldr	r3, [pc, #256]	; (8003ad0 <HAL_RCC_OscConfig+0x780>)
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	4b40      	ldr	r3, [pc, #256]	; (8003ad4 <HAL_RCC_OscConfig+0x784>)
 80039d4:	4013      	ands	r3, r2
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80039de:	3a01      	subs	r2, #1
 80039e0:	0112      	lsls	r2, r2, #4
 80039e2:	4311      	orrs	r1, r2
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039e8:	0212      	lsls	r2, r2, #8
 80039ea:	4311      	orrs	r1, r2
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80039f0:	0852      	lsrs	r2, r2, #1
 80039f2:	3a01      	subs	r2, #1
 80039f4:	0552      	lsls	r2, r2, #21
 80039f6:	4311      	orrs	r1, r2
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80039fc:	0852      	lsrs	r2, r2, #1
 80039fe:	3a01      	subs	r2, #1
 8003a00:	0652      	lsls	r2, r2, #25
 8003a02:	4311      	orrs	r1, r2
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a08:	0912      	lsrs	r2, r2, #4
 8003a0a:	0452      	lsls	r2, r2, #17
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	4930      	ldr	r1, [pc, #192]	; (8003ad0 <HAL_RCC_OscConfig+0x780>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a14:	4b2e      	ldr	r3, [pc, #184]	; (8003ad0 <HAL_RCC_OscConfig+0x780>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a2d      	ldr	r2, [pc, #180]	; (8003ad0 <HAL_RCC_OscConfig+0x780>)
 8003a1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a1e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a20:	4b2b      	ldr	r3, [pc, #172]	; (8003ad0 <HAL_RCC_OscConfig+0x780>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	4a2a      	ldr	r2, [pc, #168]	; (8003ad0 <HAL_RCC_OscConfig+0x780>)
 8003a26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a2c:	f7fd ff32 	bl	8001894 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a34:	f7fd ff2e 	bl	8001894 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e058      	b.n	8003af8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a46:	4b22      	ldr	r3, [pc, #136]	; (8003ad0 <HAL_RCC_OscConfig+0x780>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a52:	e050      	b.n	8003af6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e04f      	b.n	8003af8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a58:	4b1d      	ldr	r3, [pc, #116]	; (8003ad0 <HAL_RCC_OscConfig+0x780>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d148      	bne.n	8003af6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a64:	4b1a      	ldr	r3, [pc, #104]	; (8003ad0 <HAL_RCC_OscConfig+0x780>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a19      	ldr	r2, [pc, #100]	; (8003ad0 <HAL_RCC_OscConfig+0x780>)
 8003a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a70:	4b17      	ldr	r3, [pc, #92]	; (8003ad0 <HAL_RCC_OscConfig+0x780>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	4a16      	ldr	r2, [pc, #88]	; (8003ad0 <HAL_RCC_OscConfig+0x780>)
 8003a76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a7c:	f7fd ff0a 	bl	8001894 <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a84:	f7fd ff06 	bl	8001894 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e030      	b.n	8003af8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a96:	4b0e      	ldr	r3, [pc, #56]	; (8003ad0 <HAL_RCC_OscConfig+0x780>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0f0      	beq.n	8003a84 <HAL_RCC_OscConfig+0x734>
 8003aa2:	e028      	b.n	8003af6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	2b0c      	cmp	r3, #12
 8003aa8:	d023      	beq.n	8003af2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aaa:	4b09      	ldr	r3, [pc, #36]	; (8003ad0 <HAL_RCC_OscConfig+0x780>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a08      	ldr	r2, [pc, #32]	; (8003ad0 <HAL_RCC_OscConfig+0x780>)
 8003ab0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ab4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab6:	f7fd feed 	bl	8001894 <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003abc:	e00c      	b.n	8003ad8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003abe:	f7fd fee9 	bl	8001894 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d905      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e013      	b.n	8003af8 <HAL_RCC_OscConfig+0x7a8>
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ad8:	4b09      	ldr	r3, [pc, #36]	; (8003b00 <HAL_RCC_OscConfig+0x7b0>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1ec      	bne.n	8003abe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003ae4:	4b06      	ldr	r3, [pc, #24]	; (8003b00 <HAL_RCC_OscConfig+0x7b0>)
 8003ae6:	68da      	ldr	r2, [r3, #12]
 8003ae8:	4905      	ldr	r1, [pc, #20]	; (8003b00 <HAL_RCC_OscConfig+0x7b0>)
 8003aea:	4b06      	ldr	r3, [pc, #24]	; (8003b04 <HAL_RCC_OscConfig+0x7b4>)
 8003aec:	4013      	ands	r3, r2
 8003aee:	60cb      	str	r3, [r1, #12]
 8003af0:	e001      	b.n	8003af6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e000      	b.n	8003af8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3720      	adds	r7, #32
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40021000 	.word	0x40021000
 8003b04:	feeefffc 	.word	0xfeeefffc

08003b08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e0e7      	b.n	8003cec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b1c:	4b75      	ldr	r3, [pc, #468]	; (8003cf4 <HAL_RCC_ClockConfig+0x1ec>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0307 	and.w	r3, r3, #7
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d910      	bls.n	8003b4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b2a:	4b72      	ldr	r3, [pc, #456]	; (8003cf4 <HAL_RCC_ClockConfig+0x1ec>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f023 0207 	bic.w	r2, r3, #7
 8003b32:	4970      	ldr	r1, [pc, #448]	; (8003cf4 <HAL_RCC_ClockConfig+0x1ec>)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b3a:	4b6e      	ldr	r3, [pc, #440]	; (8003cf4 <HAL_RCC_ClockConfig+0x1ec>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d001      	beq.n	8003b4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e0cf      	b.n	8003cec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d010      	beq.n	8003b7a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	4b66      	ldr	r3, [pc, #408]	; (8003cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d908      	bls.n	8003b7a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b68:	4b63      	ldr	r3, [pc, #396]	; (8003cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	4960      	ldr	r1, [pc, #384]	; (8003cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d04c      	beq.n	8003c20 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	2b03      	cmp	r3, #3
 8003b8c:	d107      	bne.n	8003b9e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b8e:	4b5a      	ldr	r3, [pc, #360]	; (8003cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d121      	bne.n	8003bde <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e0a6      	b.n	8003cec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d107      	bne.n	8003bb6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ba6:	4b54      	ldr	r3, [pc, #336]	; (8003cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d115      	bne.n	8003bde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e09a      	b.n	8003cec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d107      	bne.n	8003bce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bbe:	4b4e      	ldr	r3, [pc, #312]	; (8003cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d109      	bne.n	8003bde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e08e      	b.n	8003cec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bce:	4b4a      	ldr	r3, [pc, #296]	; (8003cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e086      	b.n	8003cec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bde:	4b46      	ldr	r3, [pc, #280]	; (8003cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f023 0203 	bic.w	r2, r3, #3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	4943      	ldr	r1, [pc, #268]	; (8003cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bf0:	f7fd fe50 	bl	8001894 <HAL_GetTick>
 8003bf4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bf6:	e00a      	b.n	8003c0e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bf8:	f7fd fe4c 	bl	8001894 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e06e      	b.n	8003cec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c0e:	4b3a      	ldr	r3, [pc, #232]	; (8003cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 020c 	and.w	r2, r3, #12
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d1eb      	bne.n	8003bf8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d010      	beq.n	8003c4e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	4b31      	ldr	r3, [pc, #196]	; (8003cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d208      	bcs.n	8003c4e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c3c:	4b2e      	ldr	r3, [pc, #184]	; (8003cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	492b      	ldr	r1, [pc, #172]	; (8003cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c4e:	4b29      	ldr	r3, [pc, #164]	; (8003cf4 <HAL_RCC_ClockConfig+0x1ec>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d210      	bcs.n	8003c7e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c5c:	4b25      	ldr	r3, [pc, #148]	; (8003cf4 <HAL_RCC_ClockConfig+0x1ec>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f023 0207 	bic.w	r2, r3, #7
 8003c64:	4923      	ldr	r1, [pc, #140]	; (8003cf4 <HAL_RCC_ClockConfig+0x1ec>)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c6c:	4b21      	ldr	r3, [pc, #132]	; (8003cf4 <HAL_RCC_ClockConfig+0x1ec>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d001      	beq.n	8003c7e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e036      	b.n	8003cec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0304 	and.w	r3, r3, #4
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d008      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c8a:	4b1b      	ldr	r3, [pc, #108]	; (8003cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	4918      	ldr	r1, [pc, #96]	; (8003cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0308 	and.w	r3, r3, #8
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d009      	beq.n	8003cbc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ca8:	4b13      	ldr	r3, [pc, #76]	; (8003cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	00db      	lsls	r3, r3, #3
 8003cb6:	4910      	ldr	r1, [pc, #64]	; (8003cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cbc:	f000 f824 	bl	8003d08 <HAL_RCC_GetSysClockFreq>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	4b0d      	ldr	r3, [pc, #52]	; (8003cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	091b      	lsrs	r3, r3, #4
 8003cc8:	f003 030f 	and.w	r3, r3, #15
 8003ccc:	490b      	ldr	r1, [pc, #44]	; (8003cfc <HAL_RCC_ClockConfig+0x1f4>)
 8003cce:	5ccb      	ldrb	r3, [r1, r3]
 8003cd0:	f003 031f 	and.w	r3, r3, #31
 8003cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd8:	4a09      	ldr	r2, [pc, #36]	; (8003d00 <HAL_RCC_ClockConfig+0x1f8>)
 8003cda:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003cdc:	4b09      	ldr	r3, [pc, #36]	; (8003d04 <HAL_RCC_ClockConfig+0x1fc>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7fd fd87 	bl	80017f4 <HAL_InitTick>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	72fb      	strb	r3, [r7, #11]

  return status;
 8003cea:	7afb      	ldrb	r3, [r7, #11]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40022000 	.word	0x40022000
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	08005c38 	.word	0x08005c38
 8003d00:	20000000 	.word	0x20000000
 8003d04:	20000004 	.word	0x20000004

08003d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b089      	sub	sp, #36	; 0x24
 8003d0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	61fb      	str	r3, [r7, #28]
 8003d12:	2300      	movs	r3, #0
 8003d14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d16:	4b3e      	ldr	r3, [pc, #248]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
 8003d1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d20:	4b3b      	ldr	r3, [pc, #236]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f003 0303 	and.w	r3, r3, #3
 8003d28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d005      	beq.n	8003d3c <HAL_RCC_GetSysClockFreq+0x34>
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	2b0c      	cmp	r3, #12
 8003d34:	d121      	bne.n	8003d7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d11e      	bne.n	8003d7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d3c:	4b34      	ldr	r3, [pc, #208]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0308 	and.w	r3, r3, #8
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d107      	bne.n	8003d58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d48:	4b31      	ldr	r3, [pc, #196]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d4e:	0a1b      	lsrs	r3, r3, #8
 8003d50:	f003 030f 	and.w	r3, r3, #15
 8003d54:	61fb      	str	r3, [r7, #28]
 8003d56:	e005      	b.n	8003d64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d58:	4b2d      	ldr	r3, [pc, #180]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	091b      	lsrs	r3, r3, #4
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d64:	4a2b      	ldr	r2, [pc, #172]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10d      	bne.n	8003d90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d78:	e00a      	b.n	8003d90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	2b04      	cmp	r3, #4
 8003d7e:	d102      	bne.n	8003d86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d80:	4b25      	ldr	r3, [pc, #148]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d82:	61bb      	str	r3, [r7, #24]
 8003d84:	e004      	b.n	8003d90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	2b08      	cmp	r3, #8
 8003d8a:	d101      	bne.n	8003d90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d8c:	4b23      	ldr	r3, [pc, #140]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x114>)
 8003d8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	2b0c      	cmp	r3, #12
 8003d94:	d134      	bne.n	8003e00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d96:	4b1e      	ldr	r3, [pc, #120]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f003 0303 	and.w	r3, r3, #3
 8003d9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d003      	beq.n	8003dae <HAL_RCC_GetSysClockFreq+0xa6>
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	2b03      	cmp	r3, #3
 8003daa:	d003      	beq.n	8003db4 <HAL_RCC_GetSysClockFreq+0xac>
 8003dac:	e005      	b.n	8003dba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003dae:	4b1a      	ldr	r3, [pc, #104]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x110>)
 8003db0:	617b      	str	r3, [r7, #20]
      break;
 8003db2:	e005      	b.n	8003dc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003db4:	4b19      	ldr	r3, [pc, #100]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x114>)
 8003db6:	617b      	str	r3, [r7, #20]
      break;
 8003db8:	e002      	b.n	8003dc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	617b      	str	r3, [r7, #20]
      break;
 8003dbe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003dc0:	4b13      	ldr	r3, [pc, #76]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	091b      	lsrs	r3, r3, #4
 8003dc6:	f003 0307 	and.w	r3, r3, #7
 8003dca:	3301      	adds	r3, #1
 8003dcc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003dce:	4b10      	ldr	r3, [pc, #64]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	0a1b      	lsrs	r3, r3, #8
 8003dd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	fb03 f202 	mul.w	r2, r3, r2
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003de6:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	0e5b      	lsrs	r3, r3, #25
 8003dec:	f003 0303 	and.w	r3, r3, #3
 8003df0:	3301      	adds	r3, #1
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e00:	69bb      	ldr	r3, [r7, #24]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3724      	adds	r7, #36	; 0x24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	40021000 	.word	0x40021000
 8003e14:	08005c48 	.word	0x08005c48
 8003e18:	00f42400 	.word	0x00f42400
 8003e1c:	007a1200 	.word	0x007a1200

08003e20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e28:	2300      	movs	r3, #0
 8003e2a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e2c:	4b2a      	ldr	r3, [pc, #168]	; (8003ed8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e38:	f7ff fa26 	bl	8003288 <HAL_PWREx_GetVoltageRange>
 8003e3c:	6178      	str	r0, [r7, #20]
 8003e3e:	e014      	b.n	8003e6a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e40:	4b25      	ldr	r3, [pc, #148]	; (8003ed8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e44:	4a24      	ldr	r2, [pc, #144]	; (8003ed8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e4a:	6593      	str	r3, [r2, #88]	; 0x58
 8003e4c:	4b22      	ldr	r3, [pc, #136]	; (8003ed8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e54:	60fb      	str	r3, [r7, #12]
 8003e56:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e58:	f7ff fa16 	bl	8003288 <HAL_PWREx_GetVoltageRange>
 8003e5c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e5e:	4b1e      	ldr	r3, [pc, #120]	; (8003ed8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e62:	4a1d      	ldr	r2, [pc, #116]	; (8003ed8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e68:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e70:	d10b      	bne.n	8003e8a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b80      	cmp	r3, #128	; 0x80
 8003e76:	d919      	bls.n	8003eac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2ba0      	cmp	r3, #160	; 0xa0
 8003e7c:	d902      	bls.n	8003e84 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e7e:	2302      	movs	r3, #2
 8003e80:	613b      	str	r3, [r7, #16]
 8003e82:	e013      	b.n	8003eac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e84:	2301      	movs	r3, #1
 8003e86:	613b      	str	r3, [r7, #16]
 8003e88:	e010      	b.n	8003eac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b80      	cmp	r3, #128	; 0x80
 8003e8e:	d902      	bls.n	8003e96 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003e90:	2303      	movs	r3, #3
 8003e92:	613b      	str	r3, [r7, #16]
 8003e94:	e00a      	b.n	8003eac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b80      	cmp	r3, #128	; 0x80
 8003e9a:	d102      	bne.n	8003ea2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	613b      	str	r3, [r7, #16]
 8003ea0:	e004      	b.n	8003eac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b70      	cmp	r3, #112	; 0x70
 8003ea6:	d101      	bne.n	8003eac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003eac:	4b0b      	ldr	r3, [pc, #44]	; (8003edc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f023 0207 	bic.w	r2, r3, #7
 8003eb4:	4909      	ldr	r1, [pc, #36]	; (8003edc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ebc:	4b07      	ldr	r3, [pc, #28]	; (8003edc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d001      	beq.n	8003ece <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e000      	b.n	8003ed0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3718      	adds	r7, #24
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	40022000 	.word	0x40022000

08003ee0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ee8:	2300      	movs	r3, #0
 8003eea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003eec:	2300      	movs	r3, #0
 8003eee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d041      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f00:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f04:	d02a      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003f06:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f0a:	d824      	bhi.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f10:	d008      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f16:	d81e      	bhi.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00a      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003f1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f20:	d010      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f22:	e018      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f24:	4b86      	ldr	r3, [pc, #536]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	4a85      	ldr	r2, [pc, #532]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f2e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f30:	e015      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	3304      	adds	r3, #4
 8003f36:	2100      	movs	r1, #0
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f000 fabb 	bl	80044b4 <RCCEx_PLLSAI1_Config>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f42:	e00c      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3320      	adds	r3, #32
 8003f48:	2100      	movs	r1, #0
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 fba6 	bl	800469c <RCCEx_PLLSAI2_Config>
 8003f50:	4603      	mov	r3, r0
 8003f52:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f54:	e003      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	74fb      	strb	r3, [r7, #19]
      break;
 8003f5a:	e000      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003f5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f5e:	7cfb      	ldrb	r3, [r7, #19]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10b      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f64:	4b76      	ldr	r3, [pc, #472]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f72:	4973      	ldr	r1, [pc, #460]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f7a:	e001      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f7c:	7cfb      	ldrb	r3, [r7, #19]
 8003f7e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d041      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f90:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f94:	d02a      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003f96:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f9a:	d824      	bhi.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fa0:	d008      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003fa2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fa6:	d81e      	bhi.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00a      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003fac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fb0:	d010      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003fb2:	e018      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fb4:	4b62      	ldr	r3, [pc, #392]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	4a61      	ldr	r2, [pc, #388]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fbe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fc0:	e015      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 fa73 	bl	80044b4 <RCCEx_PLLSAI1_Config>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fd2:	e00c      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	3320      	adds	r3, #32
 8003fd8:	2100      	movs	r1, #0
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 fb5e 	bl	800469c <RCCEx_PLLSAI2_Config>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fe4:	e003      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	74fb      	strb	r3, [r7, #19]
      break;
 8003fea:	e000      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003fec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fee:	7cfb      	ldrb	r3, [r7, #19]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10b      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ff4:	4b52      	ldr	r3, [pc, #328]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004002:	494f      	ldr	r1, [pc, #316]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004004:	4313      	orrs	r3, r2
 8004006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800400a:	e001      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800400c:	7cfb      	ldrb	r3, [r7, #19]
 800400e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 80a0 	beq.w	800415e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800401e:	2300      	movs	r3, #0
 8004020:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004022:	4b47      	ldr	r3, [pc, #284]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800402e:	2301      	movs	r3, #1
 8004030:	e000      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004032:	2300      	movs	r3, #0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00d      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004038:	4b41      	ldr	r3, [pc, #260]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800403a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403c:	4a40      	ldr	r2, [pc, #256]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800403e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004042:	6593      	str	r3, [r2, #88]	; 0x58
 8004044:	4b3e      	ldr	r3, [pc, #248]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800404c:	60bb      	str	r3, [r7, #8]
 800404e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004050:	2301      	movs	r3, #1
 8004052:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004054:	4b3b      	ldr	r3, [pc, #236]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a3a      	ldr	r2, [pc, #232]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800405a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800405e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004060:	f7fd fc18 	bl	8001894 <HAL_GetTick>
 8004064:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004066:	e009      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004068:	f7fd fc14 	bl	8001894 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b02      	cmp	r3, #2
 8004074:	d902      	bls.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	74fb      	strb	r3, [r7, #19]
        break;
 800407a:	e005      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800407c:	4b31      	ldr	r3, [pc, #196]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0ef      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004088:	7cfb      	ldrb	r3, [r7, #19]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d15c      	bne.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800408e:	4b2c      	ldr	r3, [pc, #176]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004094:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004098:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d01f      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d019      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040ac:	4b24      	ldr	r3, [pc, #144]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040b8:	4b21      	ldr	r3, [pc, #132]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040be:	4a20      	ldr	r2, [pc, #128]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040c8:	4b1d      	ldr	r3, [pc, #116]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ce:	4a1c      	ldr	r2, [pc, #112]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040d8:	4a19      	ldr	r2, [pc, #100]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d016      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ea:	f7fd fbd3 	bl	8001894 <HAL_GetTick>
 80040ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040f0:	e00b      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040f2:	f7fd fbcf 	bl	8001894 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004100:	4293      	cmp	r3, r2
 8004102:	d902      	bls.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	74fb      	strb	r3, [r7, #19]
            break;
 8004108:	e006      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800410a:	4b0d      	ldr	r3, [pc, #52]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800410c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0ec      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004118:	7cfb      	ldrb	r3, [r7, #19]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10c      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800411e:	4b08      	ldr	r3, [pc, #32]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004124:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800412e:	4904      	ldr	r1, [pc, #16]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004130:	4313      	orrs	r3, r2
 8004132:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004136:	e009      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004138:	7cfb      	ldrb	r3, [r7, #19]
 800413a:	74bb      	strb	r3, [r7, #18]
 800413c:	e006      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800413e:	bf00      	nop
 8004140:	40021000 	.word	0x40021000
 8004144:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004148:	7cfb      	ldrb	r3, [r7, #19]
 800414a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800414c:	7c7b      	ldrb	r3, [r7, #17]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d105      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004152:	4b9e      	ldr	r3, [pc, #632]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004156:	4a9d      	ldr	r2, [pc, #628]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004158:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800415c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00a      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800416a:	4b98      	ldr	r3, [pc, #608]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800416c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004170:	f023 0203 	bic.w	r2, r3, #3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004178:	4994      	ldr	r1, [pc, #592]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800417a:	4313      	orrs	r3, r2
 800417c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00a      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800418c:	4b8f      	ldr	r3, [pc, #572]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800418e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004192:	f023 020c 	bic.w	r2, r3, #12
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800419a:	498c      	ldr	r1, [pc, #560]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800419c:	4313      	orrs	r3, r2
 800419e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0304 	and.w	r3, r3, #4
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00a      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041ae:	4b87      	ldr	r3, [pc, #540]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	4983      	ldr	r1, [pc, #524]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0308 	and.w	r3, r3, #8
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00a      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041d0:	4b7e      	ldr	r3, [pc, #504]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041de:	497b      	ldr	r1, [pc, #492]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0310 	and.w	r3, r3, #16
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00a      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041f2:	4b76      	ldr	r3, [pc, #472]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004200:	4972      	ldr	r1, [pc, #456]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004202:	4313      	orrs	r3, r2
 8004204:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0320 	and.w	r3, r3, #32
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00a      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004214:	4b6d      	ldr	r3, [pc, #436]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004222:	496a      	ldr	r1, [pc, #424]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004224:	4313      	orrs	r3, r2
 8004226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00a      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004236:	4b65      	ldr	r3, [pc, #404]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004244:	4961      	ldr	r1, [pc, #388]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004246:	4313      	orrs	r3, r2
 8004248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00a      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004258:	4b5c      	ldr	r3, [pc, #368]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800425a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004266:	4959      	ldr	r1, [pc, #356]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004268:	4313      	orrs	r3, r2
 800426a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00a      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800427a:	4b54      	ldr	r3, [pc, #336]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800427c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004280:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004288:	4950      	ldr	r1, [pc, #320]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800428a:	4313      	orrs	r3, r2
 800428c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00a      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800429c:	4b4b      	ldr	r3, [pc, #300]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800429e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042aa:	4948      	ldr	r1, [pc, #288]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00a      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042be:	4b43      	ldr	r3, [pc, #268]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042cc:	493f      	ldr	r1, [pc, #252]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d028      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042e0:	4b3a      	ldr	r3, [pc, #232]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042ee:	4937      	ldr	r1, [pc, #220]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042fe:	d106      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004300:	4b32      	ldr	r3, [pc, #200]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	4a31      	ldr	r2, [pc, #196]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004306:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800430a:	60d3      	str	r3, [r2, #12]
 800430c:	e011      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004312:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004316:	d10c      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3304      	adds	r3, #4
 800431c:	2101      	movs	r1, #1
 800431e:	4618      	mov	r0, r3
 8004320:	f000 f8c8 	bl	80044b4 <RCCEx_PLLSAI1_Config>
 8004324:	4603      	mov	r3, r0
 8004326:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004328:	7cfb      	ldrb	r3, [r7, #19]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800432e:	7cfb      	ldrb	r3, [r7, #19]
 8004330:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d028      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800433e:	4b23      	ldr	r3, [pc, #140]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004344:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434c:	491f      	ldr	r1, [pc, #124]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004358:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800435c:	d106      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800435e:	4b1b      	ldr	r3, [pc, #108]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	4a1a      	ldr	r2, [pc, #104]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004364:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004368:	60d3      	str	r3, [r2, #12]
 800436a:	e011      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004370:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004374:	d10c      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	3304      	adds	r3, #4
 800437a:	2101      	movs	r1, #1
 800437c:	4618      	mov	r0, r3
 800437e:	f000 f899 	bl	80044b4 <RCCEx_PLLSAI1_Config>
 8004382:	4603      	mov	r3, r0
 8004384:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004386:	7cfb      	ldrb	r3, [r7, #19]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800438c:	7cfb      	ldrb	r3, [r7, #19]
 800438e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d02b      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800439c:	4b0b      	ldr	r3, [pc, #44]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800439e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043aa:	4908      	ldr	r1, [pc, #32]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043ba:	d109      	bne.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043bc:	4b03      	ldr	r3, [pc, #12]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	4a02      	ldr	r2, [pc, #8]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043c6:	60d3      	str	r3, [r2, #12]
 80043c8:	e014      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80043ca:	bf00      	nop
 80043cc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043d8:	d10c      	bne.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	3304      	adds	r3, #4
 80043de:	2101      	movs	r1, #1
 80043e0:	4618      	mov	r0, r3
 80043e2:	f000 f867 	bl	80044b4 <RCCEx_PLLSAI1_Config>
 80043e6:	4603      	mov	r3, r0
 80043e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043ea:	7cfb      	ldrb	r3, [r7, #19]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d001      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80043f0:	7cfb      	ldrb	r3, [r7, #19]
 80043f2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d02f      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004400:	4b2b      	ldr	r3, [pc, #172]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004406:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800440e:	4928      	ldr	r1, [pc, #160]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004410:	4313      	orrs	r3, r2
 8004412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800441a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800441e:	d10d      	bne.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3304      	adds	r3, #4
 8004424:	2102      	movs	r1, #2
 8004426:	4618      	mov	r0, r3
 8004428:	f000 f844 	bl	80044b4 <RCCEx_PLLSAI1_Config>
 800442c:	4603      	mov	r3, r0
 800442e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004430:	7cfb      	ldrb	r3, [r7, #19]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d014      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004436:	7cfb      	ldrb	r3, [r7, #19]
 8004438:	74bb      	strb	r3, [r7, #18]
 800443a:	e011      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004440:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004444:	d10c      	bne.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	3320      	adds	r3, #32
 800444a:	2102      	movs	r1, #2
 800444c:	4618      	mov	r0, r3
 800444e:	f000 f925 	bl	800469c <RCCEx_PLLSAI2_Config>
 8004452:	4603      	mov	r3, r0
 8004454:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004456:	7cfb      	ldrb	r3, [r7, #19]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800445c:	7cfb      	ldrb	r3, [r7, #19]
 800445e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00a      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800446c:	4b10      	ldr	r3, [pc, #64]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800446e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004472:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800447a:	490d      	ldr	r1, [pc, #52]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800447c:	4313      	orrs	r3, r2
 800447e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00b      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800448e:	4b08      	ldr	r3, [pc, #32]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004494:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800449e:	4904      	ldr	r1, [pc, #16]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80044a6:	7cbb      	ldrb	r3, [r7, #18]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3718      	adds	r7, #24
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	40021000 	.word	0x40021000

080044b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044be:	2300      	movs	r3, #0
 80044c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044c2:	4b75      	ldr	r3, [pc, #468]	; (8004698 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	f003 0303 	and.w	r3, r3, #3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d018      	beq.n	8004500 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80044ce:	4b72      	ldr	r3, [pc, #456]	; (8004698 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	f003 0203 	and.w	r2, r3, #3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d10d      	bne.n	80044fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
       ||
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d009      	beq.n	80044fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80044e6:	4b6c      	ldr	r3, [pc, #432]	; (8004698 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	091b      	lsrs	r3, r3, #4
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	1c5a      	adds	r2, r3, #1
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
       ||
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d047      	beq.n	800458a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	73fb      	strb	r3, [r7, #15]
 80044fe:	e044      	b.n	800458a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b03      	cmp	r3, #3
 8004506:	d018      	beq.n	800453a <RCCEx_PLLSAI1_Config+0x86>
 8004508:	2b03      	cmp	r3, #3
 800450a:	d825      	bhi.n	8004558 <RCCEx_PLLSAI1_Config+0xa4>
 800450c:	2b01      	cmp	r3, #1
 800450e:	d002      	beq.n	8004516 <RCCEx_PLLSAI1_Config+0x62>
 8004510:	2b02      	cmp	r3, #2
 8004512:	d009      	beq.n	8004528 <RCCEx_PLLSAI1_Config+0x74>
 8004514:	e020      	b.n	8004558 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004516:	4b60      	ldr	r3, [pc, #384]	; (8004698 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d11d      	bne.n	800455e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004526:	e01a      	b.n	800455e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004528:	4b5b      	ldr	r3, [pc, #364]	; (8004698 <RCCEx_PLLSAI1_Config+0x1e4>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004530:	2b00      	cmp	r3, #0
 8004532:	d116      	bne.n	8004562 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004538:	e013      	b.n	8004562 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800453a:	4b57      	ldr	r3, [pc, #348]	; (8004698 <RCCEx_PLLSAI1_Config+0x1e4>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10f      	bne.n	8004566 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004546:	4b54      	ldr	r3, [pc, #336]	; (8004698 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d109      	bne.n	8004566 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004556:	e006      	b.n	8004566 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	73fb      	strb	r3, [r7, #15]
      break;
 800455c:	e004      	b.n	8004568 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800455e:	bf00      	nop
 8004560:	e002      	b.n	8004568 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004562:	bf00      	nop
 8004564:	e000      	b.n	8004568 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004566:	bf00      	nop
    }

    if(status == HAL_OK)
 8004568:	7bfb      	ldrb	r3, [r7, #15]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10d      	bne.n	800458a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800456e:	4b4a      	ldr	r3, [pc, #296]	; (8004698 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6819      	ldr	r1, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	3b01      	subs	r3, #1
 8004580:	011b      	lsls	r3, r3, #4
 8004582:	430b      	orrs	r3, r1
 8004584:	4944      	ldr	r1, [pc, #272]	; (8004698 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004586:	4313      	orrs	r3, r2
 8004588:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800458a:	7bfb      	ldrb	r3, [r7, #15]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d17d      	bne.n	800468c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004590:	4b41      	ldr	r3, [pc, #260]	; (8004698 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a40      	ldr	r2, [pc, #256]	; (8004698 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004596:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800459a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800459c:	f7fd f97a 	bl	8001894 <HAL_GetTick>
 80045a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045a2:	e009      	b.n	80045b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045a4:	f7fd f976 	bl	8001894 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d902      	bls.n	80045b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	73fb      	strb	r3, [r7, #15]
        break;
 80045b6:	e005      	b.n	80045c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045b8:	4b37      	ldr	r3, [pc, #220]	; (8004698 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1ef      	bne.n	80045a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80045c4:	7bfb      	ldrb	r3, [r7, #15]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d160      	bne.n	800468c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d111      	bne.n	80045f4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045d0:	4b31      	ldr	r3, [pc, #196]	; (8004698 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80045d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6892      	ldr	r2, [r2, #8]
 80045e0:	0211      	lsls	r1, r2, #8
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	68d2      	ldr	r2, [r2, #12]
 80045e6:	0912      	lsrs	r2, r2, #4
 80045e8:	0452      	lsls	r2, r2, #17
 80045ea:	430a      	orrs	r2, r1
 80045ec:	492a      	ldr	r1, [pc, #168]	; (8004698 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	610b      	str	r3, [r1, #16]
 80045f2:	e027      	b.n	8004644 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d112      	bne.n	8004620 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045fa:	4b27      	ldr	r3, [pc, #156]	; (8004698 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004602:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	6892      	ldr	r2, [r2, #8]
 800460a:	0211      	lsls	r1, r2, #8
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	6912      	ldr	r2, [r2, #16]
 8004610:	0852      	lsrs	r2, r2, #1
 8004612:	3a01      	subs	r2, #1
 8004614:	0552      	lsls	r2, r2, #21
 8004616:	430a      	orrs	r2, r1
 8004618:	491f      	ldr	r1, [pc, #124]	; (8004698 <RCCEx_PLLSAI1_Config+0x1e4>)
 800461a:	4313      	orrs	r3, r2
 800461c:	610b      	str	r3, [r1, #16]
 800461e:	e011      	b.n	8004644 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004620:	4b1d      	ldr	r3, [pc, #116]	; (8004698 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004628:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	6892      	ldr	r2, [r2, #8]
 8004630:	0211      	lsls	r1, r2, #8
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6952      	ldr	r2, [r2, #20]
 8004636:	0852      	lsrs	r2, r2, #1
 8004638:	3a01      	subs	r2, #1
 800463a:	0652      	lsls	r2, r2, #25
 800463c:	430a      	orrs	r2, r1
 800463e:	4916      	ldr	r1, [pc, #88]	; (8004698 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004640:	4313      	orrs	r3, r2
 8004642:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004644:	4b14      	ldr	r3, [pc, #80]	; (8004698 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a13      	ldr	r2, [pc, #76]	; (8004698 <RCCEx_PLLSAI1_Config+0x1e4>)
 800464a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800464e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004650:	f7fd f920 	bl	8001894 <HAL_GetTick>
 8004654:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004656:	e009      	b.n	800466c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004658:	f7fd f91c 	bl	8001894 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d902      	bls.n	800466c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	73fb      	strb	r3, [r7, #15]
          break;
 800466a:	e005      	b.n	8004678 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800466c:	4b0a      	ldr	r3, [pc, #40]	; (8004698 <RCCEx_PLLSAI1_Config+0x1e4>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d0ef      	beq.n	8004658 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004678:	7bfb      	ldrb	r3, [r7, #15]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d106      	bne.n	800468c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800467e:	4b06      	ldr	r3, [pc, #24]	; (8004698 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004680:	691a      	ldr	r2, [r3, #16]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	4904      	ldr	r1, [pc, #16]	; (8004698 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004688:	4313      	orrs	r3, r2
 800468a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800468c:	7bfb      	ldrb	r3, [r7, #15]
}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	40021000 	.word	0x40021000

0800469c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046a6:	2300      	movs	r3, #0
 80046a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046aa:	4b6a      	ldr	r3, [pc, #424]	; (8004854 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	f003 0303 	and.w	r3, r3, #3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d018      	beq.n	80046e8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80046b6:	4b67      	ldr	r3, [pc, #412]	; (8004854 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	f003 0203 	and.w	r2, r3, #3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d10d      	bne.n	80046e2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
       ||
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d009      	beq.n	80046e2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80046ce:	4b61      	ldr	r3, [pc, #388]	; (8004854 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	091b      	lsrs	r3, r3, #4
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	1c5a      	adds	r2, r3, #1
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
       ||
 80046de:	429a      	cmp	r2, r3
 80046e0:	d047      	beq.n	8004772 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	73fb      	strb	r3, [r7, #15]
 80046e6:	e044      	b.n	8004772 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b03      	cmp	r3, #3
 80046ee:	d018      	beq.n	8004722 <RCCEx_PLLSAI2_Config+0x86>
 80046f0:	2b03      	cmp	r3, #3
 80046f2:	d825      	bhi.n	8004740 <RCCEx_PLLSAI2_Config+0xa4>
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d002      	beq.n	80046fe <RCCEx_PLLSAI2_Config+0x62>
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d009      	beq.n	8004710 <RCCEx_PLLSAI2_Config+0x74>
 80046fc:	e020      	b.n	8004740 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046fe:	4b55      	ldr	r3, [pc, #340]	; (8004854 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d11d      	bne.n	8004746 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800470e:	e01a      	b.n	8004746 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004710:	4b50      	ldr	r3, [pc, #320]	; (8004854 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004718:	2b00      	cmp	r3, #0
 800471a:	d116      	bne.n	800474a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004720:	e013      	b.n	800474a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004722:	4b4c      	ldr	r3, [pc, #304]	; (8004854 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10f      	bne.n	800474e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800472e:	4b49      	ldr	r3, [pc, #292]	; (8004854 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d109      	bne.n	800474e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800473e:	e006      	b.n	800474e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	73fb      	strb	r3, [r7, #15]
      break;
 8004744:	e004      	b.n	8004750 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004746:	bf00      	nop
 8004748:	e002      	b.n	8004750 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800474a:	bf00      	nop
 800474c:	e000      	b.n	8004750 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800474e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004750:	7bfb      	ldrb	r3, [r7, #15]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10d      	bne.n	8004772 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004756:	4b3f      	ldr	r3, [pc, #252]	; (8004854 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6819      	ldr	r1, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	3b01      	subs	r3, #1
 8004768:	011b      	lsls	r3, r3, #4
 800476a:	430b      	orrs	r3, r1
 800476c:	4939      	ldr	r1, [pc, #228]	; (8004854 <RCCEx_PLLSAI2_Config+0x1b8>)
 800476e:	4313      	orrs	r3, r2
 8004770:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004772:	7bfb      	ldrb	r3, [r7, #15]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d167      	bne.n	8004848 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004778:	4b36      	ldr	r3, [pc, #216]	; (8004854 <RCCEx_PLLSAI2_Config+0x1b8>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a35      	ldr	r2, [pc, #212]	; (8004854 <RCCEx_PLLSAI2_Config+0x1b8>)
 800477e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004782:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004784:	f7fd f886 	bl	8001894 <HAL_GetTick>
 8004788:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800478a:	e009      	b.n	80047a0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800478c:	f7fd f882 	bl	8001894 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d902      	bls.n	80047a0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	73fb      	strb	r3, [r7, #15]
        break;
 800479e:	e005      	b.n	80047ac <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047a0:	4b2c      	ldr	r3, [pc, #176]	; (8004854 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1ef      	bne.n	800478c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d14a      	bne.n	8004848 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d111      	bne.n	80047dc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047b8:	4b26      	ldr	r3, [pc, #152]	; (8004854 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80047c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6892      	ldr	r2, [r2, #8]
 80047c8:	0211      	lsls	r1, r2, #8
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	68d2      	ldr	r2, [r2, #12]
 80047ce:	0912      	lsrs	r2, r2, #4
 80047d0:	0452      	lsls	r2, r2, #17
 80047d2:	430a      	orrs	r2, r1
 80047d4:	491f      	ldr	r1, [pc, #124]	; (8004854 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	614b      	str	r3, [r1, #20]
 80047da:	e011      	b.n	8004800 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047dc:	4b1d      	ldr	r3, [pc, #116]	; (8004854 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80047e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	6892      	ldr	r2, [r2, #8]
 80047ec:	0211      	lsls	r1, r2, #8
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	6912      	ldr	r2, [r2, #16]
 80047f2:	0852      	lsrs	r2, r2, #1
 80047f4:	3a01      	subs	r2, #1
 80047f6:	0652      	lsls	r2, r2, #25
 80047f8:	430a      	orrs	r2, r1
 80047fa:	4916      	ldr	r1, [pc, #88]	; (8004854 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004800:	4b14      	ldr	r3, [pc, #80]	; (8004854 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a13      	ldr	r2, [pc, #76]	; (8004854 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800480a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800480c:	f7fd f842 	bl	8001894 <HAL_GetTick>
 8004810:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004812:	e009      	b.n	8004828 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004814:	f7fd f83e 	bl	8001894 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d902      	bls.n	8004828 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	73fb      	strb	r3, [r7, #15]
          break;
 8004826:	e005      	b.n	8004834 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004828:	4b0a      	ldr	r3, [pc, #40]	; (8004854 <RCCEx_PLLSAI2_Config+0x1b8>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0ef      	beq.n	8004814 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004834:	7bfb      	ldrb	r3, [r7, #15]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d106      	bne.n	8004848 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800483a:	4b06      	ldr	r3, [pc, #24]	; (8004854 <RCCEx_PLLSAI2_Config+0x1b8>)
 800483c:	695a      	ldr	r2, [r3, #20]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	4904      	ldr	r1, [pc, #16]	; (8004854 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004844:	4313      	orrs	r3, r2
 8004846:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004848:	7bfb      	ldrb	r3, [r7, #15]
}
 800484a:	4618      	mov	r0, r3
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	40021000 	.word	0x40021000

08004858 <srand>:
 8004858:	b538      	push	{r3, r4, r5, lr}
 800485a:	4b10      	ldr	r3, [pc, #64]	; (800489c <srand+0x44>)
 800485c:	681d      	ldr	r5, [r3, #0]
 800485e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004860:	4604      	mov	r4, r0
 8004862:	b9b3      	cbnz	r3, 8004892 <srand+0x3a>
 8004864:	2018      	movs	r0, #24
 8004866:	f000 fa5d 	bl	8004d24 <malloc>
 800486a:	4602      	mov	r2, r0
 800486c:	6328      	str	r0, [r5, #48]	; 0x30
 800486e:	b920      	cbnz	r0, 800487a <srand+0x22>
 8004870:	4b0b      	ldr	r3, [pc, #44]	; (80048a0 <srand+0x48>)
 8004872:	480c      	ldr	r0, [pc, #48]	; (80048a4 <srand+0x4c>)
 8004874:	2146      	movs	r1, #70	; 0x46
 8004876:	f000 f9eb 	bl	8004c50 <__assert_func>
 800487a:	490b      	ldr	r1, [pc, #44]	; (80048a8 <srand+0x50>)
 800487c:	4b0b      	ldr	r3, [pc, #44]	; (80048ac <srand+0x54>)
 800487e:	e9c0 1300 	strd	r1, r3, [r0]
 8004882:	4b0b      	ldr	r3, [pc, #44]	; (80048b0 <srand+0x58>)
 8004884:	6083      	str	r3, [r0, #8]
 8004886:	230b      	movs	r3, #11
 8004888:	8183      	strh	r3, [r0, #12]
 800488a:	2100      	movs	r1, #0
 800488c:	2001      	movs	r0, #1
 800488e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004892:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004894:	2200      	movs	r2, #0
 8004896:	611c      	str	r4, [r3, #16]
 8004898:	615a      	str	r2, [r3, #20]
 800489a:	bd38      	pop	{r3, r4, r5, pc}
 800489c:	20000064 	.word	0x20000064
 80048a0:	08005c78 	.word	0x08005c78
 80048a4:	08005c8f 	.word	0x08005c8f
 80048a8:	abcd330e 	.word	0xabcd330e
 80048ac:	e66d1234 	.word	0xe66d1234
 80048b0:	0005deec 	.word	0x0005deec

080048b4 <std>:
 80048b4:	2300      	movs	r3, #0
 80048b6:	b510      	push	{r4, lr}
 80048b8:	4604      	mov	r4, r0
 80048ba:	e9c0 3300 	strd	r3, r3, [r0]
 80048be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80048c2:	6083      	str	r3, [r0, #8]
 80048c4:	8181      	strh	r1, [r0, #12]
 80048c6:	6643      	str	r3, [r0, #100]	; 0x64
 80048c8:	81c2      	strh	r2, [r0, #14]
 80048ca:	6183      	str	r3, [r0, #24]
 80048cc:	4619      	mov	r1, r3
 80048ce:	2208      	movs	r2, #8
 80048d0:	305c      	adds	r0, #92	; 0x5c
 80048d2:	f000 f914 	bl	8004afe <memset>
 80048d6:	4b0d      	ldr	r3, [pc, #52]	; (800490c <std+0x58>)
 80048d8:	6263      	str	r3, [r4, #36]	; 0x24
 80048da:	4b0d      	ldr	r3, [pc, #52]	; (8004910 <std+0x5c>)
 80048dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80048de:	4b0d      	ldr	r3, [pc, #52]	; (8004914 <std+0x60>)
 80048e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80048e2:	4b0d      	ldr	r3, [pc, #52]	; (8004918 <std+0x64>)
 80048e4:	6323      	str	r3, [r4, #48]	; 0x30
 80048e6:	4b0d      	ldr	r3, [pc, #52]	; (800491c <std+0x68>)
 80048e8:	6224      	str	r4, [r4, #32]
 80048ea:	429c      	cmp	r4, r3
 80048ec:	d006      	beq.n	80048fc <std+0x48>
 80048ee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80048f2:	4294      	cmp	r4, r2
 80048f4:	d002      	beq.n	80048fc <std+0x48>
 80048f6:	33d0      	adds	r3, #208	; 0xd0
 80048f8:	429c      	cmp	r4, r3
 80048fa:	d105      	bne.n	8004908 <std+0x54>
 80048fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004904:	f000 b9a0 	b.w	8004c48 <__retarget_lock_init_recursive>
 8004908:	bd10      	pop	{r4, pc}
 800490a:	bf00      	nop
 800490c:	08004a79 	.word	0x08004a79
 8004910:	08004a9b 	.word	0x08004a9b
 8004914:	08004ad3 	.word	0x08004ad3
 8004918:	08004af7 	.word	0x08004af7
 800491c:	200000f0 	.word	0x200000f0

08004920 <stdio_exit_handler>:
 8004920:	4a02      	ldr	r2, [pc, #8]	; (800492c <stdio_exit_handler+0xc>)
 8004922:	4903      	ldr	r1, [pc, #12]	; (8004930 <stdio_exit_handler+0x10>)
 8004924:	4803      	ldr	r0, [pc, #12]	; (8004934 <stdio_exit_handler+0x14>)
 8004926:	f000 b869 	b.w	80049fc <_fwalk_sglue>
 800492a:	bf00      	nop
 800492c:	2000000c 	.word	0x2000000c
 8004930:	08005569 	.word	0x08005569
 8004934:	20000018 	.word	0x20000018

08004938 <cleanup_stdio>:
 8004938:	6841      	ldr	r1, [r0, #4]
 800493a:	4b0c      	ldr	r3, [pc, #48]	; (800496c <cleanup_stdio+0x34>)
 800493c:	4299      	cmp	r1, r3
 800493e:	b510      	push	{r4, lr}
 8004940:	4604      	mov	r4, r0
 8004942:	d001      	beq.n	8004948 <cleanup_stdio+0x10>
 8004944:	f000 fe10 	bl	8005568 <_fflush_r>
 8004948:	68a1      	ldr	r1, [r4, #8]
 800494a:	4b09      	ldr	r3, [pc, #36]	; (8004970 <cleanup_stdio+0x38>)
 800494c:	4299      	cmp	r1, r3
 800494e:	d002      	beq.n	8004956 <cleanup_stdio+0x1e>
 8004950:	4620      	mov	r0, r4
 8004952:	f000 fe09 	bl	8005568 <_fflush_r>
 8004956:	68e1      	ldr	r1, [r4, #12]
 8004958:	4b06      	ldr	r3, [pc, #24]	; (8004974 <cleanup_stdio+0x3c>)
 800495a:	4299      	cmp	r1, r3
 800495c:	d004      	beq.n	8004968 <cleanup_stdio+0x30>
 800495e:	4620      	mov	r0, r4
 8004960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004964:	f000 be00 	b.w	8005568 <_fflush_r>
 8004968:	bd10      	pop	{r4, pc}
 800496a:	bf00      	nop
 800496c:	200000f0 	.word	0x200000f0
 8004970:	20000158 	.word	0x20000158
 8004974:	200001c0 	.word	0x200001c0

08004978 <global_stdio_init.part.0>:
 8004978:	b510      	push	{r4, lr}
 800497a:	4b0b      	ldr	r3, [pc, #44]	; (80049a8 <global_stdio_init.part.0+0x30>)
 800497c:	4c0b      	ldr	r4, [pc, #44]	; (80049ac <global_stdio_init.part.0+0x34>)
 800497e:	4a0c      	ldr	r2, [pc, #48]	; (80049b0 <global_stdio_init.part.0+0x38>)
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	4620      	mov	r0, r4
 8004984:	2200      	movs	r2, #0
 8004986:	2104      	movs	r1, #4
 8004988:	f7ff ff94 	bl	80048b4 <std>
 800498c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004990:	2201      	movs	r2, #1
 8004992:	2109      	movs	r1, #9
 8004994:	f7ff ff8e 	bl	80048b4 <std>
 8004998:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800499c:	2202      	movs	r2, #2
 800499e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049a2:	2112      	movs	r1, #18
 80049a4:	f7ff bf86 	b.w	80048b4 <std>
 80049a8:	20000228 	.word	0x20000228
 80049ac:	200000f0 	.word	0x200000f0
 80049b0:	08004921 	.word	0x08004921

080049b4 <__sfp_lock_acquire>:
 80049b4:	4801      	ldr	r0, [pc, #4]	; (80049bc <__sfp_lock_acquire+0x8>)
 80049b6:	f000 b948 	b.w	8004c4a <__retarget_lock_acquire_recursive>
 80049ba:	bf00      	nop
 80049bc:	20000231 	.word	0x20000231

080049c0 <__sfp_lock_release>:
 80049c0:	4801      	ldr	r0, [pc, #4]	; (80049c8 <__sfp_lock_release+0x8>)
 80049c2:	f000 b943 	b.w	8004c4c <__retarget_lock_release_recursive>
 80049c6:	bf00      	nop
 80049c8:	20000231 	.word	0x20000231

080049cc <__sinit>:
 80049cc:	b510      	push	{r4, lr}
 80049ce:	4604      	mov	r4, r0
 80049d0:	f7ff fff0 	bl	80049b4 <__sfp_lock_acquire>
 80049d4:	6a23      	ldr	r3, [r4, #32]
 80049d6:	b11b      	cbz	r3, 80049e0 <__sinit+0x14>
 80049d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049dc:	f7ff bff0 	b.w	80049c0 <__sfp_lock_release>
 80049e0:	4b04      	ldr	r3, [pc, #16]	; (80049f4 <__sinit+0x28>)
 80049e2:	6223      	str	r3, [r4, #32]
 80049e4:	4b04      	ldr	r3, [pc, #16]	; (80049f8 <__sinit+0x2c>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1f5      	bne.n	80049d8 <__sinit+0xc>
 80049ec:	f7ff ffc4 	bl	8004978 <global_stdio_init.part.0>
 80049f0:	e7f2      	b.n	80049d8 <__sinit+0xc>
 80049f2:	bf00      	nop
 80049f4:	08004939 	.word	0x08004939
 80049f8:	20000228 	.word	0x20000228

080049fc <_fwalk_sglue>:
 80049fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a00:	4607      	mov	r7, r0
 8004a02:	4688      	mov	r8, r1
 8004a04:	4614      	mov	r4, r2
 8004a06:	2600      	movs	r6, #0
 8004a08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a0c:	f1b9 0901 	subs.w	r9, r9, #1
 8004a10:	d505      	bpl.n	8004a1e <_fwalk_sglue+0x22>
 8004a12:	6824      	ldr	r4, [r4, #0]
 8004a14:	2c00      	cmp	r4, #0
 8004a16:	d1f7      	bne.n	8004a08 <_fwalk_sglue+0xc>
 8004a18:	4630      	mov	r0, r6
 8004a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a1e:	89ab      	ldrh	r3, [r5, #12]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d907      	bls.n	8004a34 <_fwalk_sglue+0x38>
 8004a24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	d003      	beq.n	8004a34 <_fwalk_sglue+0x38>
 8004a2c:	4629      	mov	r1, r5
 8004a2e:	4638      	mov	r0, r7
 8004a30:	47c0      	blx	r8
 8004a32:	4306      	orrs	r6, r0
 8004a34:	3568      	adds	r5, #104	; 0x68
 8004a36:	e7e9      	b.n	8004a0c <_fwalk_sglue+0x10>

08004a38 <siprintf>:
 8004a38:	b40e      	push	{r1, r2, r3}
 8004a3a:	b500      	push	{lr}
 8004a3c:	b09c      	sub	sp, #112	; 0x70
 8004a3e:	ab1d      	add	r3, sp, #116	; 0x74
 8004a40:	9002      	str	r0, [sp, #8]
 8004a42:	9006      	str	r0, [sp, #24]
 8004a44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a48:	4809      	ldr	r0, [pc, #36]	; (8004a70 <siprintf+0x38>)
 8004a4a:	9107      	str	r1, [sp, #28]
 8004a4c:	9104      	str	r1, [sp, #16]
 8004a4e:	4909      	ldr	r1, [pc, #36]	; (8004a74 <siprintf+0x3c>)
 8004a50:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a54:	9105      	str	r1, [sp, #20]
 8004a56:	6800      	ldr	r0, [r0, #0]
 8004a58:	9301      	str	r3, [sp, #4]
 8004a5a:	a902      	add	r1, sp, #8
 8004a5c:	f000 fa70 	bl	8004f40 <_svfiprintf_r>
 8004a60:	9b02      	ldr	r3, [sp, #8]
 8004a62:	2200      	movs	r2, #0
 8004a64:	701a      	strb	r2, [r3, #0]
 8004a66:	b01c      	add	sp, #112	; 0x70
 8004a68:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a6c:	b003      	add	sp, #12
 8004a6e:	4770      	bx	lr
 8004a70:	20000064 	.word	0x20000064
 8004a74:	ffff0208 	.word	0xffff0208

08004a78 <__sread>:
 8004a78:	b510      	push	{r4, lr}
 8004a7a:	460c      	mov	r4, r1
 8004a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a80:	f000 f894 	bl	8004bac <_read_r>
 8004a84:	2800      	cmp	r0, #0
 8004a86:	bfab      	itete	ge
 8004a88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a8a:	89a3      	ldrhlt	r3, [r4, #12]
 8004a8c:	181b      	addge	r3, r3, r0
 8004a8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a92:	bfac      	ite	ge
 8004a94:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a96:	81a3      	strhlt	r3, [r4, #12]
 8004a98:	bd10      	pop	{r4, pc}

08004a9a <__swrite>:
 8004a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a9e:	461f      	mov	r7, r3
 8004aa0:	898b      	ldrh	r3, [r1, #12]
 8004aa2:	05db      	lsls	r3, r3, #23
 8004aa4:	4605      	mov	r5, r0
 8004aa6:	460c      	mov	r4, r1
 8004aa8:	4616      	mov	r6, r2
 8004aaa:	d505      	bpl.n	8004ab8 <__swrite+0x1e>
 8004aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f000 f868 	bl	8004b88 <_lseek_r>
 8004ab8:	89a3      	ldrh	r3, [r4, #12]
 8004aba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004abe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ac2:	81a3      	strh	r3, [r4, #12]
 8004ac4:	4632      	mov	r2, r6
 8004ac6:	463b      	mov	r3, r7
 8004ac8:	4628      	mov	r0, r5
 8004aca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ace:	f000 b87f 	b.w	8004bd0 <_write_r>

08004ad2 <__sseek>:
 8004ad2:	b510      	push	{r4, lr}
 8004ad4:	460c      	mov	r4, r1
 8004ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ada:	f000 f855 	bl	8004b88 <_lseek_r>
 8004ade:	1c43      	adds	r3, r0, #1
 8004ae0:	89a3      	ldrh	r3, [r4, #12]
 8004ae2:	bf15      	itete	ne
 8004ae4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004ae6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004aea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004aee:	81a3      	strheq	r3, [r4, #12]
 8004af0:	bf18      	it	ne
 8004af2:	81a3      	strhne	r3, [r4, #12]
 8004af4:	bd10      	pop	{r4, pc}

08004af6 <__sclose>:
 8004af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004afa:	f000 b823 	b.w	8004b44 <_close_r>

08004afe <memset>:
 8004afe:	4402      	add	r2, r0
 8004b00:	4603      	mov	r3, r0
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d100      	bne.n	8004b08 <memset+0xa>
 8004b06:	4770      	bx	lr
 8004b08:	f803 1b01 	strb.w	r1, [r3], #1
 8004b0c:	e7f9      	b.n	8004b02 <memset+0x4>
	...

08004b10 <time>:
 8004b10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004b12:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <time+0x30>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	4669      	mov	r1, sp
 8004b18:	4604      	mov	r4, r0
 8004b1a:	6818      	ldr	r0, [r3, #0]
 8004b1c:	f000 f822 	bl	8004b64 <_gettimeofday_r>
 8004b20:	2800      	cmp	r0, #0
 8004b22:	bfbe      	ittt	lt
 8004b24:	f04f 32ff 	movlt.w	r2, #4294967295
 8004b28:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b2c:	e9cd 2300 	strdlt	r2, r3, [sp]
 8004b30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b34:	b10c      	cbz	r4, 8004b3a <time+0x2a>
 8004b36:	e9c4 0100 	strd	r0, r1, [r4]
 8004b3a:	b004      	add	sp, #16
 8004b3c:	bd10      	pop	{r4, pc}
 8004b3e:	bf00      	nop
 8004b40:	20000064 	.word	0x20000064

08004b44 <_close_r>:
 8004b44:	b538      	push	{r3, r4, r5, lr}
 8004b46:	4d06      	ldr	r5, [pc, #24]	; (8004b60 <_close_r+0x1c>)
 8004b48:	2300      	movs	r3, #0
 8004b4a:	4604      	mov	r4, r0
 8004b4c:	4608      	mov	r0, r1
 8004b4e:	602b      	str	r3, [r5, #0]
 8004b50:	f7fc fd91 	bl	8001676 <_close>
 8004b54:	1c43      	adds	r3, r0, #1
 8004b56:	d102      	bne.n	8004b5e <_close_r+0x1a>
 8004b58:	682b      	ldr	r3, [r5, #0]
 8004b5a:	b103      	cbz	r3, 8004b5e <_close_r+0x1a>
 8004b5c:	6023      	str	r3, [r4, #0]
 8004b5e:	bd38      	pop	{r3, r4, r5, pc}
 8004b60:	2000022c 	.word	0x2000022c

08004b64 <_gettimeofday_r>:
 8004b64:	b538      	push	{r3, r4, r5, lr}
 8004b66:	4d07      	ldr	r5, [pc, #28]	; (8004b84 <_gettimeofday_r+0x20>)
 8004b68:	2300      	movs	r3, #0
 8004b6a:	4604      	mov	r4, r0
 8004b6c:	4608      	mov	r0, r1
 8004b6e:	4611      	mov	r1, r2
 8004b70:	602b      	str	r3, [r5, #0]
 8004b72:	f001 f84b 	bl	8005c0c <_gettimeofday>
 8004b76:	1c43      	adds	r3, r0, #1
 8004b78:	d102      	bne.n	8004b80 <_gettimeofday_r+0x1c>
 8004b7a:	682b      	ldr	r3, [r5, #0]
 8004b7c:	b103      	cbz	r3, 8004b80 <_gettimeofday_r+0x1c>
 8004b7e:	6023      	str	r3, [r4, #0]
 8004b80:	bd38      	pop	{r3, r4, r5, pc}
 8004b82:	bf00      	nop
 8004b84:	2000022c 	.word	0x2000022c

08004b88 <_lseek_r>:
 8004b88:	b538      	push	{r3, r4, r5, lr}
 8004b8a:	4d07      	ldr	r5, [pc, #28]	; (8004ba8 <_lseek_r+0x20>)
 8004b8c:	4604      	mov	r4, r0
 8004b8e:	4608      	mov	r0, r1
 8004b90:	4611      	mov	r1, r2
 8004b92:	2200      	movs	r2, #0
 8004b94:	602a      	str	r2, [r5, #0]
 8004b96:	461a      	mov	r2, r3
 8004b98:	f7fc fd94 	bl	80016c4 <_lseek>
 8004b9c:	1c43      	adds	r3, r0, #1
 8004b9e:	d102      	bne.n	8004ba6 <_lseek_r+0x1e>
 8004ba0:	682b      	ldr	r3, [r5, #0]
 8004ba2:	b103      	cbz	r3, 8004ba6 <_lseek_r+0x1e>
 8004ba4:	6023      	str	r3, [r4, #0]
 8004ba6:	bd38      	pop	{r3, r4, r5, pc}
 8004ba8:	2000022c 	.word	0x2000022c

08004bac <_read_r>:
 8004bac:	b538      	push	{r3, r4, r5, lr}
 8004bae:	4d07      	ldr	r5, [pc, #28]	; (8004bcc <_read_r+0x20>)
 8004bb0:	4604      	mov	r4, r0
 8004bb2:	4608      	mov	r0, r1
 8004bb4:	4611      	mov	r1, r2
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	602a      	str	r2, [r5, #0]
 8004bba:	461a      	mov	r2, r3
 8004bbc:	f7fc fd22 	bl	8001604 <_read>
 8004bc0:	1c43      	adds	r3, r0, #1
 8004bc2:	d102      	bne.n	8004bca <_read_r+0x1e>
 8004bc4:	682b      	ldr	r3, [r5, #0]
 8004bc6:	b103      	cbz	r3, 8004bca <_read_r+0x1e>
 8004bc8:	6023      	str	r3, [r4, #0]
 8004bca:	bd38      	pop	{r3, r4, r5, pc}
 8004bcc:	2000022c 	.word	0x2000022c

08004bd0 <_write_r>:
 8004bd0:	b538      	push	{r3, r4, r5, lr}
 8004bd2:	4d07      	ldr	r5, [pc, #28]	; (8004bf0 <_write_r+0x20>)
 8004bd4:	4604      	mov	r4, r0
 8004bd6:	4608      	mov	r0, r1
 8004bd8:	4611      	mov	r1, r2
 8004bda:	2200      	movs	r2, #0
 8004bdc:	602a      	str	r2, [r5, #0]
 8004bde:	461a      	mov	r2, r3
 8004be0:	f7fc fd2d 	bl	800163e <_write>
 8004be4:	1c43      	adds	r3, r0, #1
 8004be6:	d102      	bne.n	8004bee <_write_r+0x1e>
 8004be8:	682b      	ldr	r3, [r5, #0]
 8004bea:	b103      	cbz	r3, 8004bee <_write_r+0x1e>
 8004bec:	6023      	str	r3, [r4, #0]
 8004bee:	bd38      	pop	{r3, r4, r5, pc}
 8004bf0:	2000022c 	.word	0x2000022c

08004bf4 <__errno>:
 8004bf4:	4b01      	ldr	r3, [pc, #4]	; (8004bfc <__errno+0x8>)
 8004bf6:	6818      	ldr	r0, [r3, #0]
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	20000064 	.word	0x20000064

08004c00 <__libc_init_array>:
 8004c00:	b570      	push	{r4, r5, r6, lr}
 8004c02:	4d0d      	ldr	r5, [pc, #52]	; (8004c38 <__libc_init_array+0x38>)
 8004c04:	4c0d      	ldr	r4, [pc, #52]	; (8004c3c <__libc_init_array+0x3c>)
 8004c06:	1b64      	subs	r4, r4, r5
 8004c08:	10a4      	asrs	r4, r4, #2
 8004c0a:	2600      	movs	r6, #0
 8004c0c:	42a6      	cmp	r6, r4
 8004c0e:	d109      	bne.n	8004c24 <__libc_init_array+0x24>
 8004c10:	4d0b      	ldr	r5, [pc, #44]	; (8004c40 <__libc_init_array+0x40>)
 8004c12:	4c0c      	ldr	r4, [pc, #48]	; (8004c44 <__libc_init_array+0x44>)
 8004c14:	f001 f802 	bl	8005c1c <_init>
 8004c18:	1b64      	subs	r4, r4, r5
 8004c1a:	10a4      	asrs	r4, r4, #2
 8004c1c:	2600      	movs	r6, #0
 8004c1e:	42a6      	cmp	r6, r4
 8004c20:	d105      	bne.n	8004c2e <__libc_init_array+0x2e>
 8004c22:	bd70      	pop	{r4, r5, r6, pc}
 8004c24:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c28:	4798      	blx	r3
 8004c2a:	3601      	adds	r6, #1
 8004c2c:	e7ee      	b.n	8004c0c <__libc_init_array+0xc>
 8004c2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c32:	4798      	blx	r3
 8004c34:	3601      	adds	r6, #1
 8004c36:	e7f2      	b.n	8004c1e <__libc_init_array+0x1e>
 8004c38:	08005d58 	.word	0x08005d58
 8004c3c:	08005d58 	.word	0x08005d58
 8004c40:	08005d58 	.word	0x08005d58
 8004c44:	08005d5c 	.word	0x08005d5c

08004c48 <__retarget_lock_init_recursive>:
 8004c48:	4770      	bx	lr

08004c4a <__retarget_lock_acquire_recursive>:
 8004c4a:	4770      	bx	lr

08004c4c <__retarget_lock_release_recursive>:
 8004c4c:	4770      	bx	lr
	...

08004c50 <__assert_func>:
 8004c50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004c52:	4614      	mov	r4, r2
 8004c54:	461a      	mov	r2, r3
 8004c56:	4b09      	ldr	r3, [pc, #36]	; (8004c7c <__assert_func+0x2c>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4605      	mov	r5, r0
 8004c5c:	68d8      	ldr	r0, [r3, #12]
 8004c5e:	b14c      	cbz	r4, 8004c74 <__assert_func+0x24>
 8004c60:	4b07      	ldr	r3, [pc, #28]	; (8004c80 <__assert_func+0x30>)
 8004c62:	9100      	str	r1, [sp, #0]
 8004c64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004c68:	4906      	ldr	r1, [pc, #24]	; (8004c84 <__assert_func+0x34>)
 8004c6a:	462b      	mov	r3, r5
 8004c6c:	f000 fca4 	bl	80055b8 <fiprintf>
 8004c70:	f000 fcec 	bl	800564c <abort>
 8004c74:	4b04      	ldr	r3, [pc, #16]	; (8004c88 <__assert_func+0x38>)
 8004c76:	461c      	mov	r4, r3
 8004c78:	e7f3      	b.n	8004c62 <__assert_func+0x12>
 8004c7a:	bf00      	nop
 8004c7c:	20000064 	.word	0x20000064
 8004c80:	08005ce7 	.word	0x08005ce7
 8004c84:	08005cf4 	.word	0x08005cf4
 8004c88:	08005d22 	.word	0x08005d22

08004c8c <_free_r>:
 8004c8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c8e:	2900      	cmp	r1, #0
 8004c90:	d044      	beq.n	8004d1c <_free_r+0x90>
 8004c92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c96:	9001      	str	r0, [sp, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f1a1 0404 	sub.w	r4, r1, #4
 8004c9e:	bfb8      	it	lt
 8004ca0:	18e4      	addlt	r4, r4, r3
 8004ca2:	f000 f8e7 	bl	8004e74 <__malloc_lock>
 8004ca6:	4a1e      	ldr	r2, [pc, #120]	; (8004d20 <_free_r+0x94>)
 8004ca8:	9801      	ldr	r0, [sp, #4]
 8004caa:	6813      	ldr	r3, [r2, #0]
 8004cac:	b933      	cbnz	r3, 8004cbc <_free_r+0x30>
 8004cae:	6063      	str	r3, [r4, #4]
 8004cb0:	6014      	str	r4, [r2, #0]
 8004cb2:	b003      	add	sp, #12
 8004cb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004cb8:	f000 b8e2 	b.w	8004e80 <__malloc_unlock>
 8004cbc:	42a3      	cmp	r3, r4
 8004cbe:	d908      	bls.n	8004cd2 <_free_r+0x46>
 8004cc0:	6825      	ldr	r5, [r4, #0]
 8004cc2:	1961      	adds	r1, r4, r5
 8004cc4:	428b      	cmp	r3, r1
 8004cc6:	bf01      	itttt	eq
 8004cc8:	6819      	ldreq	r1, [r3, #0]
 8004cca:	685b      	ldreq	r3, [r3, #4]
 8004ccc:	1949      	addeq	r1, r1, r5
 8004cce:	6021      	streq	r1, [r4, #0]
 8004cd0:	e7ed      	b.n	8004cae <_free_r+0x22>
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	b10b      	cbz	r3, 8004cdc <_free_r+0x50>
 8004cd8:	42a3      	cmp	r3, r4
 8004cda:	d9fa      	bls.n	8004cd2 <_free_r+0x46>
 8004cdc:	6811      	ldr	r1, [r2, #0]
 8004cde:	1855      	adds	r5, r2, r1
 8004ce0:	42a5      	cmp	r5, r4
 8004ce2:	d10b      	bne.n	8004cfc <_free_r+0x70>
 8004ce4:	6824      	ldr	r4, [r4, #0]
 8004ce6:	4421      	add	r1, r4
 8004ce8:	1854      	adds	r4, r2, r1
 8004cea:	42a3      	cmp	r3, r4
 8004cec:	6011      	str	r1, [r2, #0]
 8004cee:	d1e0      	bne.n	8004cb2 <_free_r+0x26>
 8004cf0:	681c      	ldr	r4, [r3, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	6053      	str	r3, [r2, #4]
 8004cf6:	440c      	add	r4, r1
 8004cf8:	6014      	str	r4, [r2, #0]
 8004cfa:	e7da      	b.n	8004cb2 <_free_r+0x26>
 8004cfc:	d902      	bls.n	8004d04 <_free_r+0x78>
 8004cfe:	230c      	movs	r3, #12
 8004d00:	6003      	str	r3, [r0, #0]
 8004d02:	e7d6      	b.n	8004cb2 <_free_r+0x26>
 8004d04:	6825      	ldr	r5, [r4, #0]
 8004d06:	1961      	adds	r1, r4, r5
 8004d08:	428b      	cmp	r3, r1
 8004d0a:	bf04      	itt	eq
 8004d0c:	6819      	ldreq	r1, [r3, #0]
 8004d0e:	685b      	ldreq	r3, [r3, #4]
 8004d10:	6063      	str	r3, [r4, #4]
 8004d12:	bf04      	itt	eq
 8004d14:	1949      	addeq	r1, r1, r5
 8004d16:	6021      	streq	r1, [r4, #0]
 8004d18:	6054      	str	r4, [r2, #4]
 8004d1a:	e7ca      	b.n	8004cb2 <_free_r+0x26>
 8004d1c:	b003      	add	sp, #12
 8004d1e:	bd30      	pop	{r4, r5, pc}
 8004d20:	20000234 	.word	0x20000234

08004d24 <malloc>:
 8004d24:	4b02      	ldr	r3, [pc, #8]	; (8004d30 <malloc+0xc>)
 8004d26:	4601      	mov	r1, r0
 8004d28:	6818      	ldr	r0, [r3, #0]
 8004d2a:	f000 b823 	b.w	8004d74 <_malloc_r>
 8004d2e:	bf00      	nop
 8004d30:	20000064 	.word	0x20000064

08004d34 <sbrk_aligned>:
 8004d34:	b570      	push	{r4, r5, r6, lr}
 8004d36:	4e0e      	ldr	r6, [pc, #56]	; (8004d70 <sbrk_aligned+0x3c>)
 8004d38:	460c      	mov	r4, r1
 8004d3a:	6831      	ldr	r1, [r6, #0]
 8004d3c:	4605      	mov	r5, r0
 8004d3e:	b911      	cbnz	r1, 8004d46 <sbrk_aligned+0x12>
 8004d40:	f000 fc66 	bl	8005610 <_sbrk_r>
 8004d44:	6030      	str	r0, [r6, #0]
 8004d46:	4621      	mov	r1, r4
 8004d48:	4628      	mov	r0, r5
 8004d4a:	f000 fc61 	bl	8005610 <_sbrk_r>
 8004d4e:	1c43      	adds	r3, r0, #1
 8004d50:	d00a      	beq.n	8004d68 <sbrk_aligned+0x34>
 8004d52:	1cc4      	adds	r4, r0, #3
 8004d54:	f024 0403 	bic.w	r4, r4, #3
 8004d58:	42a0      	cmp	r0, r4
 8004d5a:	d007      	beq.n	8004d6c <sbrk_aligned+0x38>
 8004d5c:	1a21      	subs	r1, r4, r0
 8004d5e:	4628      	mov	r0, r5
 8004d60:	f000 fc56 	bl	8005610 <_sbrk_r>
 8004d64:	3001      	adds	r0, #1
 8004d66:	d101      	bne.n	8004d6c <sbrk_aligned+0x38>
 8004d68:	f04f 34ff 	mov.w	r4, #4294967295
 8004d6c:	4620      	mov	r0, r4
 8004d6e:	bd70      	pop	{r4, r5, r6, pc}
 8004d70:	20000238 	.word	0x20000238

08004d74 <_malloc_r>:
 8004d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d78:	1ccd      	adds	r5, r1, #3
 8004d7a:	f025 0503 	bic.w	r5, r5, #3
 8004d7e:	3508      	adds	r5, #8
 8004d80:	2d0c      	cmp	r5, #12
 8004d82:	bf38      	it	cc
 8004d84:	250c      	movcc	r5, #12
 8004d86:	2d00      	cmp	r5, #0
 8004d88:	4607      	mov	r7, r0
 8004d8a:	db01      	blt.n	8004d90 <_malloc_r+0x1c>
 8004d8c:	42a9      	cmp	r1, r5
 8004d8e:	d905      	bls.n	8004d9c <_malloc_r+0x28>
 8004d90:	230c      	movs	r3, #12
 8004d92:	603b      	str	r3, [r7, #0]
 8004d94:	2600      	movs	r6, #0
 8004d96:	4630      	mov	r0, r6
 8004d98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004e70 <_malloc_r+0xfc>
 8004da0:	f000 f868 	bl	8004e74 <__malloc_lock>
 8004da4:	f8d8 3000 	ldr.w	r3, [r8]
 8004da8:	461c      	mov	r4, r3
 8004daa:	bb5c      	cbnz	r4, 8004e04 <_malloc_r+0x90>
 8004dac:	4629      	mov	r1, r5
 8004dae:	4638      	mov	r0, r7
 8004db0:	f7ff ffc0 	bl	8004d34 <sbrk_aligned>
 8004db4:	1c43      	adds	r3, r0, #1
 8004db6:	4604      	mov	r4, r0
 8004db8:	d155      	bne.n	8004e66 <_malloc_r+0xf2>
 8004dba:	f8d8 4000 	ldr.w	r4, [r8]
 8004dbe:	4626      	mov	r6, r4
 8004dc0:	2e00      	cmp	r6, #0
 8004dc2:	d145      	bne.n	8004e50 <_malloc_r+0xdc>
 8004dc4:	2c00      	cmp	r4, #0
 8004dc6:	d048      	beq.n	8004e5a <_malloc_r+0xe6>
 8004dc8:	6823      	ldr	r3, [r4, #0]
 8004dca:	4631      	mov	r1, r6
 8004dcc:	4638      	mov	r0, r7
 8004dce:	eb04 0903 	add.w	r9, r4, r3
 8004dd2:	f000 fc1d 	bl	8005610 <_sbrk_r>
 8004dd6:	4581      	cmp	r9, r0
 8004dd8:	d13f      	bne.n	8004e5a <_malloc_r+0xe6>
 8004dda:	6821      	ldr	r1, [r4, #0]
 8004ddc:	1a6d      	subs	r5, r5, r1
 8004dde:	4629      	mov	r1, r5
 8004de0:	4638      	mov	r0, r7
 8004de2:	f7ff ffa7 	bl	8004d34 <sbrk_aligned>
 8004de6:	3001      	adds	r0, #1
 8004de8:	d037      	beq.n	8004e5a <_malloc_r+0xe6>
 8004dea:	6823      	ldr	r3, [r4, #0]
 8004dec:	442b      	add	r3, r5
 8004dee:	6023      	str	r3, [r4, #0]
 8004df0:	f8d8 3000 	ldr.w	r3, [r8]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d038      	beq.n	8004e6a <_malloc_r+0xf6>
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	42a2      	cmp	r2, r4
 8004dfc:	d12b      	bne.n	8004e56 <_malloc_r+0xe2>
 8004dfe:	2200      	movs	r2, #0
 8004e00:	605a      	str	r2, [r3, #4]
 8004e02:	e00f      	b.n	8004e24 <_malloc_r+0xb0>
 8004e04:	6822      	ldr	r2, [r4, #0]
 8004e06:	1b52      	subs	r2, r2, r5
 8004e08:	d41f      	bmi.n	8004e4a <_malloc_r+0xd6>
 8004e0a:	2a0b      	cmp	r2, #11
 8004e0c:	d917      	bls.n	8004e3e <_malloc_r+0xca>
 8004e0e:	1961      	adds	r1, r4, r5
 8004e10:	42a3      	cmp	r3, r4
 8004e12:	6025      	str	r5, [r4, #0]
 8004e14:	bf18      	it	ne
 8004e16:	6059      	strne	r1, [r3, #4]
 8004e18:	6863      	ldr	r3, [r4, #4]
 8004e1a:	bf08      	it	eq
 8004e1c:	f8c8 1000 	streq.w	r1, [r8]
 8004e20:	5162      	str	r2, [r4, r5]
 8004e22:	604b      	str	r3, [r1, #4]
 8004e24:	4638      	mov	r0, r7
 8004e26:	f104 060b 	add.w	r6, r4, #11
 8004e2a:	f000 f829 	bl	8004e80 <__malloc_unlock>
 8004e2e:	f026 0607 	bic.w	r6, r6, #7
 8004e32:	1d23      	adds	r3, r4, #4
 8004e34:	1af2      	subs	r2, r6, r3
 8004e36:	d0ae      	beq.n	8004d96 <_malloc_r+0x22>
 8004e38:	1b9b      	subs	r3, r3, r6
 8004e3a:	50a3      	str	r3, [r4, r2]
 8004e3c:	e7ab      	b.n	8004d96 <_malloc_r+0x22>
 8004e3e:	42a3      	cmp	r3, r4
 8004e40:	6862      	ldr	r2, [r4, #4]
 8004e42:	d1dd      	bne.n	8004e00 <_malloc_r+0x8c>
 8004e44:	f8c8 2000 	str.w	r2, [r8]
 8004e48:	e7ec      	b.n	8004e24 <_malloc_r+0xb0>
 8004e4a:	4623      	mov	r3, r4
 8004e4c:	6864      	ldr	r4, [r4, #4]
 8004e4e:	e7ac      	b.n	8004daa <_malloc_r+0x36>
 8004e50:	4634      	mov	r4, r6
 8004e52:	6876      	ldr	r6, [r6, #4]
 8004e54:	e7b4      	b.n	8004dc0 <_malloc_r+0x4c>
 8004e56:	4613      	mov	r3, r2
 8004e58:	e7cc      	b.n	8004df4 <_malloc_r+0x80>
 8004e5a:	230c      	movs	r3, #12
 8004e5c:	603b      	str	r3, [r7, #0]
 8004e5e:	4638      	mov	r0, r7
 8004e60:	f000 f80e 	bl	8004e80 <__malloc_unlock>
 8004e64:	e797      	b.n	8004d96 <_malloc_r+0x22>
 8004e66:	6025      	str	r5, [r4, #0]
 8004e68:	e7dc      	b.n	8004e24 <_malloc_r+0xb0>
 8004e6a:	605b      	str	r3, [r3, #4]
 8004e6c:	deff      	udf	#255	; 0xff
 8004e6e:	bf00      	nop
 8004e70:	20000234 	.word	0x20000234

08004e74 <__malloc_lock>:
 8004e74:	4801      	ldr	r0, [pc, #4]	; (8004e7c <__malloc_lock+0x8>)
 8004e76:	f7ff bee8 	b.w	8004c4a <__retarget_lock_acquire_recursive>
 8004e7a:	bf00      	nop
 8004e7c:	20000230 	.word	0x20000230

08004e80 <__malloc_unlock>:
 8004e80:	4801      	ldr	r0, [pc, #4]	; (8004e88 <__malloc_unlock+0x8>)
 8004e82:	f7ff bee3 	b.w	8004c4c <__retarget_lock_release_recursive>
 8004e86:	bf00      	nop
 8004e88:	20000230 	.word	0x20000230

08004e8c <__ssputs_r>:
 8004e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e90:	688e      	ldr	r6, [r1, #8]
 8004e92:	461f      	mov	r7, r3
 8004e94:	42be      	cmp	r6, r7
 8004e96:	680b      	ldr	r3, [r1, #0]
 8004e98:	4682      	mov	sl, r0
 8004e9a:	460c      	mov	r4, r1
 8004e9c:	4690      	mov	r8, r2
 8004e9e:	d82c      	bhi.n	8004efa <__ssputs_r+0x6e>
 8004ea0:	898a      	ldrh	r2, [r1, #12]
 8004ea2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ea6:	d026      	beq.n	8004ef6 <__ssputs_r+0x6a>
 8004ea8:	6965      	ldr	r5, [r4, #20]
 8004eaa:	6909      	ldr	r1, [r1, #16]
 8004eac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004eb0:	eba3 0901 	sub.w	r9, r3, r1
 8004eb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004eb8:	1c7b      	adds	r3, r7, #1
 8004eba:	444b      	add	r3, r9
 8004ebc:	106d      	asrs	r5, r5, #1
 8004ebe:	429d      	cmp	r5, r3
 8004ec0:	bf38      	it	cc
 8004ec2:	461d      	movcc	r5, r3
 8004ec4:	0553      	lsls	r3, r2, #21
 8004ec6:	d527      	bpl.n	8004f18 <__ssputs_r+0x8c>
 8004ec8:	4629      	mov	r1, r5
 8004eca:	f7ff ff53 	bl	8004d74 <_malloc_r>
 8004ece:	4606      	mov	r6, r0
 8004ed0:	b360      	cbz	r0, 8004f2c <__ssputs_r+0xa0>
 8004ed2:	6921      	ldr	r1, [r4, #16]
 8004ed4:	464a      	mov	r2, r9
 8004ed6:	f000 fbab 	bl	8005630 <memcpy>
 8004eda:	89a3      	ldrh	r3, [r4, #12]
 8004edc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ee4:	81a3      	strh	r3, [r4, #12]
 8004ee6:	6126      	str	r6, [r4, #16]
 8004ee8:	6165      	str	r5, [r4, #20]
 8004eea:	444e      	add	r6, r9
 8004eec:	eba5 0509 	sub.w	r5, r5, r9
 8004ef0:	6026      	str	r6, [r4, #0]
 8004ef2:	60a5      	str	r5, [r4, #8]
 8004ef4:	463e      	mov	r6, r7
 8004ef6:	42be      	cmp	r6, r7
 8004ef8:	d900      	bls.n	8004efc <__ssputs_r+0x70>
 8004efa:	463e      	mov	r6, r7
 8004efc:	6820      	ldr	r0, [r4, #0]
 8004efe:	4632      	mov	r2, r6
 8004f00:	4641      	mov	r1, r8
 8004f02:	f000 fb6b 	bl	80055dc <memmove>
 8004f06:	68a3      	ldr	r3, [r4, #8]
 8004f08:	1b9b      	subs	r3, r3, r6
 8004f0a:	60a3      	str	r3, [r4, #8]
 8004f0c:	6823      	ldr	r3, [r4, #0]
 8004f0e:	4433      	add	r3, r6
 8004f10:	6023      	str	r3, [r4, #0]
 8004f12:	2000      	movs	r0, #0
 8004f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f18:	462a      	mov	r2, r5
 8004f1a:	f000 fb9e 	bl	800565a <_realloc_r>
 8004f1e:	4606      	mov	r6, r0
 8004f20:	2800      	cmp	r0, #0
 8004f22:	d1e0      	bne.n	8004ee6 <__ssputs_r+0x5a>
 8004f24:	6921      	ldr	r1, [r4, #16]
 8004f26:	4650      	mov	r0, sl
 8004f28:	f7ff feb0 	bl	8004c8c <_free_r>
 8004f2c:	230c      	movs	r3, #12
 8004f2e:	f8ca 3000 	str.w	r3, [sl]
 8004f32:	89a3      	ldrh	r3, [r4, #12]
 8004f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f38:	81a3      	strh	r3, [r4, #12]
 8004f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f3e:	e7e9      	b.n	8004f14 <__ssputs_r+0x88>

08004f40 <_svfiprintf_r>:
 8004f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f44:	4698      	mov	r8, r3
 8004f46:	898b      	ldrh	r3, [r1, #12]
 8004f48:	061b      	lsls	r3, r3, #24
 8004f4a:	b09d      	sub	sp, #116	; 0x74
 8004f4c:	4607      	mov	r7, r0
 8004f4e:	460d      	mov	r5, r1
 8004f50:	4614      	mov	r4, r2
 8004f52:	d50e      	bpl.n	8004f72 <_svfiprintf_r+0x32>
 8004f54:	690b      	ldr	r3, [r1, #16]
 8004f56:	b963      	cbnz	r3, 8004f72 <_svfiprintf_r+0x32>
 8004f58:	2140      	movs	r1, #64	; 0x40
 8004f5a:	f7ff ff0b 	bl	8004d74 <_malloc_r>
 8004f5e:	6028      	str	r0, [r5, #0]
 8004f60:	6128      	str	r0, [r5, #16]
 8004f62:	b920      	cbnz	r0, 8004f6e <_svfiprintf_r+0x2e>
 8004f64:	230c      	movs	r3, #12
 8004f66:	603b      	str	r3, [r7, #0]
 8004f68:	f04f 30ff 	mov.w	r0, #4294967295
 8004f6c:	e0d0      	b.n	8005110 <_svfiprintf_r+0x1d0>
 8004f6e:	2340      	movs	r3, #64	; 0x40
 8004f70:	616b      	str	r3, [r5, #20]
 8004f72:	2300      	movs	r3, #0
 8004f74:	9309      	str	r3, [sp, #36]	; 0x24
 8004f76:	2320      	movs	r3, #32
 8004f78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f80:	2330      	movs	r3, #48	; 0x30
 8004f82:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005128 <_svfiprintf_r+0x1e8>
 8004f86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f8a:	f04f 0901 	mov.w	r9, #1
 8004f8e:	4623      	mov	r3, r4
 8004f90:	469a      	mov	sl, r3
 8004f92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f96:	b10a      	cbz	r2, 8004f9c <_svfiprintf_r+0x5c>
 8004f98:	2a25      	cmp	r2, #37	; 0x25
 8004f9a:	d1f9      	bne.n	8004f90 <_svfiprintf_r+0x50>
 8004f9c:	ebba 0b04 	subs.w	fp, sl, r4
 8004fa0:	d00b      	beq.n	8004fba <_svfiprintf_r+0x7a>
 8004fa2:	465b      	mov	r3, fp
 8004fa4:	4622      	mov	r2, r4
 8004fa6:	4629      	mov	r1, r5
 8004fa8:	4638      	mov	r0, r7
 8004faa:	f7ff ff6f 	bl	8004e8c <__ssputs_r>
 8004fae:	3001      	adds	r0, #1
 8004fb0:	f000 80a9 	beq.w	8005106 <_svfiprintf_r+0x1c6>
 8004fb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fb6:	445a      	add	r2, fp
 8004fb8:	9209      	str	r2, [sp, #36]	; 0x24
 8004fba:	f89a 3000 	ldrb.w	r3, [sl]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f000 80a1 	beq.w	8005106 <_svfiprintf_r+0x1c6>
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8004fca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fce:	f10a 0a01 	add.w	sl, sl, #1
 8004fd2:	9304      	str	r3, [sp, #16]
 8004fd4:	9307      	str	r3, [sp, #28]
 8004fd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fda:	931a      	str	r3, [sp, #104]	; 0x68
 8004fdc:	4654      	mov	r4, sl
 8004fde:	2205      	movs	r2, #5
 8004fe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fe4:	4850      	ldr	r0, [pc, #320]	; (8005128 <_svfiprintf_r+0x1e8>)
 8004fe6:	f7fb f8f3 	bl	80001d0 <memchr>
 8004fea:	9a04      	ldr	r2, [sp, #16]
 8004fec:	b9d8      	cbnz	r0, 8005026 <_svfiprintf_r+0xe6>
 8004fee:	06d0      	lsls	r0, r2, #27
 8004ff0:	bf44      	itt	mi
 8004ff2:	2320      	movmi	r3, #32
 8004ff4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ff8:	0711      	lsls	r1, r2, #28
 8004ffa:	bf44      	itt	mi
 8004ffc:	232b      	movmi	r3, #43	; 0x2b
 8004ffe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005002:	f89a 3000 	ldrb.w	r3, [sl]
 8005006:	2b2a      	cmp	r3, #42	; 0x2a
 8005008:	d015      	beq.n	8005036 <_svfiprintf_r+0xf6>
 800500a:	9a07      	ldr	r2, [sp, #28]
 800500c:	4654      	mov	r4, sl
 800500e:	2000      	movs	r0, #0
 8005010:	f04f 0c0a 	mov.w	ip, #10
 8005014:	4621      	mov	r1, r4
 8005016:	f811 3b01 	ldrb.w	r3, [r1], #1
 800501a:	3b30      	subs	r3, #48	; 0x30
 800501c:	2b09      	cmp	r3, #9
 800501e:	d94d      	bls.n	80050bc <_svfiprintf_r+0x17c>
 8005020:	b1b0      	cbz	r0, 8005050 <_svfiprintf_r+0x110>
 8005022:	9207      	str	r2, [sp, #28]
 8005024:	e014      	b.n	8005050 <_svfiprintf_r+0x110>
 8005026:	eba0 0308 	sub.w	r3, r0, r8
 800502a:	fa09 f303 	lsl.w	r3, r9, r3
 800502e:	4313      	orrs	r3, r2
 8005030:	9304      	str	r3, [sp, #16]
 8005032:	46a2      	mov	sl, r4
 8005034:	e7d2      	b.n	8004fdc <_svfiprintf_r+0x9c>
 8005036:	9b03      	ldr	r3, [sp, #12]
 8005038:	1d19      	adds	r1, r3, #4
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	9103      	str	r1, [sp, #12]
 800503e:	2b00      	cmp	r3, #0
 8005040:	bfbb      	ittet	lt
 8005042:	425b      	neglt	r3, r3
 8005044:	f042 0202 	orrlt.w	r2, r2, #2
 8005048:	9307      	strge	r3, [sp, #28]
 800504a:	9307      	strlt	r3, [sp, #28]
 800504c:	bfb8      	it	lt
 800504e:	9204      	strlt	r2, [sp, #16]
 8005050:	7823      	ldrb	r3, [r4, #0]
 8005052:	2b2e      	cmp	r3, #46	; 0x2e
 8005054:	d10c      	bne.n	8005070 <_svfiprintf_r+0x130>
 8005056:	7863      	ldrb	r3, [r4, #1]
 8005058:	2b2a      	cmp	r3, #42	; 0x2a
 800505a:	d134      	bne.n	80050c6 <_svfiprintf_r+0x186>
 800505c:	9b03      	ldr	r3, [sp, #12]
 800505e:	1d1a      	adds	r2, r3, #4
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	9203      	str	r2, [sp, #12]
 8005064:	2b00      	cmp	r3, #0
 8005066:	bfb8      	it	lt
 8005068:	f04f 33ff 	movlt.w	r3, #4294967295
 800506c:	3402      	adds	r4, #2
 800506e:	9305      	str	r3, [sp, #20]
 8005070:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005138 <_svfiprintf_r+0x1f8>
 8005074:	7821      	ldrb	r1, [r4, #0]
 8005076:	2203      	movs	r2, #3
 8005078:	4650      	mov	r0, sl
 800507a:	f7fb f8a9 	bl	80001d0 <memchr>
 800507e:	b138      	cbz	r0, 8005090 <_svfiprintf_r+0x150>
 8005080:	9b04      	ldr	r3, [sp, #16]
 8005082:	eba0 000a 	sub.w	r0, r0, sl
 8005086:	2240      	movs	r2, #64	; 0x40
 8005088:	4082      	lsls	r2, r0
 800508a:	4313      	orrs	r3, r2
 800508c:	3401      	adds	r4, #1
 800508e:	9304      	str	r3, [sp, #16]
 8005090:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005094:	4825      	ldr	r0, [pc, #148]	; (800512c <_svfiprintf_r+0x1ec>)
 8005096:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800509a:	2206      	movs	r2, #6
 800509c:	f7fb f898 	bl	80001d0 <memchr>
 80050a0:	2800      	cmp	r0, #0
 80050a2:	d038      	beq.n	8005116 <_svfiprintf_r+0x1d6>
 80050a4:	4b22      	ldr	r3, [pc, #136]	; (8005130 <_svfiprintf_r+0x1f0>)
 80050a6:	bb1b      	cbnz	r3, 80050f0 <_svfiprintf_r+0x1b0>
 80050a8:	9b03      	ldr	r3, [sp, #12]
 80050aa:	3307      	adds	r3, #7
 80050ac:	f023 0307 	bic.w	r3, r3, #7
 80050b0:	3308      	adds	r3, #8
 80050b2:	9303      	str	r3, [sp, #12]
 80050b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050b6:	4433      	add	r3, r6
 80050b8:	9309      	str	r3, [sp, #36]	; 0x24
 80050ba:	e768      	b.n	8004f8e <_svfiprintf_r+0x4e>
 80050bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80050c0:	460c      	mov	r4, r1
 80050c2:	2001      	movs	r0, #1
 80050c4:	e7a6      	b.n	8005014 <_svfiprintf_r+0xd4>
 80050c6:	2300      	movs	r3, #0
 80050c8:	3401      	adds	r4, #1
 80050ca:	9305      	str	r3, [sp, #20]
 80050cc:	4619      	mov	r1, r3
 80050ce:	f04f 0c0a 	mov.w	ip, #10
 80050d2:	4620      	mov	r0, r4
 80050d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050d8:	3a30      	subs	r2, #48	; 0x30
 80050da:	2a09      	cmp	r2, #9
 80050dc:	d903      	bls.n	80050e6 <_svfiprintf_r+0x1a6>
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d0c6      	beq.n	8005070 <_svfiprintf_r+0x130>
 80050e2:	9105      	str	r1, [sp, #20]
 80050e4:	e7c4      	b.n	8005070 <_svfiprintf_r+0x130>
 80050e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80050ea:	4604      	mov	r4, r0
 80050ec:	2301      	movs	r3, #1
 80050ee:	e7f0      	b.n	80050d2 <_svfiprintf_r+0x192>
 80050f0:	ab03      	add	r3, sp, #12
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	462a      	mov	r2, r5
 80050f6:	4b0f      	ldr	r3, [pc, #60]	; (8005134 <_svfiprintf_r+0x1f4>)
 80050f8:	a904      	add	r1, sp, #16
 80050fa:	4638      	mov	r0, r7
 80050fc:	f3af 8000 	nop.w
 8005100:	1c42      	adds	r2, r0, #1
 8005102:	4606      	mov	r6, r0
 8005104:	d1d6      	bne.n	80050b4 <_svfiprintf_r+0x174>
 8005106:	89ab      	ldrh	r3, [r5, #12]
 8005108:	065b      	lsls	r3, r3, #25
 800510a:	f53f af2d 	bmi.w	8004f68 <_svfiprintf_r+0x28>
 800510e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005110:	b01d      	add	sp, #116	; 0x74
 8005112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005116:	ab03      	add	r3, sp, #12
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	462a      	mov	r2, r5
 800511c:	4b05      	ldr	r3, [pc, #20]	; (8005134 <_svfiprintf_r+0x1f4>)
 800511e:	a904      	add	r1, sp, #16
 8005120:	4638      	mov	r0, r7
 8005122:	f000 f879 	bl	8005218 <_printf_i>
 8005126:	e7eb      	b.n	8005100 <_svfiprintf_r+0x1c0>
 8005128:	08005d23 	.word	0x08005d23
 800512c:	08005d2d 	.word	0x08005d2d
 8005130:	00000000 	.word	0x00000000
 8005134:	08004e8d 	.word	0x08004e8d
 8005138:	08005d29 	.word	0x08005d29

0800513c <_printf_common>:
 800513c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005140:	4616      	mov	r6, r2
 8005142:	4699      	mov	r9, r3
 8005144:	688a      	ldr	r2, [r1, #8]
 8005146:	690b      	ldr	r3, [r1, #16]
 8005148:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800514c:	4293      	cmp	r3, r2
 800514e:	bfb8      	it	lt
 8005150:	4613      	movlt	r3, r2
 8005152:	6033      	str	r3, [r6, #0]
 8005154:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005158:	4607      	mov	r7, r0
 800515a:	460c      	mov	r4, r1
 800515c:	b10a      	cbz	r2, 8005162 <_printf_common+0x26>
 800515e:	3301      	adds	r3, #1
 8005160:	6033      	str	r3, [r6, #0]
 8005162:	6823      	ldr	r3, [r4, #0]
 8005164:	0699      	lsls	r1, r3, #26
 8005166:	bf42      	ittt	mi
 8005168:	6833      	ldrmi	r3, [r6, #0]
 800516a:	3302      	addmi	r3, #2
 800516c:	6033      	strmi	r3, [r6, #0]
 800516e:	6825      	ldr	r5, [r4, #0]
 8005170:	f015 0506 	ands.w	r5, r5, #6
 8005174:	d106      	bne.n	8005184 <_printf_common+0x48>
 8005176:	f104 0a19 	add.w	sl, r4, #25
 800517a:	68e3      	ldr	r3, [r4, #12]
 800517c:	6832      	ldr	r2, [r6, #0]
 800517e:	1a9b      	subs	r3, r3, r2
 8005180:	42ab      	cmp	r3, r5
 8005182:	dc26      	bgt.n	80051d2 <_printf_common+0x96>
 8005184:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005188:	1e13      	subs	r3, r2, #0
 800518a:	6822      	ldr	r2, [r4, #0]
 800518c:	bf18      	it	ne
 800518e:	2301      	movne	r3, #1
 8005190:	0692      	lsls	r2, r2, #26
 8005192:	d42b      	bmi.n	80051ec <_printf_common+0xb0>
 8005194:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005198:	4649      	mov	r1, r9
 800519a:	4638      	mov	r0, r7
 800519c:	47c0      	blx	r8
 800519e:	3001      	adds	r0, #1
 80051a0:	d01e      	beq.n	80051e0 <_printf_common+0xa4>
 80051a2:	6823      	ldr	r3, [r4, #0]
 80051a4:	6922      	ldr	r2, [r4, #16]
 80051a6:	f003 0306 	and.w	r3, r3, #6
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	bf02      	ittt	eq
 80051ae:	68e5      	ldreq	r5, [r4, #12]
 80051b0:	6833      	ldreq	r3, [r6, #0]
 80051b2:	1aed      	subeq	r5, r5, r3
 80051b4:	68a3      	ldr	r3, [r4, #8]
 80051b6:	bf0c      	ite	eq
 80051b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051bc:	2500      	movne	r5, #0
 80051be:	4293      	cmp	r3, r2
 80051c0:	bfc4      	itt	gt
 80051c2:	1a9b      	subgt	r3, r3, r2
 80051c4:	18ed      	addgt	r5, r5, r3
 80051c6:	2600      	movs	r6, #0
 80051c8:	341a      	adds	r4, #26
 80051ca:	42b5      	cmp	r5, r6
 80051cc:	d11a      	bne.n	8005204 <_printf_common+0xc8>
 80051ce:	2000      	movs	r0, #0
 80051d0:	e008      	b.n	80051e4 <_printf_common+0xa8>
 80051d2:	2301      	movs	r3, #1
 80051d4:	4652      	mov	r2, sl
 80051d6:	4649      	mov	r1, r9
 80051d8:	4638      	mov	r0, r7
 80051da:	47c0      	blx	r8
 80051dc:	3001      	adds	r0, #1
 80051de:	d103      	bne.n	80051e8 <_printf_common+0xac>
 80051e0:	f04f 30ff 	mov.w	r0, #4294967295
 80051e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051e8:	3501      	adds	r5, #1
 80051ea:	e7c6      	b.n	800517a <_printf_common+0x3e>
 80051ec:	18e1      	adds	r1, r4, r3
 80051ee:	1c5a      	adds	r2, r3, #1
 80051f0:	2030      	movs	r0, #48	; 0x30
 80051f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051f6:	4422      	add	r2, r4
 80051f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005200:	3302      	adds	r3, #2
 8005202:	e7c7      	b.n	8005194 <_printf_common+0x58>
 8005204:	2301      	movs	r3, #1
 8005206:	4622      	mov	r2, r4
 8005208:	4649      	mov	r1, r9
 800520a:	4638      	mov	r0, r7
 800520c:	47c0      	blx	r8
 800520e:	3001      	adds	r0, #1
 8005210:	d0e6      	beq.n	80051e0 <_printf_common+0xa4>
 8005212:	3601      	adds	r6, #1
 8005214:	e7d9      	b.n	80051ca <_printf_common+0x8e>
	...

08005218 <_printf_i>:
 8005218:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800521c:	7e0f      	ldrb	r7, [r1, #24]
 800521e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005220:	2f78      	cmp	r7, #120	; 0x78
 8005222:	4691      	mov	r9, r2
 8005224:	4680      	mov	r8, r0
 8005226:	460c      	mov	r4, r1
 8005228:	469a      	mov	sl, r3
 800522a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800522e:	d807      	bhi.n	8005240 <_printf_i+0x28>
 8005230:	2f62      	cmp	r7, #98	; 0x62
 8005232:	d80a      	bhi.n	800524a <_printf_i+0x32>
 8005234:	2f00      	cmp	r7, #0
 8005236:	f000 80d4 	beq.w	80053e2 <_printf_i+0x1ca>
 800523a:	2f58      	cmp	r7, #88	; 0x58
 800523c:	f000 80c0 	beq.w	80053c0 <_printf_i+0x1a8>
 8005240:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005244:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005248:	e03a      	b.n	80052c0 <_printf_i+0xa8>
 800524a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800524e:	2b15      	cmp	r3, #21
 8005250:	d8f6      	bhi.n	8005240 <_printf_i+0x28>
 8005252:	a101      	add	r1, pc, #4	; (adr r1, 8005258 <_printf_i+0x40>)
 8005254:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005258:	080052b1 	.word	0x080052b1
 800525c:	080052c5 	.word	0x080052c5
 8005260:	08005241 	.word	0x08005241
 8005264:	08005241 	.word	0x08005241
 8005268:	08005241 	.word	0x08005241
 800526c:	08005241 	.word	0x08005241
 8005270:	080052c5 	.word	0x080052c5
 8005274:	08005241 	.word	0x08005241
 8005278:	08005241 	.word	0x08005241
 800527c:	08005241 	.word	0x08005241
 8005280:	08005241 	.word	0x08005241
 8005284:	080053c9 	.word	0x080053c9
 8005288:	080052f1 	.word	0x080052f1
 800528c:	08005383 	.word	0x08005383
 8005290:	08005241 	.word	0x08005241
 8005294:	08005241 	.word	0x08005241
 8005298:	080053eb 	.word	0x080053eb
 800529c:	08005241 	.word	0x08005241
 80052a0:	080052f1 	.word	0x080052f1
 80052a4:	08005241 	.word	0x08005241
 80052a8:	08005241 	.word	0x08005241
 80052ac:	0800538b 	.word	0x0800538b
 80052b0:	682b      	ldr	r3, [r5, #0]
 80052b2:	1d1a      	adds	r2, r3, #4
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	602a      	str	r2, [r5, #0]
 80052b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052c0:	2301      	movs	r3, #1
 80052c2:	e09f      	b.n	8005404 <_printf_i+0x1ec>
 80052c4:	6820      	ldr	r0, [r4, #0]
 80052c6:	682b      	ldr	r3, [r5, #0]
 80052c8:	0607      	lsls	r7, r0, #24
 80052ca:	f103 0104 	add.w	r1, r3, #4
 80052ce:	6029      	str	r1, [r5, #0]
 80052d0:	d501      	bpl.n	80052d6 <_printf_i+0xbe>
 80052d2:	681e      	ldr	r6, [r3, #0]
 80052d4:	e003      	b.n	80052de <_printf_i+0xc6>
 80052d6:	0646      	lsls	r6, r0, #25
 80052d8:	d5fb      	bpl.n	80052d2 <_printf_i+0xba>
 80052da:	f9b3 6000 	ldrsh.w	r6, [r3]
 80052de:	2e00      	cmp	r6, #0
 80052e0:	da03      	bge.n	80052ea <_printf_i+0xd2>
 80052e2:	232d      	movs	r3, #45	; 0x2d
 80052e4:	4276      	negs	r6, r6
 80052e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052ea:	485a      	ldr	r0, [pc, #360]	; (8005454 <_printf_i+0x23c>)
 80052ec:	230a      	movs	r3, #10
 80052ee:	e012      	b.n	8005316 <_printf_i+0xfe>
 80052f0:	682b      	ldr	r3, [r5, #0]
 80052f2:	6820      	ldr	r0, [r4, #0]
 80052f4:	1d19      	adds	r1, r3, #4
 80052f6:	6029      	str	r1, [r5, #0]
 80052f8:	0605      	lsls	r5, r0, #24
 80052fa:	d501      	bpl.n	8005300 <_printf_i+0xe8>
 80052fc:	681e      	ldr	r6, [r3, #0]
 80052fe:	e002      	b.n	8005306 <_printf_i+0xee>
 8005300:	0641      	lsls	r1, r0, #25
 8005302:	d5fb      	bpl.n	80052fc <_printf_i+0xe4>
 8005304:	881e      	ldrh	r6, [r3, #0]
 8005306:	4853      	ldr	r0, [pc, #332]	; (8005454 <_printf_i+0x23c>)
 8005308:	2f6f      	cmp	r7, #111	; 0x6f
 800530a:	bf0c      	ite	eq
 800530c:	2308      	moveq	r3, #8
 800530e:	230a      	movne	r3, #10
 8005310:	2100      	movs	r1, #0
 8005312:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005316:	6865      	ldr	r5, [r4, #4]
 8005318:	60a5      	str	r5, [r4, #8]
 800531a:	2d00      	cmp	r5, #0
 800531c:	bfa2      	ittt	ge
 800531e:	6821      	ldrge	r1, [r4, #0]
 8005320:	f021 0104 	bicge.w	r1, r1, #4
 8005324:	6021      	strge	r1, [r4, #0]
 8005326:	b90e      	cbnz	r6, 800532c <_printf_i+0x114>
 8005328:	2d00      	cmp	r5, #0
 800532a:	d04b      	beq.n	80053c4 <_printf_i+0x1ac>
 800532c:	4615      	mov	r5, r2
 800532e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005332:	fb03 6711 	mls	r7, r3, r1, r6
 8005336:	5dc7      	ldrb	r7, [r0, r7]
 8005338:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800533c:	4637      	mov	r7, r6
 800533e:	42bb      	cmp	r3, r7
 8005340:	460e      	mov	r6, r1
 8005342:	d9f4      	bls.n	800532e <_printf_i+0x116>
 8005344:	2b08      	cmp	r3, #8
 8005346:	d10b      	bne.n	8005360 <_printf_i+0x148>
 8005348:	6823      	ldr	r3, [r4, #0]
 800534a:	07de      	lsls	r6, r3, #31
 800534c:	d508      	bpl.n	8005360 <_printf_i+0x148>
 800534e:	6923      	ldr	r3, [r4, #16]
 8005350:	6861      	ldr	r1, [r4, #4]
 8005352:	4299      	cmp	r1, r3
 8005354:	bfde      	ittt	le
 8005356:	2330      	movle	r3, #48	; 0x30
 8005358:	f805 3c01 	strble.w	r3, [r5, #-1]
 800535c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005360:	1b52      	subs	r2, r2, r5
 8005362:	6122      	str	r2, [r4, #16]
 8005364:	f8cd a000 	str.w	sl, [sp]
 8005368:	464b      	mov	r3, r9
 800536a:	aa03      	add	r2, sp, #12
 800536c:	4621      	mov	r1, r4
 800536e:	4640      	mov	r0, r8
 8005370:	f7ff fee4 	bl	800513c <_printf_common>
 8005374:	3001      	adds	r0, #1
 8005376:	d14a      	bne.n	800540e <_printf_i+0x1f6>
 8005378:	f04f 30ff 	mov.w	r0, #4294967295
 800537c:	b004      	add	sp, #16
 800537e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005382:	6823      	ldr	r3, [r4, #0]
 8005384:	f043 0320 	orr.w	r3, r3, #32
 8005388:	6023      	str	r3, [r4, #0]
 800538a:	4833      	ldr	r0, [pc, #204]	; (8005458 <_printf_i+0x240>)
 800538c:	2778      	movs	r7, #120	; 0x78
 800538e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005392:	6823      	ldr	r3, [r4, #0]
 8005394:	6829      	ldr	r1, [r5, #0]
 8005396:	061f      	lsls	r7, r3, #24
 8005398:	f851 6b04 	ldr.w	r6, [r1], #4
 800539c:	d402      	bmi.n	80053a4 <_printf_i+0x18c>
 800539e:	065f      	lsls	r7, r3, #25
 80053a0:	bf48      	it	mi
 80053a2:	b2b6      	uxthmi	r6, r6
 80053a4:	07df      	lsls	r7, r3, #31
 80053a6:	bf48      	it	mi
 80053a8:	f043 0320 	orrmi.w	r3, r3, #32
 80053ac:	6029      	str	r1, [r5, #0]
 80053ae:	bf48      	it	mi
 80053b0:	6023      	strmi	r3, [r4, #0]
 80053b2:	b91e      	cbnz	r6, 80053bc <_printf_i+0x1a4>
 80053b4:	6823      	ldr	r3, [r4, #0]
 80053b6:	f023 0320 	bic.w	r3, r3, #32
 80053ba:	6023      	str	r3, [r4, #0]
 80053bc:	2310      	movs	r3, #16
 80053be:	e7a7      	b.n	8005310 <_printf_i+0xf8>
 80053c0:	4824      	ldr	r0, [pc, #144]	; (8005454 <_printf_i+0x23c>)
 80053c2:	e7e4      	b.n	800538e <_printf_i+0x176>
 80053c4:	4615      	mov	r5, r2
 80053c6:	e7bd      	b.n	8005344 <_printf_i+0x12c>
 80053c8:	682b      	ldr	r3, [r5, #0]
 80053ca:	6826      	ldr	r6, [r4, #0]
 80053cc:	6961      	ldr	r1, [r4, #20]
 80053ce:	1d18      	adds	r0, r3, #4
 80053d0:	6028      	str	r0, [r5, #0]
 80053d2:	0635      	lsls	r5, r6, #24
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	d501      	bpl.n	80053dc <_printf_i+0x1c4>
 80053d8:	6019      	str	r1, [r3, #0]
 80053da:	e002      	b.n	80053e2 <_printf_i+0x1ca>
 80053dc:	0670      	lsls	r0, r6, #25
 80053de:	d5fb      	bpl.n	80053d8 <_printf_i+0x1c0>
 80053e0:	8019      	strh	r1, [r3, #0]
 80053e2:	2300      	movs	r3, #0
 80053e4:	6123      	str	r3, [r4, #16]
 80053e6:	4615      	mov	r5, r2
 80053e8:	e7bc      	b.n	8005364 <_printf_i+0x14c>
 80053ea:	682b      	ldr	r3, [r5, #0]
 80053ec:	1d1a      	adds	r2, r3, #4
 80053ee:	602a      	str	r2, [r5, #0]
 80053f0:	681d      	ldr	r5, [r3, #0]
 80053f2:	6862      	ldr	r2, [r4, #4]
 80053f4:	2100      	movs	r1, #0
 80053f6:	4628      	mov	r0, r5
 80053f8:	f7fa feea 	bl	80001d0 <memchr>
 80053fc:	b108      	cbz	r0, 8005402 <_printf_i+0x1ea>
 80053fe:	1b40      	subs	r0, r0, r5
 8005400:	6060      	str	r0, [r4, #4]
 8005402:	6863      	ldr	r3, [r4, #4]
 8005404:	6123      	str	r3, [r4, #16]
 8005406:	2300      	movs	r3, #0
 8005408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800540c:	e7aa      	b.n	8005364 <_printf_i+0x14c>
 800540e:	6923      	ldr	r3, [r4, #16]
 8005410:	462a      	mov	r2, r5
 8005412:	4649      	mov	r1, r9
 8005414:	4640      	mov	r0, r8
 8005416:	47d0      	blx	sl
 8005418:	3001      	adds	r0, #1
 800541a:	d0ad      	beq.n	8005378 <_printf_i+0x160>
 800541c:	6823      	ldr	r3, [r4, #0]
 800541e:	079b      	lsls	r3, r3, #30
 8005420:	d413      	bmi.n	800544a <_printf_i+0x232>
 8005422:	68e0      	ldr	r0, [r4, #12]
 8005424:	9b03      	ldr	r3, [sp, #12]
 8005426:	4298      	cmp	r0, r3
 8005428:	bfb8      	it	lt
 800542a:	4618      	movlt	r0, r3
 800542c:	e7a6      	b.n	800537c <_printf_i+0x164>
 800542e:	2301      	movs	r3, #1
 8005430:	4632      	mov	r2, r6
 8005432:	4649      	mov	r1, r9
 8005434:	4640      	mov	r0, r8
 8005436:	47d0      	blx	sl
 8005438:	3001      	adds	r0, #1
 800543a:	d09d      	beq.n	8005378 <_printf_i+0x160>
 800543c:	3501      	adds	r5, #1
 800543e:	68e3      	ldr	r3, [r4, #12]
 8005440:	9903      	ldr	r1, [sp, #12]
 8005442:	1a5b      	subs	r3, r3, r1
 8005444:	42ab      	cmp	r3, r5
 8005446:	dcf2      	bgt.n	800542e <_printf_i+0x216>
 8005448:	e7eb      	b.n	8005422 <_printf_i+0x20a>
 800544a:	2500      	movs	r5, #0
 800544c:	f104 0619 	add.w	r6, r4, #25
 8005450:	e7f5      	b.n	800543e <_printf_i+0x226>
 8005452:	bf00      	nop
 8005454:	08005d34 	.word	0x08005d34
 8005458:	08005d45 	.word	0x08005d45

0800545c <__sflush_r>:
 800545c:	898a      	ldrh	r2, [r1, #12]
 800545e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005462:	4605      	mov	r5, r0
 8005464:	0710      	lsls	r0, r2, #28
 8005466:	460c      	mov	r4, r1
 8005468:	d458      	bmi.n	800551c <__sflush_r+0xc0>
 800546a:	684b      	ldr	r3, [r1, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	dc05      	bgt.n	800547c <__sflush_r+0x20>
 8005470:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005472:	2b00      	cmp	r3, #0
 8005474:	dc02      	bgt.n	800547c <__sflush_r+0x20>
 8005476:	2000      	movs	r0, #0
 8005478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800547c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800547e:	2e00      	cmp	r6, #0
 8005480:	d0f9      	beq.n	8005476 <__sflush_r+0x1a>
 8005482:	2300      	movs	r3, #0
 8005484:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005488:	682f      	ldr	r7, [r5, #0]
 800548a:	6a21      	ldr	r1, [r4, #32]
 800548c:	602b      	str	r3, [r5, #0]
 800548e:	d032      	beq.n	80054f6 <__sflush_r+0x9a>
 8005490:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005492:	89a3      	ldrh	r3, [r4, #12]
 8005494:	075a      	lsls	r2, r3, #29
 8005496:	d505      	bpl.n	80054a4 <__sflush_r+0x48>
 8005498:	6863      	ldr	r3, [r4, #4]
 800549a:	1ac0      	subs	r0, r0, r3
 800549c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800549e:	b10b      	cbz	r3, 80054a4 <__sflush_r+0x48>
 80054a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054a2:	1ac0      	subs	r0, r0, r3
 80054a4:	2300      	movs	r3, #0
 80054a6:	4602      	mov	r2, r0
 80054a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054aa:	6a21      	ldr	r1, [r4, #32]
 80054ac:	4628      	mov	r0, r5
 80054ae:	47b0      	blx	r6
 80054b0:	1c43      	adds	r3, r0, #1
 80054b2:	89a3      	ldrh	r3, [r4, #12]
 80054b4:	d106      	bne.n	80054c4 <__sflush_r+0x68>
 80054b6:	6829      	ldr	r1, [r5, #0]
 80054b8:	291d      	cmp	r1, #29
 80054ba:	d82b      	bhi.n	8005514 <__sflush_r+0xb8>
 80054bc:	4a29      	ldr	r2, [pc, #164]	; (8005564 <__sflush_r+0x108>)
 80054be:	410a      	asrs	r2, r1
 80054c0:	07d6      	lsls	r6, r2, #31
 80054c2:	d427      	bmi.n	8005514 <__sflush_r+0xb8>
 80054c4:	2200      	movs	r2, #0
 80054c6:	6062      	str	r2, [r4, #4]
 80054c8:	04d9      	lsls	r1, r3, #19
 80054ca:	6922      	ldr	r2, [r4, #16]
 80054cc:	6022      	str	r2, [r4, #0]
 80054ce:	d504      	bpl.n	80054da <__sflush_r+0x7e>
 80054d0:	1c42      	adds	r2, r0, #1
 80054d2:	d101      	bne.n	80054d8 <__sflush_r+0x7c>
 80054d4:	682b      	ldr	r3, [r5, #0]
 80054d6:	b903      	cbnz	r3, 80054da <__sflush_r+0x7e>
 80054d8:	6560      	str	r0, [r4, #84]	; 0x54
 80054da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054dc:	602f      	str	r7, [r5, #0]
 80054de:	2900      	cmp	r1, #0
 80054e0:	d0c9      	beq.n	8005476 <__sflush_r+0x1a>
 80054e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054e6:	4299      	cmp	r1, r3
 80054e8:	d002      	beq.n	80054f0 <__sflush_r+0x94>
 80054ea:	4628      	mov	r0, r5
 80054ec:	f7ff fbce 	bl	8004c8c <_free_r>
 80054f0:	2000      	movs	r0, #0
 80054f2:	6360      	str	r0, [r4, #52]	; 0x34
 80054f4:	e7c0      	b.n	8005478 <__sflush_r+0x1c>
 80054f6:	2301      	movs	r3, #1
 80054f8:	4628      	mov	r0, r5
 80054fa:	47b0      	blx	r6
 80054fc:	1c41      	adds	r1, r0, #1
 80054fe:	d1c8      	bne.n	8005492 <__sflush_r+0x36>
 8005500:	682b      	ldr	r3, [r5, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d0c5      	beq.n	8005492 <__sflush_r+0x36>
 8005506:	2b1d      	cmp	r3, #29
 8005508:	d001      	beq.n	800550e <__sflush_r+0xb2>
 800550a:	2b16      	cmp	r3, #22
 800550c:	d101      	bne.n	8005512 <__sflush_r+0xb6>
 800550e:	602f      	str	r7, [r5, #0]
 8005510:	e7b1      	b.n	8005476 <__sflush_r+0x1a>
 8005512:	89a3      	ldrh	r3, [r4, #12]
 8005514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005518:	81a3      	strh	r3, [r4, #12]
 800551a:	e7ad      	b.n	8005478 <__sflush_r+0x1c>
 800551c:	690f      	ldr	r7, [r1, #16]
 800551e:	2f00      	cmp	r7, #0
 8005520:	d0a9      	beq.n	8005476 <__sflush_r+0x1a>
 8005522:	0793      	lsls	r3, r2, #30
 8005524:	680e      	ldr	r6, [r1, #0]
 8005526:	bf08      	it	eq
 8005528:	694b      	ldreq	r3, [r1, #20]
 800552a:	600f      	str	r7, [r1, #0]
 800552c:	bf18      	it	ne
 800552e:	2300      	movne	r3, #0
 8005530:	eba6 0807 	sub.w	r8, r6, r7
 8005534:	608b      	str	r3, [r1, #8]
 8005536:	f1b8 0f00 	cmp.w	r8, #0
 800553a:	dd9c      	ble.n	8005476 <__sflush_r+0x1a>
 800553c:	6a21      	ldr	r1, [r4, #32]
 800553e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005540:	4643      	mov	r3, r8
 8005542:	463a      	mov	r2, r7
 8005544:	4628      	mov	r0, r5
 8005546:	47b0      	blx	r6
 8005548:	2800      	cmp	r0, #0
 800554a:	dc06      	bgt.n	800555a <__sflush_r+0xfe>
 800554c:	89a3      	ldrh	r3, [r4, #12]
 800554e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005552:	81a3      	strh	r3, [r4, #12]
 8005554:	f04f 30ff 	mov.w	r0, #4294967295
 8005558:	e78e      	b.n	8005478 <__sflush_r+0x1c>
 800555a:	4407      	add	r7, r0
 800555c:	eba8 0800 	sub.w	r8, r8, r0
 8005560:	e7e9      	b.n	8005536 <__sflush_r+0xda>
 8005562:	bf00      	nop
 8005564:	dfbffffe 	.word	0xdfbffffe

08005568 <_fflush_r>:
 8005568:	b538      	push	{r3, r4, r5, lr}
 800556a:	690b      	ldr	r3, [r1, #16]
 800556c:	4605      	mov	r5, r0
 800556e:	460c      	mov	r4, r1
 8005570:	b913      	cbnz	r3, 8005578 <_fflush_r+0x10>
 8005572:	2500      	movs	r5, #0
 8005574:	4628      	mov	r0, r5
 8005576:	bd38      	pop	{r3, r4, r5, pc}
 8005578:	b118      	cbz	r0, 8005582 <_fflush_r+0x1a>
 800557a:	6a03      	ldr	r3, [r0, #32]
 800557c:	b90b      	cbnz	r3, 8005582 <_fflush_r+0x1a>
 800557e:	f7ff fa25 	bl	80049cc <__sinit>
 8005582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d0f3      	beq.n	8005572 <_fflush_r+0xa>
 800558a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800558c:	07d0      	lsls	r0, r2, #31
 800558e:	d404      	bmi.n	800559a <_fflush_r+0x32>
 8005590:	0599      	lsls	r1, r3, #22
 8005592:	d402      	bmi.n	800559a <_fflush_r+0x32>
 8005594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005596:	f7ff fb58 	bl	8004c4a <__retarget_lock_acquire_recursive>
 800559a:	4628      	mov	r0, r5
 800559c:	4621      	mov	r1, r4
 800559e:	f7ff ff5d 	bl	800545c <__sflush_r>
 80055a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055a4:	07da      	lsls	r2, r3, #31
 80055a6:	4605      	mov	r5, r0
 80055a8:	d4e4      	bmi.n	8005574 <_fflush_r+0xc>
 80055aa:	89a3      	ldrh	r3, [r4, #12]
 80055ac:	059b      	lsls	r3, r3, #22
 80055ae:	d4e1      	bmi.n	8005574 <_fflush_r+0xc>
 80055b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055b2:	f7ff fb4b 	bl	8004c4c <__retarget_lock_release_recursive>
 80055b6:	e7dd      	b.n	8005574 <_fflush_r+0xc>

080055b8 <fiprintf>:
 80055b8:	b40e      	push	{r1, r2, r3}
 80055ba:	b503      	push	{r0, r1, lr}
 80055bc:	4601      	mov	r1, r0
 80055be:	ab03      	add	r3, sp, #12
 80055c0:	4805      	ldr	r0, [pc, #20]	; (80055d8 <fiprintf+0x20>)
 80055c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80055c6:	6800      	ldr	r0, [r0, #0]
 80055c8:	9301      	str	r3, [sp, #4]
 80055ca:	f000 f89f 	bl	800570c <_vfiprintf_r>
 80055ce:	b002      	add	sp, #8
 80055d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80055d4:	b003      	add	sp, #12
 80055d6:	4770      	bx	lr
 80055d8:	20000064 	.word	0x20000064

080055dc <memmove>:
 80055dc:	4288      	cmp	r0, r1
 80055de:	b510      	push	{r4, lr}
 80055e0:	eb01 0402 	add.w	r4, r1, r2
 80055e4:	d902      	bls.n	80055ec <memmove+0x10>
 80055e6:	4284      	cmp	r4, r0
 80055e8:	4623      	mov	r3, r4
 80055ea:	d807      	bhi.n	80055fc <memmove+0x20>
 80055ec:	1e43      	subs	r3, r0, #1
 80055ee:	42a1      	cmp	r1, r4
 80055f0:	d008      	beq.n	8005604 <memmove+0x28>
 80055f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055fa:	e7f8      	b.n	80055ee <memmove+0x12>
 80055fc:	4402      	add	r2, r0
 80055fe:	4601      	mov	r1, r0
 8005600:	428a      	cmp	r2, r1
 8005602:	d100      	bne.n	8005606 <memmove+0x2a>
 8005604:	bd10      	pop	{r4, pc}
 8005606:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800560a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800560e:	e7f7      	b.n	8005600 <memmove+0x24>

08005610 <_sbrk_r>:
 8005610:	b538      	push	{r3, r4, r5, lr}
 8005612:	4d06      	ldr	r5, [pc, #24]	; (800562c <_sbrk_r+0x1c>)
 8005614:	2300      	movs	r3, #0
 8005616:	4604      	mov	r4, r0
 8005618:	4608      	mov	r0, r1
 800561a:	602b      	str	r3, [r5, #0]
 800561c:	f7fc f860 	bl	80016e0 <_sbrk>
 8005620:	1c43      	adds	r3, r0, #1
 8005622:	d102      	bne.n	800562a <_sbrk_r+0x1a>
 8005624:	682b      	ldr	r3, [r5, #0]
 8005626:	b103      	cbz	r3, 800562a <_sbrk_r+0x1a>
 8005628:	6023      	str	r3, [r4, #0]
 800562a:	bd38      	pop	{r3, r4, r5, pc}
 800562c:	2000022c 	.word	0x2000022c

08005630 <memcpy>:
 8005630:	440a      	add	r2, r1
 8005632:	4291      	cmp	r1, r2
 8005634:	f100 33ff 	add.w	r3, r0, #4294967295
 8005638:	d100      	bne.n	800563c <memcpy+0xc>
 800563a:	4770      	bx	lr
 800563c:	b510      	push	{r4, lr}
 800563e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005642:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005646:	4291      	cmp	r1, r2
 8005648:	d1f9      	bne.n	800563e <memcpy+0xe>
 800564a:	bd10      	pop	{r4, pc}

0800564c <abort>:
 800564c:	b508      	push	{r3, lr}
 800564e:	2006      	movs	r0, #6
 8005650:	f000 fa34 	bl	8005abc <raise>
 8005654:	2001      	movs	r0, #1
 8005656:	f7fb ffcb 	bl	80015f0 <_exit>

0800565a <_realloc_r>:
 800565a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800565e:	4680      	mov	r8, r0
 8005660:	4614      	mov	r4, r2
 8005662:	460e      	mov	r6, r1
 8005664:	b921      	cbnz	r1, 8005670 <_realloc_r+0x16>
 8005666:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800566a:	4611      	mov	r1, r2
 800566c:	f7ff bb82 	b.w	8004d74 <_malloc_r>
 8005670:	b92a      	cbnz	r2, 800567e <_realloc_r+0x24>
 8005672:	f7ff fb0b 	bl	8004c8c <_free_r>
 8005676:	4625      	mov	r5, r4
 8005678:	4628      	mov	r0, r5
 800567a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800567e:	f000 fa39 	bl	8005af4 <_malloc_usable_size_r>
 8005682:	4284      	cmp	r4, r0
 8005684:	4607      	mov	r7, r0
 8005686:	d802      	bhi.n	800568e <_realloc_r+0x34>
 8005688:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800568c:	d812      	bhi.n	80056b4 <_realloc_r+0x5a>
 800568e:	4621      	mov	r1, r4
 8005690:	4640      	mov	r0, r8
 8005692:	f7ff fb6f 	bl	8004d74 <_malloc_r>
 8005696:	4605      	mov	r5, r0
 8005698:	2800      	cmp	r0, #0
 800569a:	d0ed      	beq.n	8005678 <_realloc_r+0x1e>
 800569c:	42bc      	cmp	r4, r7
 800569e:	4622      	mov	r2, r4
 80056a0:	4631      	mov	r1, r6
 80056a2:	bf28      	it	cs
 80056a4:	463a      	movcs	r2, r7
 80056a6:	f7ff ffc3 	bl	8005630 <memcpy>
 80056aa:	4631      	mov	r1, r6
 80056ac:	4640      	mov	r0, r8
 80056ae:	f7ff faed 	bl	8004c8c <_free_r>
 80056b2:	e7e1      	b.n	8005678 <_realloc_r+0x1e>
 80056b4:	4635      	mov	r5, r6
 80056b6:	e7df      	b.n	8005678 <_realloc_r+0x1e>

080056b8 <__sfputc_r>:
 80056b8:	6893      	ldr	r3, [r2, #8]
 80056ba:	3b01      	subs	r3, #1
 80056bc:	2b00      	cmp	r3, #0
 80056be:	b410      	push	{r4}
 80056c0:	6093      	str	r3, [r2, #8]
 80056c2:	da08      	bge.n	80056d6 <__sfputc_r+0x1e>
 80056c4:	6994      	ldr	r4, [r2, #24]
 80056c6:	42a3      	cmp	r3, r4
 80056c8:	db01      	blt.n	80056ce <__sfputc_r+0x16>
 80056ca:	290a      	cmp	r1, #10
 80056cc:	d103      	bne.n	80056d6 <__sfputc_r+0x1e>
 80056ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056d2:	f000 b935 	b.w	8005940 <__swbuf_r>
 80056d6:	6813      	ldr	r3, [r2, #0]
 80056d8:	1c58      	adds	r0, r3, #1
 80056da:	6010      	str	r0, [r2, #0]
 80056dc:	7019      	strb	r1, [r3, #0]
 80056de:	4608      	mov	r0, r1
 80056e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <__sfputs_r>:
 80056e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056e8:	4606      	mov	r6, r0
 80056ea:	460f      	mov	r7, r1
 80056ec:	4614      	mov	r4, r2
 80056ee:	18d5      	adds	r5, r2, r3
 80056f0:	42ac      	cmp	r4, r5
 80056f2:	d101      	bne.n	80056f8 <__sfputs_r+0x12>
 80056f4:	2000      	movs	r0, #0
 80056f6:	e007      	b.n	8005708 <__sfputs_r+0x22>
 80056f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056fc:	463a      	mov	r2, r7
 80056fe:	4630      	mov	r0, r6
 8005700:	f7ff ffda 	bl	80056b8 <__sfputc_r>
 8005704:	1c43      	adds	r3, r0, #1
 8005706:	d1f3      	bne.n	80056f0 <__sfputs_r+0xa>
 8005708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800570c <_vfiprintf_r>:
 800570c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005710:	460d      	mov	r5, r1
 8005712:	b09d      	sub	sp, #116	; 0x74
 8005714:	4614      	mov	r4, r2
 8005716:	4698      	mov	r8, r3
 8005718:	4606      	mov	r6, r0
 800571a:	b118      	cbz	r0, 8005724 <_vfiprintf_r+0x18>
 800571c:	6a03      	ldr	r3, [r0, #32]
 800571e:	b90b      	cbnz	r3, 8005724 <_vfiprintf_r+0x18>
 8005720:	f7ff f954 	bl	80049cc <__sinit>
 8005724:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005726:	07d9      	lsls	r1, r3, #31
 8005728:	d405      	bmi.n	8005736 <_vfiprintf_r+0x2a>
 800572a:	89ab      	ldrh	r3, [r5, #12]
 800572c:	059a      	lsls	r2, r3, #22
 800572e:	d402      	bmi.n	8005736 <_vfiprintf_r+0x2a>
 8005730:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005732:	f7ff fa8a 	bl	8004c4a <__retarget_lock_acquire_recursive>
 8005736:	89ab      	ldrh	r3, [r5, #12]
 8005738:	071b      	lsls	r3, r3, #28
 800573a:	d501      	bpl.n	8005740 <_vfiprintf_r+0x34>
 800573c:	692b      	ldr	r3, [r5, #16]
 800573e:	b99b      	cbnz	r3, 8005768 <_vfiprintf_r+0x5c>
 8005740:	4629      	mov	r1, r5
 8005742:	4630      	mov	r0, r6
 8005744:	f000 f93a 	bl	80059bc <__swsetup_r>
 8005748:	b170      	cbz	r0, 8005768 <_vfiprintf_r+0x5c>
 800574a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800574c:	07dc      	lsls	r4, r3, #31
 800574e:	d504      	bpl.n	800575a <_vfiprintf_r+0x4e>
 8005750:	f04f 30ff 	mov.w	r0, #4294967295
 8005754:	b01d      	add	sp, #116	; 0x74
 8005756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800575a:	89ab      	ldrh	r3, [r5, #12]
 800575c:	0598      	lsls	r0, r3, #22
 800575e:	d4f7      	bmi.n	8005750 <_vfiprintf_r+0x44>
 8005760:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005762:	f7ff fa73 	bl	8004c4c <__retarget_lock_release_recursive>
 8005766:	e7f3      	b.n	8005750 <_vfiprintf_r+0x44>
 8005768:	2300      	movs	r3, #0
 800576a:	9309      	str	r3, [sp, #36]	; 0x24
 800576c:	2320      	movs	r3, #32
 800576e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005772:	f8cd 800c 	str.w	r8, [sp, #12]
 8005776:	2330      	movs	r3, #48	; 0x30
 8005778:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800592c <_vfiprintf_r+0x220>
 800577c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005780:	f04f 0901 	mov.w	r9, #1
 8005784:	4623      	mov	r3, r4
 8005786:	469a      	mov	sl, r3
 8005788:	f813 2b01 	ldrb.w	r2, [r3], #1
 800578c:	b10a      	cbz	r2, 8005792 <_vfiprintf_r+0x86>
 800578e:	2a25      	cmp	r2, #37	; 0x25
 8005790:	d1f9      	bne.n	8005786 <_vfiprintf_r+0x7a>
 8005792:	ebba 0b04 	subs.w	fp, sl, r4
 8005796:	d00b      	beq.n	80057b0 <_vfiprintf_r+0xa4>
 8005798:	465b      	mov	r3, fp
 800579a:	4622      	mov	r2, r4
 800579c:	4629      	mov	r1, r5
 800579e:	4630      	mov	r0, r6
 80057a0:	f7ff ffa1 	bl	80056e6 <__sfputs_r>
 80057a4:	3001      	adds	r0, #1
 80057a6:	f000 80a9 	beq.w	80058fc <_vfiprintf_r+0x1f0>
 80057aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057ac:	445a      	add	r2, fp
 80057ae:	9209      	str	r2, [sp, #36]	; 0x24
 80057b0:	f89a 3000 	ldrb.w	r3, [sl]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 80a1 	beq.w	80058fc <_vfiprintf_r+0x1f0>
 80057ba:	2300      	movs	r3, #0
 80057bc:	f04f 32ff 	mov.w	r2, #4294967295
 80057c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057c4:	f10a 0a01 	add.w	sl, sl, #1
 80057c8:	9304      	str	r3, [sp, #16]
 80057ca:	9307      	str	r3, [sp, #28]
 80057cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057d0:	931a      	str	r3, [sp, #104]	; 0x68
 80057d2:	4654      	mov	r4, sl
 80057d4:	2205      	movs	r2, #5
 80057d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057da:	4854      	ldr	r0, [pc, #336]	; (800592c <_vfiprintf_r+0x220>)
 80057dc:	f7fa fcf8 	bl	80001d0 <memchr>
 80057e0:	9a04      	ldr	r2, [sp, #16]
 80057e2:	b9d8      	cbnz	r0, 800581c <_vfiprintf_r+0x110>
 80057e4:	06d1      	lsls	r1, r2, #27
 80057e6:	bf44      	itt	mi
 80057e8:	2320      	movmi	r3, #32
 80057ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057ee:	0713      	lsls	r3, r2, #28
 80057f0:	bf44      	itt	mi
 80057f2:	232b      	movmi	r3, #43	; 0x2b
 80057f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057f8:	f89a 3000 	ldrb.w	r3, [sl]
 80057fc:	2b2a      	cmp	r3, #42	; 0x2a
 80057fe:	d015      	beq.n	800582c <_vfiprintf_r+0x120>
 8005800:	9a07      	ldr	r2, [sp, #28]
 8005802:	4654      	mov	r4, sl
 8005804:	2000      	movs	r0, #0
 8005806:	f04f 0c0a 	mov.w	ip, #10
 800580a:	4621      	mov	r1, r4
 800580c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005810:	3b30      	subs	r3, #48	; 0x30
 8005812:	2b09      	cmp	r3, #9
 8005814:	d94d      	bls.n	80058b2 <_vfiprintf_r+0x1a6>
 8005816:	b1b0      	cbz	r0, 8005846 <_vfiprintf_r+0x13a>
 8005818:	9207      	str	r2, [sp, #28]
 800581a:	e014      	b.n	8005846 <_vfiprintf_r+0x13a>
 800581c:	eba0 0308 	sub.w	r3, r0, r8
 8005820:	fa09 f303 	lsl.w	r3, r9, r3
 8005824:	4313      	orrs	r3, r2
 8005826:	9304      	str	r3, [sp, #16]
 8005828:	46a2      	mov	sl, r4
 800582a:	e7d2      	b.n	80057d2 <_vfiprintf_r+0xc6>
 800582c:	9b03      	ldr	r3, [sp, #12]
 800582e:	1d19      	adds	r1, r3, #4
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	9103      	str	r1, [sp, #12]
 8005834:	2b00      	cmp	r3, #0
 8005836:	bfbb      	ittet	lt
 8005838:	425b      	neglt	r3, r3
 800583a:	f042 0202 	orrlt.w	r2, r2, #2
 800583e:	9307      	strge	r3, [sp, #28]
 8005840:	9307      	strlt	r3, [sp, #28]
 8005842:	bfb8      	it	lt
 8005844:	9204      	strlt	r2, [sp, #16]
 8005846:	7823      	ldrb	r3, [r4, #0]
 8005848:	2b2e      	cmp	r3, #46	; 0x2e
 800584a:	d10c      	bne.n	8005866 <_vfiprintf_r+0x15a>
 800584c:	7863      	ldrb	r3, [r4, #1]
 800584e:	2b2a      	cmp	r3, #42	; 0x2a
 8005850:	d134      	bne.n	80058bc <_vfiprintf_r+0x1b0>
 8005852:	9b03      	ldr	r3, [sp, #12]
 8005854:	1d1a      	adds	r2, r3, #4
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	9203      	str	r2, [sp, #12]
 800585a:	2b00      	cmp	r3, #0
 800585c:	bfb8      	it	lt
 800585e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005862:	3402      	adds	r4, #2
 8005864:	9305      	str	r3, [sp, #20]
 8005866:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800593c <_vfiprintf_r+0x230>
 800586a:	7821      	ldrb	r1, [r4, #0]
 800586c:	2203      	movs	r2, #3
 800586e:	4650      	mov	r0, sl
 8005870:	f7fa fcae 	bl	80001d0 <memchr>
 8005874:	b138      	cbz	r0, 8005886 <_vfiprintf_r+0x17a>
 8005876:	9b04      	ldr	r3, [sp, #16]
 8005878:	eba0 000a 	sub.w	r0, r0, sl
 800587c:	2240      	movs	r2, #64	; 0x40
 800587e:	4082      	lsls	r2, r0
 8005880:	4313      	orrs	r3, r2
 8005882:	3401      	adds	r4, #1
 8005884:	9304      	str	r3, [sp, #16]
 8005886:	f814 1b01 	ldrb.w	r1, [r4], #1
 800588a:	4829      	ldr	r0, [pc, #164]	; (8005930 <_vfiprintf_r+0x224>)
 800588c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005890:	2206      	movs	r2, #6
 8005892:	f7fa fc9d 	bl	80001d0 <memchr>
 8005896:	2800      	cmp	r0, #0
 8005898:	d03f      	beq.n	800591a <_vfiprintf_r+0x20e>
 800589a:	4b26      	ldr	r3, [pc, #152]	; (8005934 <_vfiprintf_r+0x228>)
 800589c:	bb1b      	cbnz	r3, 80058e6 <_vfiprintf_r+0x1da>
 800589e:	9b03      	ldr	r3, [sp, #12]
 80058a0:	3307      	adds	r3, #7
 80058a2:	f023 0307 	bic.w	r3, r3, #7
 80058a6:	3308      	adds	r3, #8
 80058a8:	9303      	str	r3, [sp, #12]
 80058aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058ac:	443b      	add	r3, r7
 80058ae:	9309      	str	r3, [sp, #36]	; 0x24
 80058b0:	e768      	b.n	8005784 <_vfiprintf_r+0x78>
 80058b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80058b6:	460c      	mov	r4, r1
 80058b8:	2001      	movs	r0, #1
 80058ba:	e7a6      	b.n	800580a <_vfiprintf_r+0xfe>
 80058bc:	2300      	movs	r3, #0
 80058be:	3401      	adds	r4, #1
 80058c0:	9305      	str	r3, [sp, #20]
 80058c2:	4619      	mov	r1, r3
 80058c4:	f04f 0c0a 	mov.w	ip, #10
 80058c8:	4620      	mov	r0, r4
 80058ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058ce:	3a30      	subs	r2, #48	; 0x30
 80058d0:	2a09      	cmp	r2, #9
 80058d2:	d903      	bls.n	80058dc <_vfiprintf_r+0x1d0>
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d0c6      	beq.n	8005866 <_vfiprintf_r+0x15a>
 80058d8:	9105      	str	r1, [sp, #20]
 80058da:	e7c4      	b.n	8005866 <_vfiprintf_r+0x15a>
 80058dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80058e0:	4604      	mov	r4, r0
 80058e2:	2301      	movs	r3, #1
 80058e4:	e7f0      	b.n	80058c8 <_vfiprintf_r+0x1bc>
 80058e6:	ab03      	add	r3, sp, #12
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	462a      	mov	r2, r5
 80058ec:	4b12      	ldr	r3, [pc, #72]	; (8005938 <_vfiprintf_r+0x22c>)
 80058ee:	a904      	add	r1, sp, #16
 80058f0:	4630      	mov	r0, r6
 80058f2:	f3af 8000 	nop.w
 80058f6:	4607      	mov	r7, r0
 80058f8:	1c78      	adds	r0, r7, #1
 80058fa:	d1d6      	bne.n	80058aa <_vfiprintf_r+0x19e>
 80058fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058fe:	07d9      	lsls	r1, r3, #31
 8005900:	d405      	bmi.n	800590e <_vfiprintf_r+0x202>
 8005902:	89ab      	ldrh	r3, [r5, #12]
 8005904:	059a      	lsls	r2, r3, #22
 8005906:	d402      	bmi.n	800590e <_vfiprintf_r+0x202>
 8005908:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800590a:	f7ff f99f 	bl	8004c4c <__retarget_lock_release_recursive>
 800590e:	89ab      	ldrh	r3, [r5, #12]
 8005910:	065b      	lsls	r3, r3, #25
 8005912:	f53f af1d 	bmi.w	8005750 <_vfiprintf_r+0x44>
 8005916:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005918:	e71c      	b.n	8005754 <_vfiprintf_r+0x48>
 800591a:	ab03      	add	r3, sp, #12
 800591c:	9300      	str	r3, [sp, #0]
 800591e:	462a      	mov	r2, r5
 8005920:	4b05      	ldr	r3, [pc, #20]	; (8005938 <_vfiprintf_r+0x22c>)
 8005922:	a904      	add	r1, sp, #16
 8005924:	4630      	mov	r0, r6
 8005926:	f7ff fc77 	bl	8005218 <_printf_i>
 800592a:	e7e4      	b.n	80058f6 <_vfiprintf_r+0x1ea>
 800592c:	08005d23 	.word	0x08005d23
 8005930:	08005d2d 	.word	0x08005d2d
 8005934:	00000000 	.word	0x00000000
 8005938:	080056e7 	.word	0x080056e7
 800593c:	08005d29 	.word	0x08005d29

08005940 <__swbuf_r>:
 8005940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005942:	460e      	mov	r6, r1
 8005944:	4614      	mov	r4, r2
 8005946:	4605      	mov	r5, r0
 8005948:	b118      	cbz	r0, 8005952 <__swbuf_r+0x12>
 800594a:	6a03      	ldr	r3, [r0, #32]
 800594c:	b90b      	cbnz	r3, 8005952 <__swbuf_r+0x12>
 800594e:	f7ff f83d 	bl	80049cc <__sinit>
 8005952:	69a3      	ldr	r3, [r4, #24]
 8005954:	60a3      	str	r3, [r4, #8]
 8005956:	89a3      	ldrh	r3, [r4, #12]
 8005958:	071a      	lsls	r2, r3, #28
 800595a:	d525      	bpl.n	80059a8 <__swbuf_r+0x68>
 800595c:	6923      	ldr	r3, [r4, #16]
 800595e:	b31b      	cbz	r3, 80059a8 <__swbuf_r+0x68>
 8005960:	6823      	ldr	r3, [r4, #0]
 8005962:	6922      	ldr	r2, [r4, #16]
 8005964:	1a98      	subs	r0, r3, r2
 8005966:	6963      	ldr	r3, [r4, #20]
 8005968:	b2f6      	uxtb	r6, r6
 800596a:	4283      	cmp	r3, r0
 800596c:	4637      	mov	r7, r6
 800596e:	dc04      	bgt.n	800597a <__swbuf_r+0x3a>
 8005970:	4621      	mov	r1, r4
 8005972:	4628      	mov	r0, r5
 8005974:	f7ff fdf8 	bl	8005568 <_fflush_r>
 8005978:	b9e0      	cbnz	r0, 80059b4 <__swbuf_r+0x74>
 800597a:	68a3      	ldr	r3, [r4, #8]
 800597c:	3b01      	subs	r3, #1
 800597e:	60a3      	str	r3, [r4, #8]
 8005980:	6823      	ldr	r3, [r4, #0]
 8005982:	1c5a      	adds	r2, r3, #1
 8005984:	6022      	str	r2, [r4, #0]
 8005986:	701e      	strb	r6, [r3, #0]
 8005988:	6962      	ldr	r2, [r4, #20]
 800598a:	1c43      	adds	r3, r0, #1
 800598c:	429a      	cmp	r2, r3
 800598e:	d004      	beq.n	800599a <__swbuf_r+0x5a>
 8005990:	89a3      	ldrh	r3, [r4, #12]
 8005992:	07db      	lsls	r3, r3, #31
 8005994:	d506      	bpl.n	80059a4 <__swbuf_r+0x64>
 8005996:	2e0a      	cmp	r6, #10
 8005998:	d104      	bne.n	80059a4 <__swbuf_r+0x64>
 800599a:	4621      	mov	r1, r4
 800599c:	4628      	mov	r0, r5
 800599e:	f7ff fde3 	bl	8005568 <_fflush_r>
 80059a2:	b938      	cbnz	r0, 80059b4 <__swbuf_r+0x74>
 80059a4:	4638      	mov	r0, r7
 80059a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059a8:	4621      	mov	r1, r4
 80059aa:	4628      	mov	r0, r5
 80059ac:	f000 f806 	bl	80059bc <__swsetup_r>
 80059b0:	2800      	cmp	r0, #0
 80059b2:	d0d5      	beq.n	8005960 <__swbuf_r+0x20>
 80059b4:	f04f 37ff 	mov.w	r7, #4294967295
 80059b8:	e7f4      	b.n	80059a4 <__swbuf_r+0x64>
	...

080059bc <__swsetup_r>:
 80059bc:	b538      	push	{r3, r4, r5, lr}
 80059be:	4b2a      	ldr	r3, [pc, #168]	; (8005a68 <__swsetup_r+0xac>)
 80059c0:	4605      	mov	r5, r0
 80059c2:	6818      	ldr	r0, [r3, #0]
 80059c4:	460c      	mov	r4, r1
 80059c6:	b118      	cbz	r0, 80059d0 <__swsetup_r+0x14>
 80059c8:	6a03      	ldr	r3, [r0, #32]
 80059ca:	b90b      	cbnz	r3, 80059d0 <__swsetup_r+0x14>
 80059cc:	f7fe fffe 	bl	80049cc <__sinit>
 80059d0:	89a3      	ldrh	r3, [r4, #12]
 80059d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80059d6:	0718      	lsls	r0, r3, #28
 80059d8:	d422      	bmi.n	8005a20 <__swsetup_r+0x64>
 80059da:	06d9      	lsls	r1, r3, #27
 80059dc:	d407      	bmi.n	80059ee <__swsetup_r+0x32>
 80059de:	2309      	movs	r3, #9
 80059e0:	602b      	str	r3, [r5, #0]
 80059e2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80059e6:	81a3      	strh	r3, [r4, #12]
 80059e8:	f04f 30ff 	mov.w	r0, #4294967295
 80059ec:	e034      	b.n	8005a58 <__swsetup_r+0x9c>
 80059ee:	0758      	lsls	r0, r3, #29
 80059f0:	d512      	bpl.n	8005a18 <__swsetup_r+0x5c>
 80059f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059f4:	b141      	cbz	r1, 8005a08 <__swsetup_r+0x4c>
 80059f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059fa:	4299      	cmp	r1, r3
 80059fc:	d002      	beq.n	8005a04 <__swsetup_r+0x48>
 80059fe:	4628      	mov	r0, r5
 8005a00:	f7ff f944 	bl	8004c8c <_free_r>
 8005a04:	2300      	movs	r3, #0
 8005a06:	6363      	str	r3, [r4, #52]	; 0x34
 8005a08:	89a3      	ldrh	r3, [r4, #12]
 8005a0a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a0e:	81a3      	strh	r3, [r4, #12]
 8005a10:	2300      	movs	r3, #0
 8005a12:	6063      	str	r3, [r4, #4]
 8005a14:	6923      	ldr	r3, [r4, #16]
 8005a16:	6023      	str	r3, [r4, #0]
 8005a18:	89a3      	ldrh	r3, [r4, #12]
 8005a1a:	f043 0308 	orr.w	r3, r3, #8
 8005a1e:	81a3      	strh	r3, [r4, #12]
 8005a20:	6923      	ldr	r3, [r4, #16]
 8005a22:	b94b      	cbnz	r3, 8005a38 <__swsetup_r+0x7c>
 8005a24:	89a3      	ldrh	r3, [r4, #12]
 8005a26:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a2e:	d003      	beq.n	8005a38 <__swsetup_r+0x7c>
 8005a30:	4621      	mov	r1, r4
 8005a32:	4628      	mov	r0, r5
 8005a34:	f000 f88c 	bl	8005b50 <__smakebuf_r>
 8005a38:	89a0      	ldrh	r0, [r4, #12]
 8005a3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a3e:	f010 0301 	ands.w	r3, r0, #1
 8005a42:	d00a      	beq.n	8005a5a <__swsetup_r+0x9e>
 8005a44:	2300      	movs	r3, #0
 8005a46:	60a3      	str	r3, [r4, #8]
 8005a48:	6963      	ldr	r3, [r4, #20]
 8005a4a:	425b      	negs	r3, r3
 8005a4c:	61a3      	str	r3, [r4, #24]
 8005a4e:	6923      	ldr	r3, [r4, #16]
 8005a50:	b943      	cbnz	r3, 8005a64 <__swsetup_r+0xa8>
 8005a52:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005a56:	d1c4      	bne.n	80059e2 <__swsetup_r+0x26>
 8005a58:	bd38      	pop	{r3, r4, r5, pc}
 8005a5a:	0781      	lsls	r1, r0, #30
 8005a5c:	bf58      	it	pl
 8005a5e:	6963      	ldrpl	r3, [r4, #20]
 8005a60:	60a3      	str	r3, [r4, #8]
 8005a62:	e7f4      	b.n	8005a4e <__swsetup_r+0x92>
 8005a64:	2000      	movs	r0, #0
 8005a66:	e7f7      	b.n	8005a58 <__swsetup_r+0x9c>
 8005a68:	20000064 	.word	0x20000064

08005a6c <_raise_r>:
 8005a6c:	291f      	cmp	r1, #31
 8005a6e:	b538      	push	{r3, r4, r5, lr}
 8005a70:	4604      	mov	r4, r0
 8005a72:	460d      	mov	r5, r1
 8005a74:	d904      	bls.n	8005a80 <_raise_r+0x14>
 8005a76:	2316      	movs	r3, #22
 8005a78:	6003      	str	r3, [r0, #0]
 8005a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a7e:	bd38      	pop	{r3, r4, r5, pc}
 8005a80:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005a82:	b112      	cbz	r2, 8005a8a <_raise_r+0x1e>
 8005a84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005a88:	b94b      	cbnz	r3, 8005a9e <_raise_r+0x32>
 8005a8a:	4620      	mov	r0, r4
 8005a8c:	f000 f830 	bl	8005af0 <_getpid_r>
 8005a90:	462a      	mov	r2, r5
 8005a92:	4601      	mov	r1, r0
 8005a94:	4620      	mov	r0, r4
 8005a96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a9a:	f000 b817 	b.w	8005acc <_kill_r>
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d00a      	beq.n	8005ab8 <_raise_r+0x4c>
 8005aa2:	1c59      	adds	r1, r3, #1
 8005aa4:	d103      	bne.n	8005aae <_raise_r+0x42>
 8005aa6:	2316      	movs	r3, #22
 8005aa8:	6003      	str	r3, [r0, #0]
 8005aaa:	2001      	movs	r0, #1
 8005aac:	e7e7      	b.n	8005a7e <_raise_r+0x12>
 8005aae:	2400      	movs	r4, #0
 8005ab0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005ab4:	4628      	mov	r0, r5
 8005ab6:	4798      	blx	r3
 8005ab8:	2000      	movs	r0, #0
 8005aba:	e7e0      	b.n	8005a7e <_raise_r+0x12>

08005abc <raise>:
 8005abc:	4b02      	ldr	r3, [pc, #8]	; (8005ac8 <raise+0xc>)
 8005abe:	4601      	mov	r1, r0
 8005ac0:	6818      	ldr	r0, [r3, #0]
 8005ac2:	f7ff bfd3 	b.w	8005a6c <_raise_r>
 8005ac6:	bf00      	nop
 8005ac8:	20000064 	.word	0x20000064

08005acc <_kill_r>:
 8005acc:	b538      	push	{r3, r4, r5, lr}
 8005ace:	4d07      	ldr	r5, [pc, #28]	; (8005aec <_kill_r+0x20>)
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	4604      	mov	r4, r0
 8005ad4:	4608      	mov	r0, r1
 8005ad6:	4611      	mov	r1, r2
 8005ad8:	602b      	str	r3, [r5, #0]
 8005ada:	f7fb fd79 	bl	80015d0 <_kill>
 8005ade:	1c43      	adds	r3, r0, #1
 8005ae0:	d102      	bne.n	8005ae8 <_kill_r+0x1c>
 8005ae2:	682b      	ldr	r3, [r5, #0]
 8005ae4:	b103      	cbz	r3, 8005ae8 <_kill_r+0x1c>
 8005ae6:	6023      	str	r3, [r4, #0]
 8005ae8:	bd38      	pop	{r3, r4, r5, pc}
 8005aea:	bf00      	nop
 8005aec:	2000022c 	.word	0x2000022c

08005af0 <_getpid_r>:
 8005af0:	f7fb bd66 	b.w	80015c0 <_getpid>

08005af4 <_malloc_usable_size_r>:
 8005af4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005af8:	1f18      	subs	r0, r3, #4
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	bfbc      	itt	lt
 8005afe:	580b      	ldrlt	r3, [r1, r0]
 8005b00:	18c0      	addlt	r0, r0, r3
 8005b02:	4770      	bx	lr

08005b04 <__swhatbuf_r>:
 8005b04:	b570      	push	{r4, r5, r6, lr}
 8005b06:	460c      	mov	r4, r1
 8005b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b0c:	2900      	cmp	r1, #0
 8005b0e:	b096      	sub	sp, #88	; 0x58
 8005b10:	4615      	mov	r5, r2
 8005b12:	461e      	mov	r6, r3
 8005b14:	da0d      	bge.n	8005b32 <__swhatbuf_r+0x2e>
 8005b16:	89a3      	ldrh	r3, [r4, #12]
 8005b18:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005b1c:	f04f 0100 	mov.w	r1, #0
 8005b20:	bf0c      	ite	eq
 8005b22:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005b26:	2340      	movne	r3, #64	; 0x40
 8005b28:	2000      	movs	r0, #0
 8005b2a:	6031      	str	r1, [r6, #0]
 8005b2c:	602b      	str	r3, [r5, #0]
 8005b2e:	b016      	add	sp, #88	; 0x58
 8005b30:	bd70      	pop	{r4, r5, r6, pc}
 8005b32:	466a      	mov	r2, sp
 8005b34:	f000 f848 	bl	8005bc8 <_fstat_r>
 8005b38:	2800      	cmp	r0, #0
 8005b3a:	dbec      	blt.n	8005b16 <__swhatbuf_r+0x12>
 8005b3c:	9901      	ldr	r1, [sp, #4]
 8005b3e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005b42:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005b46:	4259      	negs	r1, r3
 8005b48:	4159      	adcs	r1, r3
 8005b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b4e:	e7eb      	b.n	8005b28 <__swhatbuf_r+0x24>

08005b50 <__smakebuf_r>:
 8005b50:	898b      	ldrh	r3, [r1, #12]
 8005b52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b54:	079d      	lsls	r5, r3, #30
 8005b56:	4606      	mov	r6, r0
 8005b58:	460c      	mov	r4, r1
 8005b5a:	d507      	bpl.n	8005b6c <__smakebuf_r+0x1c>
 8005b5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b60:	6023      	str	r3, [r4, #0]
 8005b62:	6123      	str	r3, [r4, #16]
 8005b64:	2301      	movs	r3, #1
 8005b66:	6163      	str	r3, [r4, #20]
 8005b68:	b002      	add	sp, #8
 8005b6a:	bd70      	pop	{r4, r5, r6, pc}
 8005b6c:	ab01      	add	r3, sp, #4
 8005b6e:	466a      	mov	r2, sp
 8005b70:	f7ff ffc8 	bl	8005b04 <__swhatbuf_r>
 8005b74:	9900      	ldr	r1, [sp, #0]
 8005b76:	4605      	mov	r5, r0
 8005b78:	4630      	mov	r0, r6
 8005b7a:	f7ff f8fb 	bl	8004d74 <_malloc_r>
 8005b7e:	b948      	cbnz	r0, 8005b94 <__smakebuf_r+0x44>
 8005b80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b84:	059a      	lsls	r2, r3, #22
 8005b86:	d4ef      	bmi.n	8005b68 <__smakebuf_r+0x18>
 8005b88:	f023 0303 	bic.w	r3, r3, #3
 8005b8c:	f043 0302 	orr.w	r3, r3, #2
 8005b90:	81a3      	strh	r3, [r4, #12]
 8005b92:	e7e3      	b.n	8005b5c <__smakebuf_r+0xc>
 8005b94:	89a3      	ldrh	r3, [r4, #12]
 8005b96:	6020      	str	r0, [r4, #0]
 8005b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b9c:	81a3      	strh	r3, [r4, #12]
 8005b9e:	9b00      	ldr	r3, [sp, #0]
 8005ba0:	6163      	str	r3, [r4, #20]
 8005ba2:	9b01      	ldr	r3, [sp, #4]
 8005ba4:	6120      	str	r0, [r4, #16]
 8005ba6:	b15b      	cbz	r3, 8005bc0 <__smakebuf_r+0x70>
 8005ba8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bac:	4630      	mov	r0, r6
 8005bae:	f000 f81d 	bl	8005bec <_isatty_r>
 8005bb2:	b128      	cbz	r0, 8005bc0 <__smakebuf_r+0x70>
 8005bb4:	89a3      	ldrh	r3, [r4, #12]
 8005bb6:	f023 0303 	bic.w	r3, r3, #3
 8005bba:	f043 0301 	orr.w	r3, r3, #1
 8005bbe:	81a3      	strh	r3, [r4, #12]
 8005bc0:	89a3      	ldrh	r3, [r4, #12]
 8005bc2:	431d      	orrs	r5, r3
 8005bc4:	81a5      	strh	r5, [r4, #12]
 8005bc6:	e7cf      	b.n	8005b68 <__smakebuf_r+0x18>

08005bc8 <_fstat_r>:
 8005bc8:	b538      	push	{r3, r4, r5, lr}
 8005bca:	4d07      	ldr	r5, [pc, #28]	; (8005be8 <_fstat_r+0x20>)
 8005bcc:	2300      	movs	r3, #0
 8005bce:	4604      	mov	r4, r0
 8005bd0:	4608      	mov	r0, r1
 8005bd2:	4611      	mov	r1, r2
 8005bd4:	602b      	str	r3, [r5, #0]
 8005bd6:	f7fb fd5a 	bl	800168e <_fstat>
 8005bda:	1c43      	adds	r3, r0, #1
 8005bdc:	d102      	bne.n	8005be4 <_fstat_r+0x1c>
 8005bde:	682b      	ldr	r3, [r5, #0]
 8005be0:	b103      	cbz	r3, 8005be4 <_fstat_r+0x1c>
 8005be2:	6023      	str	r3, [r4, #0]
 8005be4:	bd38      	pop	{r3, r4, r5, pc}
 8005be6:	bf00      	nop
 8005be8:	2000022c 	.word	0x2000022c

08005bec <_isatty_r>:
 8005bec:	b538      	push	{r3, r4, r5, lr}
 8005bee:	4d06      	ldr	r5, [pc, #24]	; (8005c08 <_isatty_r+0x1c>)
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	4604      	mov	r4, r0
 8005bf4:	4608      	mov	r0, r1
 8005bf6:	602b      	str	r3, [r5, #0]
 8005bf8:	f7fb fd59 	bl	80016ae <_isatty>
 8005bfc:	1c43      	adds	r3, r0, #1
 8005bfe:	d102      	bne.n	8005c06 <_isatty_r+0x1a>
 8005c00:	682b      	ldr	r3, [r5, #0]
 8005c02:	b103      	cbz	r3, 8005c06 <_isatty_r+0x1a>
 8005c04:	6023      	str	r3, [r4, #0]
 8005c06:	bd38      	pop	{r3, r4, r5, pc}
 8005c08:	2000022c 	.word	0x2000022c

08005c0c <_gettimeofday>:
 8005c0c:	4b02      	ldr	r3, [pc, #8]	; (8005c18 <_gettimeofday+0xc>)
 8005c0e:	2258      	movs	r2, #88	; 0x58
 8005c10:	601a      	str	r2, [r3, #0]
 8005c12:	f04f 30ff 	mov.w	r0, #4294967295
 8005c16:	4770      	bx	lr
 8005c18:	2000022c 	.word	0x2000022c

08005c1c <_init>:
 8005c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c1e:	bf00      	nop
 8005c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c22:	bc08      	pop	{r3}
 8005c24:	469e      	mov	lr, r3
 8005c26:	4770      	bx	lr

08005c28 <_fini>:
 8005c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c2a:	bf00      	nop
 8005c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c2e:	bc08      	pop	{r3}
 8005c30:	469e      	mov	lr, r3
 8005c32:	4770      	bx	lr
