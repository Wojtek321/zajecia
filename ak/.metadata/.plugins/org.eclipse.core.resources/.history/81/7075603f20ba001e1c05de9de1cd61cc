/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

#include "lcd.h"
#include "stdlib.h"
#include "stdbool.h"
#include <time.h>

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int MAX_DOLNA_GRANICA = -100;
int MAX_GORNA_GRANICA = 100;
int tablica[] = {0, 0, 0};

char *przycisk();
int ustaw_dolna_granice();
int ustaw_gorna_granice();
void zgaduj(int dolny_zakres, int gorny_zakres, int wylosowana_liczba, int id_gracza);
int losuj_liczbe(int dolna_granica, int gorna_granica);
int wybierz_id();
int liczba_cyfr(int liczba);
void dodajZnak(char tablica[], char znak);
void wypisz_tabele();


void wypisz_tabele()
{
	char pierwsza[20] = "id: ";

	dodajZnak(pierwsza, '1');
	int l_cyfr = liczba_cyfr(tablica[0]);
	for(int i=0; i<l_cyfr; i++)
	{
		dodajZnak(pierwsza, ' ');
	}

	dodajZnak(pierwsza, '|');
	dodajZnak(pierwsza, ' ');
	dodajZnak(pierwsza, '2');
	l_cyfr = liczba_cyfr(tablica[1]);
	for(int i=0; i<l_cyfr; i++)
	{
		dodajZnak(pierwsza, ' ');
	}

	dodajZnak(pierwsza, '|');
	dodajZnak(pierwsza, ' ');
	dodajZnak(pierwsza, '3');


	char buff[20];

	lcd_clear();
	lcd_print(1, 1, pierwsza);
	sprintf(buff, "    %d | %d | %d", tablica[0], tablica[1], tablica[2]);
	lcd_print(2, 1, buff);

	while(1)
	{
		if(strcmp(przycisk(), "SELECT")==0)
		{
			break;
		}
		HAL_Delay(300);
	}
}

void dodajZnak(char tablica[], char znak)
{
    int i = 0;

    while (tablica[i] != '\0')
    {
        i++;
    }

    tablica[i] = znak;
    tablica[i + 1] = '\0';
}

int liczba_cyfr(int liczba)
{
	int liczba_cyfr = 0;

	if(liczba<10)
	{
		return 1;
	}

	while (liczba != 0)
	{
		liczba /= 10;
	    liczba_cyfr++;
	}

	return liczba_cyfr;
}

int wybierz_id()
{
	int id=1;
	char buff[10];

	lcd_clear();
	lcd_print(1, 1, "Wybierz ID: 1-3");
	lcd_print(2, 1, "ID = 1");

	while(1)
	{
		if(strcmp(przycisk(), "RIGHT")==0)
		{
			id++;
			if(id > 3)
			{
				id = 3;
			}
			sprintf(buff, "ID = %d", id);
			lcd_clear();
			lcd_print(1, 1, "Wybierz ID: 1-3");
			lcd_print(2, 1, buff);
		}
		else if(strcmp(przycisk(), "LEFT")==0)
		{
			id--;
			if(id < 1)
			{
				id = 1;
			}
			sprintf(buff, "ID = %d", id);
			lcd_clear();
			lcd_print(1, 1, "Wybierz ID: 1-3");
			lcd_print(2, 1, buff);
		}
		else if(strcmp(przycisk(), "SELECT")==0)
		{
			break;
		}
		HAL_Delay(300);
	}

	return id;
}

void zgaduj(int dolny_zakres, int gorny_zakres, int wylosowana_liczba, int id_gracza)
{
	int liczba_prob = 0;
	int typowana_liczba = 0;

	char buff[20];
	sprintf(buff, "%d", typowana_liczba);

	lcd_clear();
	lcd_print(1, 1, "Twoja liczba:");
	lcd_print(2, 1, buff);


	while(1)
	{
		if(strcmp(przycisk(), "RIGHT")==0)
		{
			typowana_liczba++;
			if(typowana_liczba > gorny_zakres)
			{
				typowana_liczba = gorny_zakres;
			}
			sprintf(buff, "%d", typowana_liczba);
			lcd_clear();
			lcd_print(1, 1, "Twoja liczba:");
			lcd_print(2, 1, buff);
		}
		else if(strcmp(przycisk(), "UP")==0)
		{
			typowana_liczba += 10;
			if(typowana_liczba > gorny_zakres)
			{
				typowana_liczba = gorny_zakres;
			}
			sprintf(buff, "%d", typowana_liczba);
			lcd_clear();
			lcd_print(1, 1, "Twoja liczba:");
			lcd_print(2, 1, buff);
		}
		else if(strcmp(przycisk(), "LEFT")==0)
		{
			typowana_liczba--;
			if(typowana_liczba < dolny_zakres)
			{
				typowana_liczba = dolny_zakres;
			}
			sprintf(buff, "%d", typowana_liczba);
			lcd_clear();
			lcd_print(1, 1, "Twoja liczba:");
			lcd_print(2, 1, buff);
		}
		else if(strcmp(przycisk(), "DOWN")==0)
		{
			typowana_liczba -= 10;
			if(typowana_liczba < dolny_zakres)
			{
				typowana_liczba = dolny_zakres;
			}
			sprintf(buff, "%d", typowana_liczba);
			lcd_clear();
			lcd_print(1, 1, "Twoja liczba:");
			lcd_print(2, 1, buff);
		}
		else if(strcmp(przycisk(), "SELECT")==0)
		{
			liczba_prob++;

			if(typowana_liczba == wylosowana_liczba)
			{
				tablica[id_gracza-1]++;
				sprintf(buff, "Liczba prob: %d", liczba_prob);
				lcd_clear();
				lcd_print(1, 1, "Udalo sie!");
				lcd_print(2, 1, buff);
				HAL_Delay(4000);
				break;
			}
			else if(wylosowana_liczba < typowana_liczba)
			{
				lcd_clear();
				lcd_print(1, 1, "Wyloswana liczba");
				lcd_print(2, 1, "jest mniejsza");
				HAL_Delay(2500);

				typowana_liczba = 0;
				sprintf(buff, "%d", typowana_liczba);
				lcd_clear();
				lcd_print(1, 1, "Twoja liczba:");
				lcd_print(2, 1, buff);
			}
			else if(wylosowana_liczba > typowana_liczba)
			{
				lcd_clear();
				lcd_print(1, 1, "Wyloswana liczba");
				lcd_print(2, 1, "jest wieksza");
				HAL_Delay(2500);

				typowana_liczba = 0;
				sprintf(buff, "%d", typowana_liczba);
				lcd_clear();
				lcd_print(1, 1, "Twoja liczba:");
				lcd_print(2, 1, buff);
			}
		}
		HAL_Delay(300);
	}
}

int losuj_liczbe(int dolna_granica, int gorna_granica)
{
	return rand() % (gorna_granica - dolna_granica + 1) + dolna_granica;
}

int ustaw_gorna_granice()
{
	int gorna_granica = 0;

	char buff[10];
	sprintf(buff, "%d", gorna_granica);

	lcd_clear();
	lcd_print(1, 1, "Gorna granica:");
	lcd_print(2, 1, buff);

	while(1)
	{
		if(strcmp(przycisk(), "RIGHT")==0)
		{
			gorna_granica++;
			if(gorna_granica > MAX_GORNA_GRANICA)
			{
				gorna_granica = MAX_GORNA_GRANICA;
			}
			sprintf(buff, "%d", gorna_granica);
			lcd_clear();
			lcd_print(1, 1, "Gorna granica:");
			lcd_print(2, 1, buff);
		}
		else if(strcmp(przycisk(), "UP")==0)
		{
			gorna_granica += 10;
			if(gorna_granica > MAX_GORNA_GRANICA)
			{
				gorna_granica = MAX_GORNA_GRANICA;
			}
			sprintf(buff, "%d", gorna_granica);
			lcd_clear();
			lcd_print(1, 1, "Gorna granica:");
			lcd_print(2, 1, buff);
		}
		else if(strcmp(przycisk(), "LEFT")==0)
		{
			gorna_granica--;
			if(gorna_granica < MAX_DOLNA_GRANICA)
			{
				gorna_granica = MAX_DOLNA_GRANICA;
			}
			sprintf(buff, "%d", gorna_granica);
			lcd_clear();
			lcd_print(1, 1, "Gorna granica:");
			lcd_print(2, 1, buff);
		}
		else if(strcmp(przycisk(), "DOWN")==0)
		{
			gorna_granica -= 10;
			if(gorna_granica < MAX_DOLNA_GRANICA)
			{
				gorna_granica = MAX_DOLNA_GRANICA;
			}
			sprintf(buff, "%d", gorna_granica);
			lcd_clear();
			lcd_print(1, 1, "Gorna granica:");
			lcd_print(2, 1, buff);
		}
		else if(strcmp(przycisk(), "SELECT")==0)
		{
			break;
		}
		HAL_Delay(300);
	}

	return gorna_granica;
}

int ustaw_dolna_granice()
{
	int dolna_granica = 0;

	char buff[10];
	sprintf(buff, "%d", dolna_granica);

	lcd_clear();
	lcd_print(1, 1, "Dolna granica:");
	lcd_print(2, 1, buff);

	while(1)
	{
		if(strcmp(przycisk(), "RIGHT")==0)
		{
			dolna_granica++;
			if(dolna_granica > MAX_GORNA_GRANICA)
			{
				dolna_granica = MAX_GORNA_GRANICA;
			}
			sprintf(buff, "%d", dolna_granica);
			lcd_clear();
			lcd_print(1, 1, "Dolna granica:");
			lcd_print(2, 1, buff);
		}
		else if(strcmp(przycisk(), "UP")==0)
		{
			dolna_granica += 10;
			if(dolna_granica > MAX_GORNA_GRANICA)
			{
				dolna_granica = MAX_GORNA_GRANICA;
			}
			sprintf(buff, "%d", dolna_granica);
			lcd_clear();
			lcd_print(1, 1, "Dolna granica:");
			lcd_print(2, 1, buff);
		}
		else if(strcmp(przycisk(), "LEFT")==0)
		{
			dolna_granica--;
			if(dolna_granica < MAX_DOLNA_GRANICA)
			{
				dolna_granica = MAX_DOLNA_GRANICA;
			}
			sprintf(buff, "%d", dolna_granica);
			lcd_clear();
			lcd_print(1, 1, "Dolna granica:");
			lcd_print(2, 1, buff);
		}
		else if(strcmp(przycisk(), "DOWN")==0)
		{
			dolna_granica -= 10;
			if(dolna_granica < MAX_DOLNA_GRANICA)
			{
				dolna_granica = MAX_DOLNA_GRANICA;
			}
			sprintf(buff, "%d", dolna_granica);
			lcd_clear();
			lcd_print(1, 1, "Dolna granica:");
			lcd_print(2, 1, buff);
		}
		else if(strcmp(przycisk(), "SELECT")==0)
		{
			break;
		}
		HAL_Delay(300);
	}

	return dolna_granica;
}

char *przycisk()
{
	uint32_t analogValue;

	HAL_ADC_Start(&hadc1);
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
	analogValue = HAL_ADC_GetValue(&hadc1);

	if(analogValue<100)
	{
		  return "RIGHT";
	}
	else if(analogValue<700)
	{
		  return "UP";
	}
	else if(analogValue<1600)
	{
		  return "DOWN";
	}
	else if(analogValue<2700)
	{
		  return "LEFT";
	}
	else if(analogValue<3850)
	{
		  return "SELECT";
	}
	else
	{
		  return "NIC";
	}
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_ADC1_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */

  lcd_init(_LCD_4BIT, _LCD_FONT_5x8, _LCD_2LINE);
  srand(time(NULL));


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  int id = wybierz_id();
	  HAL_Delay(500);

	  int dolna_granica = ustaw_dolna_granice();
	  HAL_Delay(500);

	  int gorna_granica = ustaw_gorna_granice();
	  HAL_Delay(500);

	  while(gorna_granica <= dolna_granica)
	  {
		  lcd_clear();
	  	  lcd_print(1, 1, "Niepoprawny");
	  	  lcd_print(2, 1, "Zakres!");
	  	  HAL_Delay(2500);
	  	  dolna_granica = ustaw_dolna_granice();
	  	  HAL_Delay(500);
	  	  gorna_granica = ustaw_gorna_granice();
	  	  HAL_Delay(500);
	  }

	  int wylosowana_liczba = losuj_liczbe(dolna_granica, gorna_granica);

	  zgaduj(dolna_granica, gorna_granica, wylosowana_liczba, id);

	  wypisz_tabele();
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.OversamplingMode = DISABLE;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_D7_Pin|LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin */
  GPIO_InitStruct.Pin = LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : LCD_EN_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LCD_EN_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LCD_D7_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
