
timery_albo_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08004640  08004640  00014640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046d8  080046d8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080046d8  080046d8  000146d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046e0  080046e0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046e0  080046e0  000146e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046e4  080046e4  000146e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080046e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  2000005c  08004744  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08004744  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bc59  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b8a  00000000  00000000  0002bd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a30  00000000  00000000  0002d8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007c6  00000000  00000000  0002e2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000268d9  00000000  00000000  0002eaae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cdd2  00000000  00000000  00055387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eda84  00000000  00000000  00062159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002db4  00000000  00000000  0014fbe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00152994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004628 	.word	0x08004628

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004628 	.word	0x08004628

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <Delay>:
#include "stm32l4xx_hal.h"
#include "main.h"
#include "lcd.h"

void Delay(uint32_t nCount)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  for(; nCount != 0; nCount--);
 8000574:	e002      	b.n	800057c <Delay+0x10>
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	3b01      	subs	r3, #1
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d1f9      	bne.n	8000576 <Delay+0xa>
}
 8000582:	bf00      	nop
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <lcd_delay>:
void lcd_delay(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	Delay(200);
 8000594:	20c8      	movs	r0, #200	; 0xc8
 8000596:	f7ff ffe9 	bl	800056c <Delay>
}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
	...

080005a0 <lcd_cmd>:

void lcd_cmd(char out_char)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->BRR  = LCD_RS_Pin;
 80005aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005b2:	629a      	str	r2, [r3, #40]	; 0x28

	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 80005b4:	4b5e      	ldr	r3, [pc, #376]	; (8000730 <lcd_cmd+0x190>)
 80005b6:	2280      	movs	r2, #128	; 0x80
 80005b8:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 80005ba:	4b5e      	ldr	r3, [pc, #376]	; (8000734 <lcd_cmd+0x194>)
 80005bc:	2220      	movs	r2, #32
 80005be:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 80005c0:	4b5c      	ldr	r3, [pc, #368]	; (8000734 <lcd_cmd+0x194>)
 80005c2:	2210      	movs	r2, #16
 80005c4:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 80005c6:	4b5b      	ldr	r3, [pc, #364]	; (8000734 <lcd_cmd+0x194>)
 80005c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005cc:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 80005ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005d6:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 80005d8:	f7ff ffda 	bl	8000590 <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 80005dc:	4b54      	ldr	r3, [pc, #336]	; (8000730 <lcd_cmd+0x190>)
 80005de:	695b      	ldr	r3, [r3, #20]
 80005e0:	4a53      	ldr	r2, [pc, #332]	; (8000730 <lcd_cmd+0x190>)
 80005e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e6:	6153      	str	r3, [r2, #20]

	if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	f003 0310 	and.w	r3, r3, #16
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d003      	beq.n	80005fa <lcd_cmd+0x5a>
 80005f2:	4b50      	ldr	r3, [pc, #320]	; (8000734 <lcd_cmd+0x194>)
 80005f4:	2220      	movs	r2, #32
 80005f6:	619a      	str	r2, [r3, #24]
 80005f8:	e003      	b.n	8000602 <lcd_cmd+0x62>
 80005fa:	4b4e      	ldr	r3, [pc, #312]	; (8000734 <lcd_cmd+0x194>)
 80005fc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000600:	619a      	str	r2, [r3, #24]
	if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	f003 0320 	and.w	r3, r3, #32
 8000608:	2b00      	cmp	r3, #0
 800060a:	d003      	beq.n	8000614 <lcd_cmd+0x74>
 800060c:	4b49      	ldr	r3, [pc, #292]	; (8000734 <lcd_cmd+0x194>)
 800060e:	2210      	movs	r2, #16
 8000610:	619a      	str	r2, [r3, #24]
 8000612:	e003      	b.n	800061c <lcd_cmd+0x7c>
 8000614:	4b47      	ldr	r3, [pc, #284]	; (8000734 <lcd_cmd+0x194>)
 8000616:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800061a:	619a      	str	r2, [r3, #24]
	if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000622:	2b00      	cmp	r3, #0
 8000624:	d004      	beq.n	8000630 <lcd_cmd+0x90>
 8000626:	4b43      	ldr	r3, [pc, #268]	; (8000734 <lcd_cmd+0x194>)
 8000628:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800062c:	619a      	str	r2, [r3, #24]
 800062e:	e003      	b.n	8000638 <lcd_cmd+0x98>
 8000630:	4b40      	ldr	r3, [pc, #256]	; (8000734 <lcd_cmd+0x194>)
 8000632:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000636:	619a      	str	r2, [r3, #24]
	if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063c:	2b00      	cmp	r3, #0
 800063e:	da05      	bge.n	800064c <lcd_cmd+0xac>
 8000640:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000644:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000648:	619a      	str	r2, [r3, #24]
 800064a:	e004      	b.n	8000656 <lcd_cmd+0xb6>
 800064c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000650:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000654:	619a      	str	r2, [r3, #24]

	lcd_delay();
 8000656:	f7ff ff9b 	bl	8000590 <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 800065a:	4b35      	ldr	r3, [pc, #212]	; (8000730 <lcd_cmd+0x190>)
 800065c:	2280      	movs	r2, #128	; 0x80
 800065e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000660:	4b34      	ldr	r3, [pc, #208]	; (8000734 <lcd_cmd+0x194>)
 8000662:	2220      	movs	r2, #32
 8000664:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000666:	4b33      	ldr	r3, [pc, #204]	; (8000734 <lcd_cmd+0x194>)
 8000668:	2210      	movs	r2, #16
 800066a:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 800066c:	4b31      	ldr	r3, [pc, #196]	; (8000734 <lcd_cmd+0x194>)
 800066e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000672:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000674:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000678:	f44f 7280 	mov.w	r2, #256	; 0x100
 800067c:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 800067e:	f7ff ff87 	bl	8000590 <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000682:	4b2b      	ldr	r3, [pc, #172]	; (8000730 <lcd_cmd+0x190>)
 8000684:	695b      	ldr	r3, [r3, #20]
 8000686:	4a2a      	ldr	r2, [pc, #168]	; (8000730 <lcd_cmd+0x190>)
 8000688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800068c:	6153      	str	r3, [r2, #20]

	if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	f003 0301 	and.w	r3, r3, #1
 8000694:	2b00      	cmp	r3, #0
 8000696:	d003      	beq.n	80006a0 <lcd_cmd+0x100>
 8000698:	4b26      	ldr	r3, [pc, #152]	; (8000734 <lcd_cmd+0x194>)
 800069a:	2220      	movs	r2, #32
 800069c:	619a      	str	r2, [r3, #24]
 800069e:	e003      	b.n	80006a8 <lcd_cmd+0x108>
 80006a0:	4b24      	ldr	r3, [pc, #144]	; (8000734 <lcd_cmd+0x194>)
 80006a2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80006a6:	619a      	str	r2, [r3, #24]
	if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	f003 0302 	and.w	r3, r3, #2
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d003      	beq.n	80006ba <lcd_cmd+0x11a>
 80006b2:	4b20      	ldr	r3, [pc, #128]	; (8000734 <lcd_cmd+0x194>)
 80006b4:	2210      	movs	r2, #16
 80006b6:	619a      	str	r2, [r3, #24]
 80006b8:	e003      	b.n	80006c2 <lcd_cmd+0x122>
 80006ba:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <lcd_cmd+0x194>)
 80006bc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80006c0:	619a      	str	r2, [r3, #24]
	if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	f003 0304 	and.w	r3, r3, #4
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d004      	beq.n	80006d6 <lcd_cmd+0x136>
 80006cc:	4b19      	ldr	r3, [pc, #100]	; (8000734 <lcd_cmd+0x194>)
 80006ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006d2:	619a      	str	r2, [r3, #24]
 80006d4:	e003      	b.n	80006de <lcd_cmd+0x13e>
 80006d6:	4b17      	ldr	r3, [pc, #92]	; (8000734 <lcd_cmd+0x194>)
 80006d8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80006dc:	619a      	str	r2, [r3, #24]
	if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	f003 0308 	and.w	r3, r3, #8
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d005      	beq.n	80006f4 <lcd_cmd+0x154>
 80006e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006f0:	619a      	str	r2, [r3, #24]
 80006f2:	e004      	b.n	80006fe <lcd_cmd+0x15e>
 80006f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80006fc:	619a      	str	r2, [r3, #24]

	lcd_delay();
 80006fe:	f7ff ff47 	bl	8000590 <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <lcd_cmd+0x190>)
 8000704:	2280      	movs	r2, #128	; 0x80
 8000706:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <lcd_cmd+0x194>)
 800070a:	2220      	movs	r2, #32
 800070c:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <lcd_cmd+0x194>)
 8000710:	2210      	movs	r2, #16
 8000712:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <lcd_cmd+0x194>)
 8000716:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800071a:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 800071c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000720:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000724:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	48000800 	.word	0x48000800
 8000734:	48000400 	.word	0x48000400

08000738 <lcd_char_cp>:

void lcd_char_cp(char out_char)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->ODR |= LCD_RS_Pin;
 8000742:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000746:	695b      	ldr	r3, [r3, #20]
 8000748:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800074c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000750:	6153      	str	r3, [r2, #20]

	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 8000752:	4b5e      	ldr	r3, [pc, #376]	; (80008cc <lcd_char_cp+0x194>)
 8000754:	2280      	movs	r2, #128	; 0x80
 8000756:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 8000758:	4b5d      	ldr	r3, [pc, #372]	; (80008d0 <lcd_char_cp+0x198>)
 800075a:	2220      	movs	r2, #32
 800075c:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 800075e:	4b5c      	ldr	r3, [pc, #368]	; (80008d0 <lcd_char_cp+0x198>)
 8000760:	2210      	movs	r2, #16
 8000762:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 8000764:	4b5a      	ldr	r3, [pc, #360]	; (80008d0 <lcd_char_cp+0x198>)
 8000766:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800076a:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 800076c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000770:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000774:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 8000776:	f7ff ff0b 	bl	8000590 <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 800077a:	4b54      	ldr	r3, [pc, #336]	; (80008cc <lcd_char_cp+0x194>)
 800077c:	695b      	ldr	r3, [r3, #20]
 800077e:	4a53      	ldr	r2, [pc, #332]	; (80008cc <lcd_char_cp+0x194>)
 8000780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000784:	6153      	str	r3, [r2, #20]

	if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	f003 0310 	and.w	r3, r3, #16
 800078c:	2b00      	cmp	r3, #0
 800078e:	d003      	beq.n	8000798 <lcd_char_cp+0x60>
 8000790:	4b4f      	ldr	r3, [pc, #316]	; (80008d0 <lcd_char_cp+0x198>)
 8000792:	2220      	movs	r2, #32
 8000794:	619a      	str	r2, [r3, #24]
 8000796:	e003      	b.n	80007a0 <lcd_char_cp+0x68>
 8000798:	4b4d      	ldr	r3, [pc, #308]	; (80008d0 <lcd_char_cp+0x198>)
 800079a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800079e:	619a      	str	r2, [r3, #24]
	if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	f003 0320 	and.w	r3, r3, #32
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d003      	beq.n	80007b2 <lcd_char_cp+0x7a>
 80007aa:	4b49      	ldr	r3, [pc, #292]	; (80008d0 <lcd_char_cp+0x198>)
 80007ac:	2210      	movs	r2, #16
 80007ae:	619a      	str	r2, [r3, #24]
 80007b0:	e003      	b.n	80007ba <lcd_char_cp+0x82>
 80007b2:	4b47      	ldr	r3, [pc, #284]	; (80008d0 <lcd_char_cp+0x198>)
 80007b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80007b8:	619a      	str	r2, [r3, #24]
	if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d004      	beq.n	80007ce <lcd_char_cp+0x96>
 80007c4:	4b42      	ldr	r3, [pc, #264]	; (80008d0 <lcd_char_cp+0x198>)
 80007c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007ca:	619a      	str	r2, [r3, #24]
 80007cc:	e003      	b.n	80007d6 <lcd_char_cp+0x9e>
 80007ce:	4b40      	ldr	r3, [pc, #256]	; (80008d0 <lcd_char_cp+0x198>)
 80007d0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80007d4:	619a      	str	r2, [r3, #24]
	if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 80007d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	da05      	bge.n	80007ea <lcd_char_cp+0xb2>
 80007de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007e6:	619a      	str	r2, [r3, #24]
 80007e8:	e004      	b.n	80007f4 <lcd_char_cp+0xbc>
 80007ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80007f2:	619a      	str	r2, [r3, #24]

	lcd_delay();
 80007f4:	f7ff fecc 	bl	8000590 <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 80007f8:	4b34      	ldr	r3, [pc, #208]	; (80008cc <lcd_char_cp+0x194>)
 80007fa:	2280      	movs	r2, #128	; 0x80
 80007fc:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 80007fe:	4b34      	ldr	r3, [pc, #208]	; (80008d0 <lcd_char_cp+0x198>)
 8000800:	2220      	movs	r2, #32
 8000802:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000804:	4b32      	ldr	r3, [pc, #200]	; (80008d0 <lcd_char_cp+0x198>)
 8000806:	2210      	movs	r2, #16
 8000808:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 800080a:	4b31      	ldr	r3, [pc, #196]	; (80008d0 <lcd_char_cp+0x198>)
 800080c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000810:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000812:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000816:	f44f 7280 	mov.w	r2, #256	; 0x100
 800081a:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 800081c:	f7ff feb8 	bl	8000590 <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000820:	4b2a      	ldr	r3, [pc, #168]	; (80008cc <lcd_char_cp+0x194>)
 8000822:	695b      	ldr	r3, [r3, #20]
 8000824:	4a29      	ldr	r2, [pc, #164]	; (80008cc <lcd_char_cp+0x194>)
 8000826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800082a:	6153      	str	r3, [r2, #20]

	if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	2b00      	cmp	r3, #0
 8000834:	d003      	beq.n	800083e <lcd_char_cp+0x106>
 8000836:	4b26      	ldr	r3, [pc, #152]	; (80008d0 <lcd_char_cp+0x198>)
 8000838:	2220      	movs	r2, #32
 800083a:	619a      	str	r2, [r3, #24]
 800083c:	e003      	b.n	8000846 <lcd_char_cp+0x10e>
 800083e:	4b24      	ldr	r3, [pc, #144]	; (80008d0 <lcd_char_cp+0x198>)
 8000840:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000844:	619a      	str	r2, [r3, #24]
	if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	f003 0302 	and.w	r3, r3, #2
 800084c:	2b00      	cmp	r3, #0
 800084e:	d003      	beq.n	8000858 <lcd_char_cp+0x120>
 8000850:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <lcd_char_cp+0x198>)
 8000852:	2210      	movs	r2, #16
 8000854:	619a      	str	r2, [r3, #24]
 8000856:	e003      	b.n	8000860 <lcd_char_cp+0x128>
 8000858:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <lcd_char_cp+0x198>)
 800085a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800085e:	619a      	str	r2, [r3, #24]
	if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	f003 0304 	and.w	r3, r3, #4
 8000866:	2b00      	cmp	r3, #0
 8000868:	d004      	beq.n	8000874 <lcd_char_cp+0x13c>
 800086a:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <lcd_char_cp+0x198>)
 800086c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000870:	619a      	str	r2, [r3, #24]
 8000872:	e003      	b.n	800087c <lcd_char_cp+0x144>
 8000874:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <lcd_char_cp+0x198>)
 8000876:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800087a:	619a      	str	r2, [r3, #24]
	if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	f003 0308 	and.w	r3, r3, #8
 8000882:	2b00      	cmp	r3, #0
 8000884:	d005      	beq.n	8000892 <lcd_char_cp+0x15a>
 8000886:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800088a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800088e:	619a      	str	r2, [r3, #24]
 8000890:	e004      	b.n	800089c <lcd_char_cp+0x164>
 8000892:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000896:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800089a:	619a      	str	r2, [r3, #24]

	lcd_delay();
 800089c:	f7ff fe78 	bl	8000590 <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 80008a0:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <lcd_char_cp+0x194>)
 80008a2:	2280      	movs	r2, #128	; 0x80
 80008a4:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 80008a6:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <lcd_char_cp+0x198>)
 80008a8:	2220      	movs	r2, #32
 80008aa:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <lcd_char_cp+0x198>)
 80008ae:	2210      	movs	r2, #16
 80008b0:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 80008b2:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <lcd_char_cp+0x198>)
 80008b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008b8:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 80008ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	48000800 	.word	0x48000800
 80008d0:	48000400 	.word	0x48000400

080008d4 <lcd_out_cp>:

void lcd_out_cp(char *out_char)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	while(*out_char)
 80008dc:	e008      	b.n	80008f0 <lcd_out_cp+0x1c>
	{
		lcd_char_cp(*out_char++);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	1c5a      	adds	r2, r3, #1
 80008e2:	607a      	str	r2, [r7, #4]
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff ff26 	bl	8000738 <lcd_char_cp>
        lcd_delay();
 80008ec:	f7ff fe50 	bl	8000590 <lcd_delay>
	while(*out_char)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d1f2      	bne.n	80008de <lcd_out_cp+0xa>
	}

}
 80008f8:	bf00      	nop
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <lcd_init>:


void lcd_init(char bits, char font, char lines)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af00      	add	r7, sp, #0
 8000908:	4603      	mov	r3, r0
 800090a:	71fb      	strb	r3, [r7, #7]
 800090c:	460b      	mov	r3, r1
 800090e:	71bb      	strb	r3, [r7, #6]
 8000910:	4613      	mov	r3, r2
 8000912:	717b      	strb	r3, [r7, #5]
    HAL_Delay(250);
 8000914:	20fa      	movs	r0, #250	; 0xfa
 8000916:	f000 fbb5 	bl	8001084 <HAL_Delay>
		lcd_cmd(_RETURN_HOME);
 800091a:	2002      	movs	r0, #2
 800091c:	f7ff fe40 	bl	80005a0 <lcd_cmd>
    HAL_Delay(50);
 8000920:	2032      	movs	r0, #50	; 0x32
 8000922:	f000 fbaf 	bl	8001084 <HAL_Delay>
    lcd_cmd(0x20 | bits | font | lines);
 8000926:	79fa      	ldrb	r2, [r7, #7]
 8000928:	79bb      	ldrb	r3, [r7, #6]
 800092a:	4313      	orrs	r3, r2
 800092c:	b2da      	uxtb	r2, r3
 800092e:	797b      	ldrb	r3, [r7, #5]
 8000930:	4313      	orrs	r3, r2
 8000932:	b2db      	uxtb	r3, r3
 8000934:	f043 0320 	orr.w	r3, r3, #32
 8000938:	b2db      	uxtb	r3, r3
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff fe30 	bl	80005a0 <lcd_cmd>
    HAL_Delay(50);
 8000940:	2032      	movs	r0, #50	; 0x32
 8000942:	f000 fb9f 	bl	8001084 <HAL_Delay>
    lcd_cmd(_LCD_INIT);
 8000946:	2006      	movs	r0, #6
 8000948:	f7ff fe2a 	bl	80005a0 <lcd_cmd>
    HAL_Delay(50);
 800094c:	2032      	movs	r0, #50	; 0x32
 800094e:	f000 fb99 	bl	8001084 <HAL_Delay>
    lcd_cmd(0x0E);
 8000952:	200e      	movs	r0, #14
 8000954:	f7ff fe24 	bl	80005a0 <lcd_cmd>
    HAL_Delay(50);
 8000958:	2032      	movs	r0, #50	; 0x32
 800095a:	f000 fb93 	bl	8001084 <HAL_Delay>
    lcd_cmd(0x0C);
 800095e:	200c      	movs	r0, #12
 8000960:	f7ff fe1e 	bl	80005a0 <lcd_cmd>
    HAL_Delay(50);
 8000964:	2032      	movs	r0, #50	; 0x32
 8000966:	f000 fb8d 	bl	8001084 <HAL_Delay>
    lcd_cmd(0x01);
 800096a:	2001      	movs	r0, #1
 800096c:	f7ff fe18 	bl	80005a0 <lcd_cmd>
    HAL_Delay(100);
 8000970:	2064      	movs	r0, #100	; 0x64
 8000972:	f000 fb87 	bl	8001084 <HAL_Delay>
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b082      	sub	sp, #8
 8000982:	af00      	add	r7, sp, #0
 8000984:	4603      	mov	r3, r0
 8000986:	460a      	mov	r2, r1
 8000988:	71fb      	strb	r3, [r7, #7]
 800098a:	4613      	mov	r3, r2
 800098c:	71bb      	strb	r3, [r7, #6]
	if(row == 1)
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	2b01      	cmp	r3, #1
 8000992:	d106      	bne.n	80009a2 <lcd_gotoxy+0x24>
	{
		lcd_cmd(0x80 + (column - 1));
 8000994:	79bb      	ldrb	r3, [r7, #6]
 8000996:	337f      	adds	r3, #127	; 0x7f
 8000998:	b2db      	uxtb	r3, r3
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff fe00 	bl	80005a0 <lcd_cmd>
 80009a0:	e008      	b.n	80009b4 <lcd_gotoxy+0x36>
	}
	else if(row == 2)
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	d105      	bne.n	80009b4 <lcd_gotoxy+0x36>
	{
		lcd_cmd(0xC0 + (column - 1));
 80009a8:	79bb      	ldrb	r3, [r7, #6]
 80009aa:	3b41      	subs	r3, #65	; 0x41
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff fdf6 	bl	80005a0 <lcd_cmd>
	}
    HAL_Delay(5);
 80009b4:	2005      	movs	r0, #5
 80009b6:	f000 fb65 	bl	8001084 <HAL_Delay>

}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <lcd_print>:
	lcd_gotoxy(row, column);
	lcd_char_cp(out_char);
}

void lcd_print(unsigned char row, unsigned char column, char *out_char)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b082      	sub	sp, #8
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	4603      	mov	r3, r0
 80009ca:	603a      	str	r2, [r7, #0]
 80009cc:	71fb      	strb	r3, [r7, #7]
 80009ce:	460b      	mov	r3, r1
 80009d0:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 80009d2:	79ba      	ldrb	r2, [r7, #6]
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	4611      	mov	r1, r2
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ffd0 	bl	800097e <lcd_gotoxy>
	lcd_out_cp(out_char);
 80009de:	6838      	ldr	r0, [r7, #0]
 80009e0:	f7ff ff78 	bl	80008d4 <lcd_out_cp>
    HAL_Delay(5);
 80009e4:	2005      	movs	r0, #5
 80009e6:	f000 fb4d 	bl	8001084 <HAL_Delay>
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <lcd_clear>:
void lcd_clear(void) {
 80009f2:	b580      	push	{r7, lr}
 80009f4:	af00      	add	r7, sp, #0

	lcd_cmd(_CLEAR);
 80009f6:	2001      	movs	r0, #1
 80009f8:	f7ff fdd2 	bl	80005a0 <lcd_cmd>
    HAL_Delay(5);
 80009fc:	2005      	movs	r0, #5
 80009fe:	f000 fb41 	bl	8001084 <HAL_Delay>

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a08:	b5b0      	push	{r4, r5, r7, lr}
 8000a0a:	b096      	sub	sp, #88	; 0x58
 8000a0c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a0e:	f000 fac4 	bl	8000f9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a12:	f000 f857 	bl	8000ac4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a16:	f000 f8f5 	bl	8000c04 <MX_GPIO_Init>
  MX_RTC_Init();
 8000a1a:	f000 f89b 	bl	8000b54 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000a1e:	f000 f8c1 	bl	8000ba4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  lcd_init(_LCD_4BIT, _LCD_FONT_5x8, _LCD_2LINE);
 8000a22:	2208      	movs	r2, #8
 8000a24:	2100      	movs	r1, #0
 8000a26:	2000      	movs	r0, #0
 8000a28:	f7ff ff6b 	bl	8000902 <lcd_init>

  RTC_TimeTypeDef new_time;
  new_time.Hours = 7;
 8000a2c:	2307      	movs	r3, #7
 8000a2e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  new_time.Minutes = 45;
 8000a32:	232d      	movs	r3, #45	; 0x2d
 8000a34:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  new_time.Seconds = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  RTC_DateTypeDef new_date;
  new_date.Year = 23;
 8000a3e:	2317      	movs	r3, #23
 8000a40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  new_date.Month = 12;
 8000a44:	230c      	movs	r3, #12
 8000a46:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  new_date.Date = 15;
 8000a4a:	230f      	movs	r3, #15
 8000a4c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  HAL_RTC_SetTime(&hrtc, &new_time, RTC_FORMAT_BIN);
 8000a50:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a54:	2200      	movs	r2, #0
 8000a56:	4619      	mov	r1, r3
 8000a58:	4818      	ldr	r0, [pc, #96]	; (8000abc <main+0xb4>)
 8000a5a:	f002 f987 	bl	8002d6c <HAL_RTC_SetTime>
  HAL_RTC_SetDate(&hrtc, &new_date, RTC_FORMAT_BIN);
 8000a5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a62:	2200      	movs	r2, #0
 8000a64:	4619      	mov	r1, r3
 8000a66:	4815      	ldr	r0, [pc, #84]	; (8000abc <main+0xb4>)
 8000a68:	f002 fa79 	bl	8002f5e <HAL_RTC_SetDate>

  RTC_TimeTypeDef time;
  RTC_DateTypeDef date;

  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	2200      	movs	r2, #0
 8000a72:	4619      	mov	r1, r3
 8000a74:	4811      	ldr	r0, [pc, #68]	; (8000abc <main+0xb4>)
 8000a76:	f002 fa16 	bl	8002ea6 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8000a7a:	f107 0318 	add.w	r3, r7, #24
 8000a7e:	2200      	movs	r2, #0
 8000a80:	4619      	mov	r1, r3
 8000a82:	480e      	ldr	r0, [pc, #56]	; (8000abc <main+0xb4>)
 8000a84:	f002 faf2 	bl	800306c <HAL_RTC_GetDate>

  char text[17];  // "YYYY-MM-DD HH:MM\0"
  sprintf(text, "%04d-%02d-%02d %02d:%02d", date.Year + 2000, date.Month, date.Date, time.Hours, time.Minutes);
 8000a88:	7efb      	ldrb	r3, [r7, #27]
 8000a8a:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8000a8e:	7e7b      	ldrb	r3, [r7, #25]
 8000a90:	461d      	mov	r5, r3
 8000a92:	7ebb      	ldrb	r3, [r7, #26]
 8000a94:	7f39      	ldrb	r1, [r7, #28]
 8000a96:	7f78      	ldrb	r0, [r7, #29]
 8000a98:	4604      	mov	r4, r0
 8000a9a:	1d38      	adds	r0, r7, #4
 8000a9c:	9402      	str	r4, [sp, #8]
 8000a9e:	9101      	str	r1, [sp, #4]
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	462b      	mov	r3, r5
 8000aa4:	4906      	ldr	r1, [pc, #24]	; (8000ac0 <main+0xb8>)
 8000aa6:	f003 f91b 	bl	8003ce0 <siprintf>

  lcd_clear();
 8000aaa:	f7ff ffa2 	bl	80009f2 <lcd_clear>
  lcd_print(1, 1, text);
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f7ff ff84 	bl	80009c2 <lcd_print>

    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
 8000aba:	e7fe      	b.n	8000aba <main+0xb2>
 8000abc:	20000078 	.word	0x20000078
 8000ac0:	08004640 	.word	0x08004640

08000ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b096      	sub	sp, #88	; 0x58
 8000ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	2244      	movs	r2, #68	; 0x44
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f003 f924 	bl	8003d20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad8:	463b      	mov	r3, r7
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ae6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000aea:	f000 fda5 	bl	8001638 <HAL_PWREx_ControlVoltageScaling>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000af4:	f000 f8fe 	bl	8000cf4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000af8:	2318      	movs	r3, #24
 8000afa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000afc:	2301      	movs	r3, #1
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b00:	2301      	movs	r3, #1
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b08:	2360      	movs	r3, #96	; 0x60
 8000b0a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4618      	mov	r0, r3
 8000b16:	f000 fde5 	bl	80016e4 <HAL_RCC_OscConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000b20:	f000 f8e8 	bl	8000cf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b24:	230f      	movs	r3, #15
 8000b26:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b38:	463b      	mov	r3, r7
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f001 f9ad 	bl	8001e9c <HAL_RCC_ClockConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000b48:	f000 f8d4 	bl	8000cf4 <Error_Handler>
  }
}
 8000b4c:	bf00      	nop
 8000b4e:	3758      	adds	r7, #88	; 0x58
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b58:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <MX_RTC_Init+0x48>)
 8000b5a:	4a11      	ldr	r2, [pc, #68]	; (8000ba0 <MX_RTC_Init+0x4c>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_RTC_Init+0x48>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b64:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <MX_RTC_Init+0x48>)
 8000b66:	227f      	movs	r2, #127	; 0x7f
 8000b68:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_RTC_Init+0x48>)
 8000b6c:	22ff      	movs	r2, #255	; 0xff
 8000b6e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b70:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <MX_RTC_Init+0x48>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_RTC_Init+0x48>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b7c:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <MX_RTC_Init+0x48>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_RTC_Init+0x48>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b88:	4804      	ldr	r0, [pc, #16]	; (8000b9c <MX_RTC_Init+0x48>)
 8000b8a:	f002 f867 	bl	8002c5c <HAL_RTC_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000b94:	f000 f8ae 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000078 	.word	0x20000078
 8000ba0:	40002800 	.word	0x40002800

08000ba4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ba8:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000baa:	4a15      	ldr	r2, [pc, #84]	; (8000c00 <MX_USART2_UART_Init+0x5c>)
 8000bac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bae:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000bb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000bca:	220c      	movs	r2, #12
 8000bcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd4:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000be6:	4805      	ldr	r0, [pc, #20]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000be8:	f002 fb5e 	bl	80032a8 <HAL_UART_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bf2:	f000 f87f 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	2000009c 	.word	0x2000009c
 8000c00:	40004400 	.word	0x40004400

08000c04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b088      	sub	sp, #32
 8000c08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0a:	f107 030c 	add.w	r3, r7, #12
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	4b33      	ldr	r3, [pc, #204]	; (8000ce8 <MX_GPIO_Init+0xe4>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1e:	4a32      	ldr	r2, [pc, #200]	; (8000ce8 <MX_GPIO_Init+0xe4>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c26:	4b30      	ldr	r3, [pc, #192]	; (8000ce8 <MX_GPIO_Init+0xe4>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c32:	4b2d      	ldr	r3, [pc, #180]	; (8000ce8 <MX_GPIO_Init+0xe4>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c36:	4a2c      	ldr	r2, [pc, #176]	; (8000ce8 <MX_GPIO_Init+0xe4>)
 8000c38:	f043 0302 	orr.w	r3, r3, #2
 8000c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3e:	4b2a      	ldr	r3, [pc, #168]	; (8000ce8 <MX_GPIO_Init+0xe4>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4a:	4b27      	ldr	r3, [pc, #156]	; (8000ce8 <MX_GPIO_Init+0xe4>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4e:	4a26      	ldr	r2, [pc, #152]	; (8000ce8 <MX_GPIO_Init+0xe4>)
 8000c50:	f043 0304 	orr.w	r3, r3, #4
 8000c54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c56:	4b24      	ldr	r3, [pc, #144]	; (8000ce8 <MX_GPIO_Init+0xe4>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5a:	f003 0304 	and.w	r3, r3, #4
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8000c68:	4820      	ldr	r0, [pc, #128]	; (8000cec <MX_GPIO_Init+0xe8>)
 8000c6a:	f000 fcbf 	bl	80015ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2180      	movs	r1, #128	; 0x80
 8000c72:	481f      	ldr	r0, [pc, #124]	; (8000cf0 <MX_GPIO_Init+0xec>)
 8000c74:	f000 fcba 	bl	80015ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_D7_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000c7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c82:	f000 fcb3 	bl	80015ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin */
  GPIO_InitStruct.Pin = LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin;
 8000c86:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8000c8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c98:	f107 030c 	add.w	r3, r7, #12
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4813      	ldr	r0, [pc, #76]	; (8000cec <MX_GPIO_Init+0xe8>)
 8000ca0:	f000 fafa 	bl	8001298 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_EN_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin;
 8000ca4:	2380      	movs	r3, #128	; 0x80
 8000ca6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_EN_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f107 030c 	add.w	r3, r7, #12
 8000cb8:	4619      	mov	r1, r3
 8000cba:	480d      	ldr	r0, [pc, #52]	; (8000cf0 <MX_GPIO_Init+0xec>)
 8000cbc:	f000 faec 	bl	8001298 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D7_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_RS_Pin;
 8000cc0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd2:	f107 030c 	add.w	r3, r7, #12
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cdc:	f000 fadc 	bl	8001298 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ce0:	bf00      	nop
 8000ce2:	3720      	adds	r7, #32
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	48000400 	.word	0x48000400
 8000cf0:	48000800 	.word	0x48000800

08000cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf8:	b672      	cpsid	i
}
 8000cfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <Error_Handler+0x8>
	...

08000d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d06:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <HAL_MspInit+0x44>)
 8000d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d0a:	4a0e      	ldr	r2, [pc, #56]	; (8000d44 <HAL_MspInit+0x44>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6613      	str	r3, [r2, #96]	; 0x60
 8000d12:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <HAL_MspInit+0x44>)
 8000d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <HAL_MspInit+0x44>)
 8000d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d22:	4a08      	ldr	r2, [pc, #32]	; (8000d44 <HAL_MspInit+0x44>)
 8000d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d28:	6593      	str	r3, [r2, #88]	; 0x58
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_MspInit+0x44>)
 8000d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d32:	603b      	str	r3, [r7, #0]
 8000d34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	40021000 	.word	0x40021000

08000d48 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b0a4      	sub	sp, #144	; 0x90
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d50:	f107 0308 	add.w	r3, r7, #8
 8000d54:	2288      	movs	r2, #136	; 0x88
 8000d56:	2100      	movs	r1, #0
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f002 ffe1 	bl	8003d20 <memset>
  if(hrtc->Instance==RTC)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a10      	ldr	r2, [pc, #64]	; (8000da4 <HAL_RTC_MspInit+0x5c>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d118      	bne.n	8000d9a <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d6c:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d76:	f107 0308 	add.w	r3, r7, #8
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f001 fab2 	bl	80022e4 <HAL_RCCEx_PeriphCLKConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000d86:	f7ff ffb5 	bl	8000cf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d8a:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <HAL_RTC_MspInit+0x60>)
 8000d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d90:	4a05      	ldr	r2, [pc, #20]	; (8000da8 <HAL_RTC_MspInit+0x60>)
 8000d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000d9a:	bf00      	nop
 8000d9c:	3790      	adds	r7, #144	; 0x90
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40002800 	.word	0x40002800
 8000da8:	40021000 	.word	0x40021000

08000dac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b0ac      	sub	sp, #176	; 0xb0
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2288      	movs	r2, #136	; 0x88
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f002 ffa7 	bl	8003d20 <memset>
  if(huart->Instance==USART2)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a21      	ldr	r2, [pc, #132]	; (8000e5c <HAL_UART_MspInit+0xb0>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d13b      	bne.n	8000e54 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000de0:	2300      	movs	r3, #0
 8000de2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	4618      	mov	r0, r3
 8000dea:	f001 fa7b 	bl	80022e4 <HAL_RCCEx_PeriphCLKConfig>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000df4:	f7ff ff7e 	bl	8000cf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000df8:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <HAL_UART_MspInit+0xb4>)
 8000dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfc:	4a18      	ldr	r2, [pc, #96]	; (8000e60 <HAL_UART_MspInit+0xb4>)
 8000dfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e02:	6593      	str	r3, [r2, #88]	; 0x58
 8000e04:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <HAL_UART_MspInit+0xb4>)
 8000e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e10:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <HAL_UART_MspInit+0xb4>)
 8000e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e14:	4a12      	ldr	r2, [pc, #72]	; (8000e60 <HAL_UART_MspInit+0xb4>)
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e1c:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <HAL_UART_MspInit+0xb4>)
 8000e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e28:	230c      	movs	r3, #12
 8000e2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e40:	2307      	movs	r3, #7
 8000e42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e50:	f000 fa22 	bl	8001298 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e54:	bf00      	nop
 8000e56:	37b0      	adds	r7, #176	; 0xb0
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40004400 	.word	0x40004400
 8000e60:	40021000 	.word	0x40021000

08000e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <NMI_Handler+0x4>

08000e6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6e:	e7fe      	b.n	8000e6e <HardFault_Handler+0x4>

08000e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <MemManage_Handler+0x4>

08000e76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e7a:	e7fe      	b.n	8000e7a <BusFault_Handler+0x4>

08000e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <UsageFault_Handler+0x4>

08000e82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb0:	f000 f8c8 	bl	8001044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec0:	4a14      	ldr	r2, [pc, #80]	; (8000f14 <_sbrk+0x5c>)
 8000ec2:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <_sbrk+0x60>)
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ecc:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d102      	bne.n	8000eda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed4:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <_sbrk+0x64>)
 8000ed6:	4a12      	ldr	r2, [pc, #72]	; (8000f20 <_sbrk+0x68>)
 8000ed8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eda:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <_sbrk+0x64>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d207      	bcs.n	8000ef8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee8:	f002 ff22 	bl	8003d30 <__errno>
 8000eec:	4603      	mov	r3, r0
 8000eee:	220c      	movs	r2, #12
 8000ef0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef6:	e009      	b.n	8000f0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef8:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <_sbrk+0x64>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000efe:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <_sbrk+0x64>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4413      	add	r3, r2
 8000f06:	4a05      	ldr	r2, [pc, #20]	; (8000f1c <_sbrk+0x64>)
 8000f08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3718      	adds	r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20018000 	.word	0x20018000
 8000f18:	00000400 	.word	0x00000400
 8000f1c:	20000124 	.word	0x20000124
 8000f20:	20000278 	.word	0x20000278

08000f24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <SystemInit+0x20>)
 8000f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f2e:	4a05      	ldr	r2, [pc, #20]	; (8000f44 <SystemInit+0x20>)
 8000f30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f4c:	f7ff ffea 	bl	8000f24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f50:	480c      	ldr	r0, [pc, #48]	; (8000f84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f52:	490d      	ldr	r1, [pc, #52]	; (8000f88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f54:	4a0d      	ldr	r2, [pc, #52]	; (8000f8c <LoopForever+0xe>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f58:	e002      	b.n	8000f60 <LoopCopyDataInit>

08000f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5e:	3304      	adds	r3, #4

08000f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f64:	d3f9      	bcc.n	8000f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f66:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f68:	4c0a      	ldr	r4, [pc, #40]	; (8000f94 <LoopForever+0x16>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f6c:	e001      	b.n	8000f72 <LoopFillZerobss>

08000f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f70:	3204      	adds	r2, #4

08000f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f74:	d3fb      	bcc.n	8000f6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f76:	f002 fee1 	bl	8003d3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f7a:	f7ff fd45 	bl	8000a08 <main>

08000f7e <LoopForever>:

LoopForever:
    b LoopForever
 8000f7e:	e7fe      	b.n	8000f7e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f80:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f88:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f8c:	080046e8 	.word	0x080046e8
  ldr r2, =_sbss
 8000f90:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f94:	20000274 	.word	0x20000274

08000f98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f98:	e7fe      	b.n	8000f98 <ADC1_2_IRQHandler>

08000f9a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	f000 f943 	bl	8001230 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000faa:	200f      	movs	r0, #15
 8000fac:	f000 f80e 	bl	8000fcc <HAL_InitTick>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d002      	beq.n	8000fbc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	71fb      	strb	r3, [r7, #7]
 8000fba:	e001      	b.n	8000fc0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fbc:	f7ff fea0 	bl	8000d00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fd8:	4b17      	ldr	r3, [pc, #92]	; (8001038 <HAL_InitTick+0x6c>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d023      	beq.n	8001028 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fe0:	4b16      	ldr	r3, [pc, #88]	; (800103c <HAL_InitTick+0x70>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <HAL_InitTick+0x6c>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f941 	bl	800127e <HAL_SYSTICK_Config>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d10f      	bne.n	8001022 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b0f      	cmp	r3, #15
 8001006:	d809      	bhi.n	800101c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001008:	2200      	movs	r2, #0
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	f04f 30ff 	mov.w	r0, #4294967295
 8001010:	f000 f919 	bl	8001246 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001014:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <HAL_InitTick+0x74>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6013      	str	r3, [r2, #0]
 800101a:	e007      	b.n	800102c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	73fb      	strb	r3, [r7, #15]
 8001020:	e004      	b.n	800102c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	73fb      	strb	r3, [r7, #15]
 8001026:	e001      	b.n	800102c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800102c:	7bfb      	ldrb	r3, [r7, #15]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000008 	.word	0x20000008
 800103c:	20000000 	.word	0x20000000
 8001040:	20000004 	.word	0x20000004

08001044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_IncTick+0x20>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_IncTick+0x24>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4413      	add	r3, r2
 8001054:	4a04      	ldr	r2, [pc, #16]	; (8001068 <HAL_IncTick+0x24>)
 8001056:	6013      	str	r3, [r2, #0]
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000008 	.word	0x20000008
 8001068:	20000128 	.word	0x20000128

0800106c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return uwTick;
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <HAL_GetTick+0x14>)
 8001072:	681b      	ldr	r3, [r3, #0]
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	20000128 	.word	0x20000128

08001084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800108c:	f7ff ffee 	bl	800106c <HAL_GetTick>
 8001090:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800109c:	d005      	beq.n	80010aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800109e:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <HAL_Delay+0x44>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	461a      	mov	r2, r3
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4413      	add	r3, r2
 80010a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010aa:	bf00      	nop
 80010ac:	f7ff ffde 	bl	800106c <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d8f7      	bhi.n	80010ac <HAL_Delay+0x28>
  {
  }
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000008 	.word	0x20000008

080010cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e8:	4013      	ands	r3, r2
 80010ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fe:	4a04      	ldr	r2, [pc, #16]	; (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	60d3      	str	r3, [r2, #12]
}
 8001104:	bf00      	nop
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001118:	4b04      	ldr	r3, [pc, #16]	; (800112c <__NVIC_GetPriorityGrouping+0x18>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	0a1b      	lsrs	r3, r3, #8
 800111e:	f003 0307 	and.w	r3, r3, #7
}
 8001122:	4618      	mov	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	6039      	str	r1, [r7, #0]
 800113a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001140:	2b00      	cmp	r3, #0
 8001142:	db0a      	blt.n	800115a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	b2da      	uxtb	r2, r3
 8001148:	490c      	ldr	r1, [pc, #48]	; (800117c <__NVIC_SetPriority+0x4c>)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	0112      	lsls	r2, r2, #4
 8001150:	b2d2      	uxtb	r2, r2
 8001152:	440b      	add	r3, r1
 8001154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001158:	e00a      	b.n	8001170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	b2da      	uxtb	r2, r3
 800115e:	4908      	ldr	r1, [pc, #32]	; (8001180 <__NVIC_SetPriority+0x50>)
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	f003 030f 	and.w	r3, r3, #15
 8001166:	3b04      	subs	r3, #4
 8001168:	0112      	lsls	r2, r2, #4
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	440b      	add	r3, r1
 800116e:	761a      	strb	r2, [r3, #24]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000e100 	.word	0xe000e100
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001184:	b480      	push	{r7}
 8001186:	b089      	sub	sp, #36	; 0x24
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f1c3 0307 	rsb	r3, r3, #7
 800119e:	2b04      	cmp	r3, #4
 80011a0:	bf28      	it	cs
 80011a2:	2304      	movcs	r3, #4
 80011a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3304      	adds	r3, #4
 80011aa:	2b06      	cmp	r3, #6
 80011ac:	d902      	bls.n	80011b4 <NVIC_EncodePriority+0x30>
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3b03      	subs	r3, #3
 80011b2:	e000      	b.n	80011b6 <NVIC_EncodePriority+0x32>
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	f04f 32ff 	mov.w	r2, #4294967295
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43da      	mvns	r2, r3
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	401a      	ands	r2, r3
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011cc:	f04f 31ff 	mov.w	r1, #4294967295
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	fa01 f303 	lsl.w	r3, r1, r3
 80011d6:	43d9      	mvns	r1, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	4313      	orrs	r3, r2
         );
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3724      	adds	r7, #36	; 0x24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011fc:	d301      	bcc.n	8001202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011fe:	2301      	movs	r3, #1
 8001200:	e00f      	b.n	8001222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001202:	4a0a      	ldr	r2, [pc, #40]	; (800122c <SysTick_Config+0x40>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3b01      	subs	r3, #1
 8001208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120a:	210f      	movs	r1, #15
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	f7ff ff8e 	bl	8001130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001214:	4b05      	ldr	r3, [pc, #20]	; (800122c <SysTick_Config+0x40>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121a:	4b04      	ldr	r3, [pc, #16]	; (800122c <SysTick_Config+0x40>)
 800121c:	2207      	movs	r2, #7
 800121e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	e000e010 	.word	0xe000e010

08001230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ff47 	bl	80010cc <__NVIC_SetPriorityGrouping>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b086      	sub	sp, #24
 800124a:	af00      	add	r7, sp, #0
 800124c:	4603      	mov	r3, r0
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001258:	f7ff ff5c 	bl	8001114 <__NVIC_GetPriorityGrouping>
 800125c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f7ff ff8e 	bl	8001184 <NVIC_EncodePriority>
 8001268:	4602      	mov	r2, r0
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff5d 	bl	8001130 <__NVIC_SetPriority>
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff ffb0 	bl	80011ec <SysTick_Config>
 800128c:	4603      	mov	r3, r0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001298:	b480      	push	{r7}
 800129a:	b087      	sub	sp, #28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a6:	e17f      	b.n	80015a8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	2101      	movs	r1, #1
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	fa01 f303 	lsl.w	r3, r1, r3
 80012b4:	4013      	ands	r3, r2
 80012b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 8171 	beq.w	80015a2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d005      	beq.n	80012d8 <HAL_GPIO_Init+0x40>
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d130      	bne.n	800133a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	2203      	movs	r2, #3
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4013      	ands	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	68da      	ldr	r2, [r3, #12]
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	4313      	orrs	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800130e:	2201      	movs	r2, #1
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	4013      	ands	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	091b      	lsrs	r3, r3, #4
 8001324:	f003 0201 	and.w	r2, r3, #1
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f003 0303 	and.w	r3, r3, #3
 8001342:	2b03      	cmp	r3, #3
 8001344:	d118      	bne.n	8001378 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800134c:	2201      	movs	r2, #1
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	4013      	ands	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	08db      	lsrs	r3, r3, #3
 8001362:	f003 0201 	and.w	r2, r3, #1
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	4313      	orrs	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 0303 	and.w	r3, r3, #3
 8001380:	2b03      	cmp	r3, #3
 8001382:	d017      	beq.n	80013b4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	2203      	movs	r2, #3
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	689a      	ldr	r2, [r3, #8]
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d123      	bne.n	8001408 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	08da      	lsrs	r2, r3, #3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3208      	adds	r2, #8
 80013c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	f003 0307 	and.w	r3, r3, #7
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	220f      	movs	r2, #15
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	691a      	ldr	r2, [r3, #16]
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	08da      	lsrs	r2, r3, #3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3208      	adds	r2, #8
 8001402:	6939      	ldr	r1, [r7, #16]
 8001404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	2203      	movs	r2, #3
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 0203 	and.w	r2, r3, #3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	4313      	orrs	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001444:	2b00      	cmp	r3, #0
 8001446:	f000 80ac 	beq.w	80015a2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144a:	4b5f      	ldr	r3, [pc, #380]	; (80015c8 <HAL_GPIO_Init+0x330>)
 800144c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800144e:	4a5e      	ldr	r2, [pc, #376]	; (80015c8 <HAL_GPIO_Init+0x330>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6613      	str	r3, [r2, #96]	; 0x60
 8001456:	4b5c      	ldr	r3, [pc, #368]	; (80015c8 <HAL_GPIO_Init+0x330>)
 8001458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001462:	4a5a      	ldr	r2, [pc, #360]	; (80015cc <HAL_GPIO_Init+0x334>)
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	089b      	lsrs	r3, r3, #2
 8001468:	3302      	adds	r3, #2
 800146a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	220f      	movs	r2, #15
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	4013      	ands	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800148c:	d025      	beq.n	80014da <HAL_GPIO_Init+0x242>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a4f      	ldr	r2, [pc, #316]	; (80015d0 <HAL_GPIO_Init+0x338>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d01f      	beq.n	80014d6 <HAL_GPIO_Init+0x23e>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a4e      	ldr	r2, [pc, #312]	; (80015d4 <HAL_GPIO_Init+0x33c>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d019      	beq.n	80014d2 <HAL_GPIO_Init+0x23a>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a4d      	ldr	r2, [pc, #308]	; (80015d8 <HAL_GPIO_Init+0x340>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d013      	beq.n	80014ce <HAL_GPIO_Init+0x236>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a4c      	ldr	r2, [pc, #304]	; (80015dc <HAL_GPIO_Init+0x344>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d00d      	beq.n	80014ca <HAL_GPIO_Init+0x232>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a4b      	ldr	r2, [pc, #300]	; (80015e0 <HAL_GPIO_Init+0x348>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d007      	beq.n	80014c6 <HAL_GPIO_Init+0x22e>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a4a      	ldr	r2, [pc, #296]	; (80015e4 <HAL_GPIO_Init+0x34c>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d101      	bne.n	80014c2 <HAL_GPIO_Init+0x22a>
 80014be:	2306      	movs	r3, #6
 80014c0:	e00c      	b.n	80014dc <HAL_GPIO_Init+0x244>
 80014c2:	2307      	movs	r3, #7
 80014c4:	e00a      	b.n	80014dc <HAL_GPIO_Init+0x244>
 80014c6:	2305      	movs	r3, #5
 80014c8:	e008      	b.n	80014dc <HAL_GPIO_Init+0x244>
 80014ca:	2304      	movs	r3, #4
 80014cc:	e006      	b.n	80014dc <HAL_GPIO_Init+0x244>
 80014ce:	2303      	movs	r3, #3
 80014d0:	e004      	b.n	80014dc <HAL_GPIO_Init+0x244>
 80014d2:	2302      	movs	r3, #2
 80014d4:	e002      	b.n	80014dc <HAL_GPIO_Init+0x244>
 80014d6:	2301      	movs	r3, #1
 80014d8:	e000      	b.n	80014dc <HAL_GPIO_Init+0x244>
 80014da:	2300      	movs	r3, #0
 80014dc:	697a      	ldr	r2, [r7, #20]
 80014de:	f002 0203 	and.w	r2, r2, #3
 80014e2:	0092      	lsls	r2, r2, #2
 80014e4:	4093      	lsls	r3, r2
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014ec:	4937      	ldr	r1, [pc, #220]	; (80015cc <HAL_GPIO_Init+0x334>)
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	089b      	lsrs	r3, r3, #2
 80014f2:	3302      	adds	r3, #2
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014fa:	4b3b      	ldr	r3, [pc, #236]	; (80015e8 <HAL_GPIO_Init+0x350>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	43db      	mvns	r3, r3
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	4013      	ands	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d003      	beq.n	800151e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4313      	orrs	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800151e:	4a32      	ldr	r2, [pc, #200]	; (80015e8 <HAL_GPIO_Init+0x350>)
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001524:	4b30      	ldr	r3, [pc, #192]	; (80015e8 <HAL_GPIO_Init+0x350>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	43db      	mvns	r3, r3
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	4013      	ands	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d003      	beq.n	8001548 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	4313      	orrs	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001548:	4a27      	ldr	r2, [pc, #156]	; (80015e8 <HAL_GPIO_Init+0x350>)
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800154e:	4b26      	ldr	r3, [pc, #152]	; (80015e8 <HAL_GPIO_Init+0x350>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	43db      	mvns	r3, r3
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4313      	orrs	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001572:	4a1d      	ldr	r2, [pc, #116]	; (80015e8 <HAL_GPIO_Init+0x350>)
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001578:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <HAL_GPIO_Init+0x350>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	43db      	mvns	r3, r3
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800159c:	4a12      	ldr	r2, [pc, #72]	; (80015e8 <HAL_GPIO_Init+0x350>)
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	3301      	adds	r3, #1
 80015a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	fa22 f303 	lsr.w	r3, r2, r3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f47f ae78 	bne.w	80012a8 <HAL_GPIO_Init+0x10>
  }
}
 80015b8:	bf00      	nop
 80015ba:	bf00      	nop
 80015bc:	371c      	adds	r7, #28
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	40021000 	.word	0x40021000
 80015cc:	40010000 	.word	0x40010000
 80015d0:	48000400 	.word	0x48000400
 80015d4:	48000800 	.word	0x48000800
 80015d8:	48000c00 	.word	0x48000c00
 80015dc:	48001000 	.word	0x48001000
 80015e0:	48001400 	.word	0x48001400
 80015e4:	48001800 	.word	0x48001800
 80015e8:	40010400 	.word	0x40010400

080015ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	807b      	strh	r3, [r7, #2]
 80015f8:	4613      	mov	r3, r2
 80015fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015fc:	787b      	ldrb	r3, [r7, #1]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001602:	887a      	ldrh	r2, [r7, #2]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001608:	e002      	b.n	8001610 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800160a:	887a      	ldrh	r2, [r7, #2]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <HAL_PWREx_GetVoltageRange+0x18>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001628:	4618      	mov	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	40007000 	.word	0x40007000

08001638 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001646:	d130      	bne.n	80016aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001648:	4b23      	ldr	r3, [pc, #140]	; (80016d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001654:	d038      	beq.n	80016c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001656:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800165e:	4a1e      	ldr	r2, [pc, #120]	; (80016d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001660:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001664:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001666:	4b1d      	ldr	r3, [pc, #116]	; (80016dc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2232      	movs	r2, #50	; 0x32
 800166c:	fb02 f303 	mul.w	r3, r2, r3
 8001670:	4a1b      	ldr	r2, [pc, #108]	; (80016e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001672:	fba2 2303 	umull	r2, r3, r2, r3
 8001676:	0c9b      	lsrs	r3, r3, #18
 8001678:	3301      	adds	r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800167c:	e002      	b.n	8001684 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	3b01      	subs	r3, #1
 8001682:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001684:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001686:	695b      	ldr	r3, [r3, #20]
 8001688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800168c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001690:	d102      	bne.n	8001698 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1f2      	bne.n	800167e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001698:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800169a:	695b      	ldr	r3, [r3, #20]
 800169c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016a4:	d110      	bne.n	80016c8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e00f      	b.n	80016ca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016aa:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016b6:	d007      	beq.n	80016c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016b8:	4b07      	ldr	r3, [pc, #28]	; (80016d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016c0:	4a05      	ldr	r2, [pc, #20]	; (80016d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016c6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	40007000 	.word	0x40007000
 80016dc:	20000000 	.word	0x20000000
 80016e0:	431bde83 	.word	0x431bde83

080016e4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e3ca      	b.n	8001e8c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016f6:	4b97      	ldr	r3, [pc, #604]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 030c 	and.w	r3, r3, #12
 80016fe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001700:	4b94      	ldr	r3, [pc, #592]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	f003 0303 	and.w	r3, r3, #3
 8001708:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0310 	and.w	r3, r3, #16
 8001712:	2b00      	cmp	r3, #0
 8001714:	f000 80e4 	beq.w	80018e0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d007      	beq.n	800172e <HAL_RCC_OscConfig+0x4a>
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	2b0c      	cmp	r3, #12
 8001722:	f040 808b 	bne.w	800183c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	2b01      	cmp	r3, #1
 800172a:	f040 8087 	bne.w	800183c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800172e:	4b89      	ldr	r3, [pc, #548]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d005      	beq.n	8001746 <HAL_RCC_OscConfig+0x62>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e3a2      	b.n	8001e8c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a1a      	ldr	r2, [r3, #32]
 800174a:	4b82      	ldr	r3, [pc, #520]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0308 	and.w	r3, r3, #8
 8001752:	2b00      	cmp	r3, #0
 8001754:	d004      	beq.n	8001760 <HAL_RCC_OscConfig+0x7c>
 8001756:	4b7f      	ldr	r3, [pc, #508]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800175e:	e005      	b.n	800176c <HAL_RCC_OscConfig+0x88>
 8001760:	4b7c      	ldr	r3, [pc, #496]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 8001762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001766:	091b      	lsrs	r3, r3, #4
 8001768:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800176c:	4293      	cmp	r3, r2
 800176e:	d223      	bcs.n	80017b8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	4618      	mov	r0, r3
 8001776:	f000 fd55 	bl	8002224 <RCC_SetFlashLatencyFromMSIRange>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e383      	b.n	8001e8c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001784:	4b73      	ldr	r3, [pc, #460]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a72      	ldr	r2, [pc, #456]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 800178a:	f043 0308 	orr.w	r3, r3, #8
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	4b70      	ldr	r3, [pc, #448]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	496d      	ldr	r1, [pc, #436]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017a2:	4b6c      	ldr	r3, [pc, #432]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	021b      	lsls	r3, r3, #8
 80017b0:	4968      	ldr	r1, [pc, #416]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	604b      	str	r3, [r1, #4]
 80017b6:	e025      	b.n	8001804 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017b8:	4b66      	ldr	r3, [pc, #408]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a65      	ldr	r2, [pc, #404]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 80017be:	f043 0308 	orr.w	r3, r3, #8
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	4b63      	ldr	r3, [pc, #396]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	4960      	ldr	r1, [pc, #384]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017d6:	4b5f      	ldr	r3, [pc, #380]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	021b      	lsls	r3, r3, #8
 80017e4:	495b      	ldr	r1, [pc, #364]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d109      	bne.n	8001804 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f000 fd15 	bl	8002224 <RCC_SetFlashLatencyFromMSIRange>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e343      	b.n	8001e8c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001804:	f000 fc4a 	bl	800209c <HAL_RCC_GetSysClockFreq>
 8001808:	4602      	mov	r2, r0
 800180a:	4b52      	ldr	r3, [pc, #328]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	091b      	lsrs	r3, r3, #4
 8001810:	f003 030f 	and.w	r3, r3, #15
 8001814:	4950      	ldr	r1, [pc, #320]	; (8001958 <HAL_RCC_OscConfig+0x274>)
 8001816:	5ccb      	ldrb	r3, [r1, r3]
 8001818:	f003 031f 	and.w	r3, r3, #31
 800181c:	fa22 f303 	lsr.w	r3, r2, r3
 8001820:	4a4e      	ldr	r2, [pc, #312]	; (800195c <HAL_RCC_OscConfig+0x278>)
 8001822:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001824:	4b4e      	ldr	r3, [pc, #312]	; (8001960 <HAL_RCC_OscConfig+0x27c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff fbcf 	bl	8000fcc <HAL_InitTick>
 800182e:	4603      	mov	r3, r0
 8001830:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001832:	7bfb      	ldrb	r3, [r7, #15]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d052      	beq.n	80018de <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	e327      	b.n	8001e8c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d032      	beq.n	80018aa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001844:	4b43      	ldr	r3, [pc, #268]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a42      	ldr	r2, [pc, #264]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001850:	f7ff fc0c 	bl	800106c <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001858:	f7ff fc08 	bl	800106c <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e310      	b.n	8001e8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800186a:	4b3a      	ldr	r3, [pc, #232]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f0      	beq.n	8001858 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001876:	4b37      	ldr	r3, [pc, #220]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a36      	ldr	r2, [pc, #216]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 800187c:	f043 0308 	orr.w	r3, r3, #8
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	4b34      	ldr	r3, [pc, #208]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	4931      	ldr	r1, [pc, #196]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 8001890:	4313      	orrs	r3, r2
 8001892:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001894:	4b2f      	ldr	r3, [pc, #188]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	021b      	lsls	r3, r3, #8
 80018a2:	492c      	ldr	r1, [pc, #176]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	604b      	str	r3, [r1, #4]
 80018a8:	e01a      	b.n	80018e0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018aa:	4b2a      	ldr	r3, [pc, #168]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a29      	ldr	r2, [pc, #164]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 80018b0:	f023 0301 	bic.w	r3, r3, #1
 80018b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018b6:	f7ff fbd9 	bl	800106c <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018be:	f7ff fbd5 	bl	800106c <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e2dd      	b.n	8001e8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018d0:	4b20      	ldr	r3, [pc, #128]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1f0      	bne.n	80018be <HAL_RCC_OscConfig+0x1da>
 80018dc:	e000      	b.n	80018e0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018de:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d074      	beq.n	80019d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	2b08      	cmp	r3, #8
 80018f0:	d005      	beq.n	80018fe <HAL_RCC_OscConfig+0x21a>
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	2b0c      	cmp	r3, #12
 80018f6:	d10e      	bne.n	8001916 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	2b03      	cmp	r3, #3
 80018fc:	d10b      	bne.n	8001916 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d064      	beq.n	80019d4 <HAL_RCC_OscConfig+0x2f0>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d160      	bne.n	80019d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e2ba      	b.n	8001e8c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800191e:	d106      	bne.n	800192e <HAL_RCC_OscConfig+0x24a>
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a0b      	ldr	r2, [pc, #44]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 8001926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	e026      	b.n	800197c <HAL_RCC_OscConfig+0x298>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001936:	d115      	bne.n	8001964 <HAL_RCC_OscConfig+0x280>
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a05      	ldr	r2, [pc, #20]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 800193e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	4b03      	ldr	r3, [pc, #12]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a02      	ldr	r2, [pc, #8]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 800194a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	e014      	b.n	800197c <HAL_RCC_OscConfig+0x298>
 8001952:	bf00      	nop
 8001954:	40021000 	.word	0x40021000
 8001958:	0800465c 	.word	0x0800465c
 800195c:	20000000 	.word	0x20000000
 8001960:	20000004 	.word	0x20000004
 8001964:	4ba0      	ldr	r3, [pc, #640]	; (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a9f      	ldr	r2, [pc, #636]	; (8001be8 <HAL_RCC_OscConfig+0x504>)
 800196a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	4b9d      	ldr	r3, [pc, #628]	; (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a9c      	ldr	r2, [pc, #624]	; (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800197a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d013      	beq.n	80019ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001984:	f7ff fb72 	bl	800106c <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800198c:	f7ff fb6e 	bl	800106c <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b64      	cmp	r3, #100	; 0x64
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e276      	b.n	8001e8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800199e:	4b92      	ldr	r3, [pc, #584]	; (8001be8 <HAL_RCC_OscConfig+0x504>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f0      	beq.n	800198c <HAL_RCC_OscConfig+0x2a8>
 80019aa:	e014      	b.n	80019d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ac:	f7ff fb5e 	bl	800106c <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019b4:	f7ff fb5a 	bl	800106c <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b64      	cmp	r3, #100	; 0x64
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e262      	b.n	8001e8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019c6:	4b88      	ldr	r3, [pc, #544]	; (8001be8 <HAL_RCC_OscConfig+0x504>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f0      	bne.n	80019b4 <HAL_RCC_OscConfig+0x2d0>
 80019d2:	e000      	b.n	80019d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d060      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d005      	beq.n	80019f4 <HAL_RCC_OscConfig+0x310>
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	2b0c      	cmp	r3, #12
 80019ec:	d119      	bne.n	8001a22 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d116      	bne.n	8001a22 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019f4:	4b7c      	ldr	r3, [pc, #496]	; (8001be8 <HAL_RCC_OscConfig+0x504>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d005      	beq.n	8001a0c <HAL_RCC_OscConfig+0x328>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e23f      	b.n	8001e8c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0c:	4b76      	ldr	r3, [pc, #472]	; (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	061b      	lsls	r3, r3, #24
 8001a1a:	4973      	ldr	r1, [pc, #460]	; (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a20:	e040      	b.n	8001aa4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d023      	beq.n	8001a72 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a2a:	4b6f      	ldr	r3, [pc, #444]	; (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a6e      	ldr	r2, [pc, #440]	; (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a36:	f7ff fb19 	bl	800106c <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a3e:	f7ff fb15 	bl	800106c <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e21d      	b.n	8001e8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a50:	4b65      	ldr	r3, [pc, #404]	; (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f0      	beq.n	8001a3e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a5c:	4b62      	ldr	r3, [pc, #392]	; (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	061b      	lsls	r3, r3, #24
 8001a6a:	495f      	ldr	r1, [pc, #380]	; (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	604b      	str	r3, [r1, #4]
 8001a70:	e018      	b.n	8001aa4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a72:	4b5d      	ldr	r3, [pc, #372]	; (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a5c      	ldr	r2, [pc, #368]	; (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001a78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7e:	f7ff faf5 	bl	800106c <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a86:	f7ff faf1 	bl	800106c <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e1f9      	b.n	8001e8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a98:	4b53      	ldr	r3, [pc, #332]	; (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1f0      	bne.n	8001a86 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0308 	and.w	r3, r3, #8
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d03c      	beq.n	8001b2a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d01c      	beq.n	8001af2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ab8:	4b4b      	ldr	r3, [pc, #300]	; (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001abe:	4a4a      	ldr	r2, [pc, #296]	; (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac8:	f7ff fad0 	bl	800106c <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad0:	f7ff facc 	bl	800106c <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e1d4      	b.n	8001e8c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ae2:	4b41      	ldr	r3, [pc, #260]	; (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0ef      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x3ec>
 8001af0:	e01b      	b.n	8001b2a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001af2:	4b3d      	ldr	r3, [pc, #244]	; (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001af4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af8:	4a3b      	ldr	r2, [pc, #236]	; (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001afa:	f023 0301 	bic.w	r3, r3, #1
 8001afe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b02:	f7ff fab3 	bl	800106c <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b0a:	f7ff faaf 	bl	800106c <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e1b7      	b.n	8001e8c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b1c:	4b32      	ldr	r3, [pc, #200]	; (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1ef      	bne.n	8001b0a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 80a6 	beq.w	8001c84 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b3c:	4b2a      	ldr	r3, [pc, #168]	; (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d10d      	bne.n	8001b64 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b48:	4b27      	ldr	r3, [pc, #156]	; (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4c:	4a26      	ldr	r2, [pc, #152]	; (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b52:	6593      	str	r3, [r2, #88]	; 0x58
 8001b54:	4b24      	ldr	r3, [pc, #144]	; (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b60:	2301      	movs	r3, #1
 8001b62:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b64:	4b21      	ldr	r3, [pc, #132]	; (8001bec <HAL_RCC_OscConfig+0x508>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d118      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b70:	4b1e      	ldr	r3, [pc, #120]	; (8001bec <HAL_RCC_OscConfig+0x508>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a1d      	ldr	r2, [pc, #116]	; (8001bec <HAL_RCC_OscConfig+0x508>)
 8001b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b7c:	f7ff fa76 	bl	800106c <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b84:	f7ff fa72 	bl	800106c <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e17a      	b.n	8001e8c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b96:	4b15      	ldr	r3, [pc, #84]	; (8001bec <HAL_RCC_OscConfig+0x508>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d0f0      	beq.n	8001b84 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d108      	bne.n	8001bbc <HAL_RCC_OscConfig+0x4d8>
 8001baa:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb0:	4a0d      	ldr	r2, [pc, #52]	; (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bba:	e029      	b.n	8001c10 <HAL_RCC_OscConfig+0x52c>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2b05      	cmp	r3, #5
 8001bc2:	d115      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x50c>
 8001bc4:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bca:	4a07      	ldr	r2, [pc, #28]	; (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001bcc:	f043 0304 	orr.w	r3, r3, #4
 8001bd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bd4:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bda:	4a03      	ldr	r2, [pc, #12]	; (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001be4:	e014      	b.n	8001c10 <HAL_RCC_OscConfig+0x52c>
 8001be6:	bf00      	nop
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40007000 	.word	0x40007000
 8001bf0:	4b9c      	ldr	r3, [pc, #624]	; (8001e64 <HAL_RCC_OscConfig+0x780>)
 8001bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf6:	4a9b      	ldr	r2, [pc, #620]	; (8001e64 <HAL_RCC_OscConfig+0x780>)
 8001bf8:	f023 0301 	bic.w	r3, r3, #1
 8001bfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c00:	4b98      	ldr	r3, [pc, #608]	; (8001e64 <HAL_RCC_OscConfig+0x780>)
 8001c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c06:	4a97      	ldr	r2, [pc, #604]	; (8001e64 <HAL_RCC_OscConfig+0x780>)
 8001c08:	f023 0304 	bic.w	r3, r3, #4
 8001c0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d016      	beq.n	8001c46 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c18:	f7ff fa28 	bl	800106c <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c1e:	e00a      	b.n	8001c36 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c20:	f7ff fa24 	bl	800106c <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e12a      	b.n	8001e8c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c36:	4b8b      	ldr	r3, [pc, #556]	; (8001e64 <HAL_RCC_OscConfig+0x780>)
 8001c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0ed      	beq.n	8001c20 <HAL_RCC_OscConfig+0x53c>
 8001c44:	e015      	b.n	8001c72 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c46:	f7ff fa11 	bl	800106c <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c4c:	e00a      	b.n	8001c64 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c4e:	f7ff fa0d 	bl	800106c <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e113      	b.n	8001e8c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c64:	4b7f      	ldr	r3, [pc, #508]	; (8001e64 <HAL_RCC_OscConfig+0x780>)
 8001c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1ed      	bne.n	8001c4e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c72:	7ffb      	ldrb	r3, [r7, #31]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d105      	bne.n	8001c84 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c78:	4b7a      	ldr	r3, [pc, #488]	; (8001e64 <HAL_RCC_OscConfig+0x780>)
 8001c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7c:	4a79      	ldr	r2, [pc, #484]	; (8001e64 <HAL_RCC_OscConfig+0x780>)
 8001c7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c82:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f000 80fe 	beq.w	8001e8a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	f040 80d0 	bne.w	8001e38 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c98:	4b72      	ldr	r3, [pc, #456]	; (8001e64 <HAL_RCC_OscConfig+0x780>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f003 0203 	and.w	r2, r3, #3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d130      	bne.n	8001d0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d127      	bne.n	8001d0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d11f      	bne.n	8001d0e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001cd8:	2a07      	cmp	r2, #7
 8001cda:	bf14      	ite	ne
 8001cdc:	2201      	movne	r2, #1
 8001cde:	2200      	moveq	r2, #0
 8001ce0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d113      	bne.n	8001d0e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf0:	085b      	lsrs	r3, r3, #1
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d109      	bne.n	8001d0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d04:	085b      	lsrs	r3, r3, #1
 8001d06:	3b01      	subs	r3, #1
 8001d08:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d06e      	beq.n	8001dec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	2b0c      	cmp	r3, #12
 8001d12:	d069      	beq.n	8001de8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d14:	4b53      	ldr	r3, [pc, #332]	; (8001e64 <HAL_RCC_OscConfig+0x780>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d105      	bne.n	8001d2c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d20:	4b50      	ldr	r3, [pc, #320]	; (8001e64 <HAL_RCC_OscConfig+0x780>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e0ad      	b.n	8001e8c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d30:	4b4c      	ldr	r3, [pc, #304]	; (8001e64 <HAL_RCC_OscConfig+0x780>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a4b      	ldr	r2, [pc, #300]	; (8001e64 <HAL_RCC_OscConfig+0x780>)
 8001d36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d3a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d3c:	f7ff f996 	bl	800106c <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d44:	f7ff f992 	bl	800106c <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e09a      	b.n	8001e8c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d56:	4b43      	ldr	r3, [pc, #268]	; (8001e64 <HAL_RCC_OscConfig+0x780>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f0      	bne.n	8001d44 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d62:	4b40      	ldr	r3, [pc, #256]	; (8001e64 <HAL_RCC_OscConfig+0x780>)
 8001d64:	68da      	ldr	r2, [r3, #12]
 8001d66:	4b40      	ldr	r3, [pc, #256]	; (8001e68 <HAL_RCC_OscConfig+0x784>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d72:	3a01      	subs	r2, #1
 8001d74:	0112      	lsls	r2, r2, #4
 8001d76:	4311      	orrs	r1, r2
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d7c:	0212      	lsls	r2, r2, #8
 8001d7e:	4311      	orrs	r1, r2
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d84:	0852      	lsrs	r2, r2, #1
 8001d86:	3a01      	subs	r2, #1
 8001d88:	0552      	lsls	r2, r2, #21
 8001d8a:	4311      	orrs	r1, r2
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d90:	0852      	lsrs	r2, r2, #1
 8001d92:	3a01      	subs	r2, #1
 8001d94:	0652      	lsls	r2, r2, #25
 8001d96:	4311      	orrs	r1, r2
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d9c:	0912      	lsrs	r2, r2, #4
 8001d9e:	0452      	lsls	r2, r2, #17
 8001da0:	430a      	orrs	r2, r1
 8001da2:	4930      	ldr	r1, [pc, #192]	; (8001e64 <HAL_RCC_OscConfig+0x780>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001da8:	4b2e      	ldr	r3, [pc, #184]	; (8001e64 <HAL_RCC_OscConfig+0x780>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a2d      	ldr	r2, [pc, #180]	; (8001e64 <HAL_RCC_OscConfig+0x780>)
 8001dae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001db2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001db4:	4b2b      	ldr	r3, [pc, #172]	; (8001e64 <HAL_RCC_OscConfig+0x780>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	4a2a      	ldr	r2, [pc, #168]	; (8001e64 <HAL_RCC_OscConfig+0x780>)
 8001dba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dbe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dc0:	f7ff f954 	bl	800106c <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc8:	f7ff f950 	bl	800106c <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e058      	b.n	8001e8c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dda:	4b22      	ldr	r3, [pc, #136]	; (8001e64 <HAL_RCC_OscConfig+0x780>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001de6:	e050      	b.n	8001e8a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e04f      	b.n	8001e8c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dec:	4b1d      	ldr	r3, [pc, #116]	; (8001e64 <HAL_RCC_OscConfig+0x780>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d148      	bne.n	8001e8a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001df8:	4b1a      	ldr	r3, [pc, #104]	; (8001e64 <HAL_RCC_OscConfig+0x780>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a19      	ldr	r2, [pc, #100]	; (8001e64 <HAL_RCC_OscConfig+0x780>)
 8001dfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e02:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e04:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <HAL_RCC_OscConfig+0x780>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	4a16      	ldr	r2, [pc, #88]	; (8001e64 <HAL_RCC_OscConfig+0x780>)
 8001e0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e10:	f7ff f92c 	bl	800106c <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e18:	f7ff f928 	bl	800106c <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e030      	b.n	8001e8c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <HAL_RCC_OscConfig+0x780>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0f0      	beq.n	8001e18 <HAL_RCC_OscConfig+0x734>
 8001e36:	e028      	b.n	8001e8a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	2b0c      	cmp	r3, #12
 8001e3c:	d023      	beq.n	8001e86 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3e:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <HAL_RCC_OscConfig+0x780>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a08      	ldr	r2, [pc, #32]	; (8001e64 <HAL_RCC_OscConfig+0x780>)
 8001e44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4a:	f7ff f90f 	bl	800106c <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e50:	e00c      	b.n	8001e6c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e52:	f7ff f90b 	bl	800106c <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d905      	bls.n	8001e6c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e013      	b.n	8001e8c <HAL_RCC_OscConfig+0x7a8>
 8001e64:	40021000 	.word	0x40021000
 8001e68:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e6c:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <HAL_RCC_OscConfig+0x7b0>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1ec      	bne.n	8001e52 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e78:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_RCC_OscConfig+0x7b0>)
 8001e7a:	68da      	ldr	r2, [r3, #12]
 8001e7c:	4905      	ldr	r1, [pc, #20]	; (8001e94 <HAL_RCC_OscConfig+0x7b0>)
 8001e7e:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <HAL_RCC_OscConfig+0x7b4>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	60cb      	str	r3, [r1, #12]
 8001e84:	e001      	b.n	8001e8a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e000      	b.n	8001e8c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3720      	adds	r7, #32
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40021000 	.word	0x40021000
 8001e98:	feeefffc 	.word	0xfeeefffc

08001e9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e0e7      	b.n	8002080 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb0:	4b75      	ldr	r3, [pc, #468]	; (8002088 <HAL_RCC_ClockConfig+0x1ec>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d910      	bls.n	8001ee0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ebe:	4b72      	ldr	r3, [pc, #456]	; (8002088 <HAL_RCC_ClockConfig+0x1ec>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f023 0207 	bic.w	r2, r3, #7
 8001ec6:	4970      	ldr	r1, [pc, #448]	; (8002088 <HAL_RCC_ClockConfig+0x1ec>)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ece:	4b6e      	ldr	r3, [pc, #440]	; (8002088 <HAL_RCC_ClockConfig+0x1ec>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d001      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e0cf      	b.n	8002080 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d010      	beq.n	8001f0e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	4b66      	ldr	r3, [pc, #408]	; (800208c <HAL_RCC_ClockConfig+0x1f0>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d908      	bls.n	8001f0e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001efc:	4b63      	ldr	r3, [pc, #396]	; (800208c <HAL_RCC_ClockConfig+0x1f0>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	4960      	ldr	r1, [pc, #384]	; (800208c <HAL_RCC_ClockConfig+0x1f0>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d04c      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b03      	cmp	r3, #3
 8001f20:	d107      	bne.n	8001f32 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f22:	4b5a      	ldr	r3, [pc, #360]	; (800208c <HAL_RCC_ClockConfig+0x1f0>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d121      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e0a6      	b.n	8002080 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d107      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f3a:	4b54      	ldr	r3, [pc, #336]	; (800208c <HAL_RCC_ClockConfig+0x1f0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d115      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e09a      	b.n	8002080 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d107      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f52:	4b4e      	ldr	r3, [pc, #312]	; (800208c <HAL_RCC_ClockConfig+0x1f0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d109      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e08e      	b.n	8002080 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f62:	4b4a      	ldr	r3, [pc, #296]	; (800208c <HAL_RCC_ClockConfig+0x1f0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e086      	b.n	8002080 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f72:	4b46      	ldr	r3, [pc, #280]	; (800208c <HAL_RCC_ClockConfig+0x1f0>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f023 0203 	bic.w	r2, r3, #3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	4943      	ldr	r1, [pc, #268]	; (800208c <HAL_RCC_ClockConfig+0x1f0>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f84:	f7ff f872 	bl	800106c <HAL_GetTick>
 8001f88:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8a:	e00a      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f8c:	f7ff f86e 	bl	800106c <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e06e      	b.n	8002080 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa2:	4b3a      	ldr	r3, [pc, #232]	; (800208c <HAL_RCC_ClockConfig+0x1f0>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 020c 	and.w	r2, r3, #12
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d1eb      	bne.n	8001f8c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d010      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	4b31      	ldr	r3, [pc, #196]	; (800208c <HAL_RCC_ClockConfig+0x1f0>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d208      	bcs.n	8001fe2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd0:	4b2e      	ldr	r3, [pc, #184]	; (800208c <HAL_RCC_ClockConfig+0x1f0>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	492b      	ldr	r1, [pc, #172]	; (800208c <HAL_RCC_ClockConfig+0x1f0>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fe2:	4b29      	ldr	r3, [pc, #164]	; (8002088 <HAL_RCC_ClockConfig+0x1ec>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d210      	bcs.n	8002012 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff0:	4b25      	ldr	r3, [pc, #148]	; (8002088 <HAL_RCC_ClockConfig+0x1ec>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f023 0207 	bic.w	r2, r3, #7
 8001ff8:	4923      	ldr	r1, [pc, #140]	; (8002088 <HAL_RCC_ClockConfig+0x1ec>)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002000:	4b21      	ldr	r3, [pc, #132]	; (8002088 <HAL_RCC_ClockConfig+0x1ec>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	429a      	cmp	r2, r3
 800200c:	d001      	beq.n	8002012 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e036      	b.n	8002080 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	2b00      	cmp	r3, #0
 800201c:	d008      	beq.n	8002030 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800201e:	4b1b      	ldr	r3, [pc, #108]	; (800208c <HAL_RCC_ClockConfig+0x1f0>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	4918      	ldr	r1, [pc, #96]	; (800208c <HAL_RCC_ClockConfig+0x1f0>)
 800202c:	4313      	orrs	r3, r2
 800202e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0308 	and.w	r3, r3, #8
 8002038:	2b00      	cmp	r3, #0
 800203a:	d009      	beq.n	8002050 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800203c:	4b13      	ldr	r3, [pc, #76]	; (800208c <HAL_RCC_ClockConfig+0x1f0>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	4910      	ldr	r1, [pc, #64]	; (800208c <HAL_RCC_ClockConfig+0x1f0>)
 800204c:	4313      	orrs	r3, r2
 800204e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002050:	f000 f824 	bl	800209c <HAL_RCC_GetSysClockFreq>
 8002054:	4602      	mov	r2, r0
 8002056:	4b0d      	ldr	r3, [pc, #52]	; (800208c <HAL_RCC_ClockConfig+0x1f0>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	091b      	lsrs	r3, r3, #4
 800205c:	f003 030f 	and.w	r3, r3, #15
 8002060:	490b      	ldr	r1, [pc, #44]	; (8002090 <HAL_RCC_ClockConfig+0x1f4>)
 8002062:	5ccb      	ldrb	r3, [r1, r3]
 8002064:	f003 031f 	and.w	r3, r3, #31
 8002068:	fa22 f303 	lsr.w	r3, r2, r3
 800206c:	4a09      	ldr	r2, [pc, #36]	; (8002094 <HAL_RCC_ClockConfig+0x1f8>)
 800206e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002070:	4b09      	ldr	r3, [pc, #36]	; (8002098 <HAL_RCC_ClockConfig+0x1fc>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe ffa9 	bl	8000fcc <HAL_InitTick>
 800207a:	4603      	mov	r3, r0
 800207c:	72fb      	strb	r3, [r7, #11]

  return status;
 800207e:	7afb      	ldrb	r3, [r7, #11]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40022000 	.word	0x40022000
 800208c:	40021000 	.word	0x40021000
 8002090:	0800465c 	.word	0x0800465c
 8002094:	20000000 	.word	0x20000000
 8002098:	20000004 	.word	0x20000004

0800209c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800209c:	b480      	push	{r7}
 800209e:	b089      	sub	sp, #36	; 0x24
 80020a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61fb      	str	r3, [r7, #28]
 80020a6:	2300      	movs	r3, #0
 80020a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020aa:	4b3e      	ldr	r3, [pc, #248]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 030c 	and.w	r3, r3, #12
 80020b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020b4:	4b3b      	ldr	r3, [pc, #236]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f003 0303 	and.w	r3, r3, #3
 80020bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d005      	beq.n	80020d0 <HAL_RCC_GetSysClockFreq+0x34>
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	2b0c      	cmp	r3, #12
 80020c8:	d121      	bne.n	800210e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d11e      	bne.n	800210e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020d0:	4b34      	ldr	r3, [pc, #208]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0308 	and.w	r3, r3, #8
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d107      	bne.n	80020ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020dc:	4b31      	ldr	r3, [pc, #196]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020e2:	0a1b      	lsrs	r3, r3, #8
 80020e4:	f003 030f 	and.w	r3, r3, #15
 80020e8:	61fb      	str	r3, [r7, #28]
 80020ea:	e005      	b.n	80020f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020ec:	4b2d      	ldr	r3, [pc, #180]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	091b      	lsrs	r3, r3, #4
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020f8:	4a2b      	ldr	r2, [pc, #172]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002100:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d10d      	bne.n	8002124 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800210c:	e00a      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	2b04      	cmp	r3, #4
 8002112:	d102      	bne.n	800211a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002114:	4b25      	ldr	r3, [pc, #148]	; (80021ac <HAL_RCC_GetSysClockFreq+0x110>)
 8002116:	61bb      	str	r3, [r7, #24]
 8002118:	e004      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	2b08      	cmp	r3, #8
 800211e:	d101      	bne.n	8002124 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002120:	4b23      	ldr	r3, [pc, #140]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002122:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	2b0c      	cmp	r3, #12
 8002128:	d134      	bne.n	8002194 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800212a:	4b1e      	ldr	r3, [pc, #120]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	2b02      	cmp	r3, #2
 8002138:	d003      	beq.n	8002142 <HAL_RCC_GetSysClockFreq+0xa6>
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	2b03      	cmp	r3, #3
 800213e:	d003      	beq.n	8002148 <HAL_RCC_GetSysClockFreq+0xac>
 8002140:	e005      	b.n	800214e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002142:	4b1a      	ldr	r3, [pc, #104]	; (80021ac <HAL_RCC_GetSysClockFreq+0x110>)
 8002144:	617b      	str	r3, [r7, #20]
      break;
 8002146:	e005      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002148:	4b19      	ldr	r3, [pc, #100]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800214a:	617b      	str	r3, [r7, #20]
      break;
 800214c:	e002      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	617b      	str	r3, [r7, #20]
      break;
 8002152:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002154:	4b13      	ldr	r3, [pc, #76]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	091b      	lsrs	r3, r3, #4
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	3301      	adds	r3, #1
 8002160:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002162:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	0a1b      	lsrs	r3, r3, #8
 8002168:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	fb03 f202 	mul.w	r2, r3, r2
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	fbb2 f3f3 	udiv	r3, r2, r3
 8002178:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800217a:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	0e5b      	lsrs	r3, r3, #25
 8002180:	f003 0303 	and.w	r3, r3, #3
 8002184:	3301      	adds	r3, #1
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002192:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002194:	69bb      	ldr	r3, [r7, #24]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3724      	adds	r7, #36	; 0x24
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000
 80021a8:	08004674 	.word	0x08004674
 80021ac:	00f42400 	.word	0x00f42400
 80021b0:	007a1200 	.word	0x007a1200

080021b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021b8:	4b03      	ldr	r3, [pc, #12]	; (80021c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80021ba:	681b      	ldr	r3, [r3, #0]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	20000000 	.word	0x20000000

080021cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021d0:	f7ff fff0 	bl	80021b4 <HAL_RCC_GetHCLKFreq>
 80021d4:	4602      	mov	r2, r0
 80021d6:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	0a1b      	lsrs	r3, r3, #8
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	4904      	ldr	r1, [pc, #16]	; (80021f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021e2:	5ccb      	ldrb	r3, [r1, r3]
 80021e4:	f003 031f 	and.w	r3, r3, #31
 80021e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40021000 	.word	0x40021000
 80021f4:	0800466c 	.word	0x0800466c

080021f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021fc:	f7ff ffda 	bl	80021b4 <HAL_RCC_GetHCLKFreq>
 8002200:	4602      	mov	r2, r0
 8002202:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	0adb      	lsrs	r3, r3, #11
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	4904      	ldr	r1, [pc, #16]	; (8002220 <HAL_RCC_GetPCLK2Freq+0x28>)
 800220e:	5ccb      	ldrb	r3, [r1, r3]
 8002210:	f003 031f 	and.w	r3, r3, #31
 8002214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002218:	4618      	mov	r0, r3
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40021000 	.word	0x40021000
 8002220:	0800466c 	.word	0x0800466c

08002224 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800222c:	2300      	movs	r3, #0
 800222e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002230:	4b2a      	ldr	r3, [pc, #168]	; (80022dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800223c:	f7ff f9ee 	bl	800161c <HAL_PWREx_GetVoltageRange>
 8002240:	6178      	str	r0, [r7, #20]
 8002242:	e014      	b.n	800226e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002244:	4b25      	ldr	r3, [pc, #148]	; (80022dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002248:	4a24      	ldr	r2, [pc, #144]	; (80022dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800224a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800224e:	6593      	str	r3, [r2, #88]	; 0x58
 8002250:	4b22      	ldr	r3, [pc, #136]	; (80022dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800225c:	f7ff f9de 	bl	800161c <HAL_PWREx_GetVoltageRange>
 8002260:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002262:	4b1e      	ldr	r3, [pc, #120]	; (80022dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002266:	4a1d      	ldr	r2, [pc, #116]	; (80022dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002268:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800226c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002274:	d10b      	bne.n	800228e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b80      	cmp	r3, #128	; 0x80
 800227a:	d919      	bls.n	80022b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2ba0      	cmp	r3, #160	; 0xa0
 8002280:	d902      	bls.n	8002288 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002282:	2302      	movs	r3, #2
 8002284:	613b      	str	r3, [r7, #16]
 8002286:	e013      	b.n	80022b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002288:	2301      	movs	r3, #1
 800228a:	613b      	str	r3, [r7, #16]
 800228c:	e010      	b.n	80022b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b80      	cmp	r3, #128	; 0x80
 8002292:	d902      	bls.n	800229a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002294:	2303      	movs	r3, #3
 8002296:	613b      	str	r3, [r7, #16]
 8002298:	e00a      	b.n	80022b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b80      	cmp	r3, #128	; 0x80
 800229e:	d102      	bne.n	80022a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022a0:	2302      	movs	r3, #2
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	e004      	b.n	80022b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b70      	cmp	r3, #112	; 0x70
 80022aa:	d101      	bne.n	80022b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022ac:	2301      	movs	r3, #1
 80022ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022b0:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f023 0207 	bic.w	r2, r3, #7
 80022b8:	4909      	ldr	r1, [pc, #36]	; (80022e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022c0:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d001      	beq.n	80022d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e000      	b.n	80022d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3718      	adds	r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40021000 	.word	0x40021000
 80022e0:	40022000 	.word	0x40022000

080022e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022ec:	2300      	movs	r3, #0
 80022ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022f0:	2300      	movs	r3, #0
 80022f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d041      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002304:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002308:	d02a      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800230a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800230e:	d824      	bhi.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002310:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002314:	d008      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002316:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800231a:	d81e      	bhi.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00a      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002320:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002324:	d010      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002326:	e018      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002328:	4b86      	ldr	r3, [pc, #536]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	4a85      	ldr	r2, [pc, #532]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800232e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002332:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002334:	e015      	b.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3304      	adds	r3, #4
 800233a:	2100      	movs	r1, #0
 800233c:	4618      	mov	r0, r3
 800233e:	f000 fabb 	bl	80028b8 <RCCEx_PLLSAI1_Config>
 8002342:	4603      	mov	r3, r0
 8002344:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002346:	e00c      	b.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3320      	adds	r3, #32
 800234c:	2100      	movs	r1, #0
 800234e:	4618      	mov	r0, r3
 8002350:	f000 fba6 	bl	8002aa0 <RCCEx_PLLSAI2_Config>
 8002354:	4603      	mov	r3, r0
 8002356:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002358:	e003      	b.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	74fb      	strb	r3, [r7, #19]
      break;
 800235e:	e000      	b.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002360:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002362:	7cfb      	ldrb	r3, [r7, #19]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10b      	bne.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002368:	4b76      	ldr	r3, [pc, #472]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800236a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002376:	4973      	ldr	r1, [pc, #460]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800237e:	e001      	b.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002380:	7cfb      	ldrb	r3, [r7, #19]
 8002382:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d041      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002394:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002398:	d02a      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800239a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800239e:	d824      	bhi.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80023a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023a4:	d008      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80023a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023aa:	d81e      	bhi.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00a      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80023b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023b4:	d010      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80023b6:	e018      	b.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023b8:	4b62      	ldr	r3, [pc, #392]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	4a61      	ldr	r2, [pc, #388]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023c4:	e015      	b.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3304      	adds	r3, #4
 80023ca:	2100      	movs	r1, #0
 80023cc:	4618      	mov	r0, r3
 80023ce:	f000 fa73 	bl	80028b8 <RCCEx_PLLSAI1_Config>
 80023d2:	4603      	mov	r3, r0
 80023d4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023d6:	e00c      	b.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3320      	adds	r3, #32
 80023dc:	2100      	movs	r1, #0
 80023de:	4618      	mov	r0, r3
 80023e0:	f000 fb5e 	bl	8002aa0 <RCCEx_PLLSAI2_Config>
 80023e4:	4603      	mov	r3, r0
 80023e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023e8:	e003      	b.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	74fb      	strb	r3, [r7, #19]
      break;
 80023ee:	e000      	b.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80023f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023f2:	7cfb      	ldrb	r3, [r7, #19]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10b      	bne.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023f8:	4b52      	ldr	r3, [pc, #328]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002406:	494f      	ldr	r1, [pc, #316]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002408:	4313      	orrs	r3, r2
 800240a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800240e:	e001      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002410:	7cfb      	ldrb	r3, [r7, #19]
 8002412:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 80a0 	beq.w	8002562 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002422:	2300      	movs	r3, #0
 8002424:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002426:	4b47      	ldr	r3, [pc, #284]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002436:	2300      	movs	r3, #0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00d      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800243c:	4b41      	ldr	r3, [pc, #260]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800243e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002440:	4a40      	ldr	r2, [pc, #256]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002446:	6593      	str	r3, [r2, #88]	; 0x58
 8002448:	4b3e      	ldr	r3, [pc, #248]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800244a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002450:	60bb      	str	r3, [r7, #8]
 8002452:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002454:	2301      	movs	r3, #1
 8002456:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002458:	4b3b      	ldr	r3, [pc, #236]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a3a      	ldr	r2, [pc, #232]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800245e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002462:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002464:	f7fe fe02 	bl	800106c <HAL_GetTick>
 8002468:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800246a:	e009      	b.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800246c:	f7fe fdfe 	bl	800106c <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d902      	bls.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	74fb      	strb	r3, [r7, #19]
        break;
 800247e:	e005      	b.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002480:	4b31      	ldr	r3, [pc, #196]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0ef      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800248c:	7cfb      	ldrb	r3, [r7, #19]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d15c      	bne.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002492:	4b2c      	ldr	r3, [pc, #176]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002498:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800249c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d01f      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d019      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024b0:	4b24      	ldr	r3, [pc, #144]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024bc:	4b21      	ldr	r3, [pc, #132]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c2:	4a20      	ldr	r2, [pc, #128]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024cc:	4b1d      	ldr	r3, [pc, #116]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d2:	4a1c      	ldr	r2, [pc, #112]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024dc:	4a19      	ldr	r2, [pc, #100]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d016      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ee:	f7fe fdbd 	bl	800106c <HAL_GetTick>
 80024f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024f4:	e00b      	b.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f6:	f7fe fdb9 	bl	800106c <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	f241 3288 	movw	r2, #5000	; 0x1388
 8002504:	4293      	cmp	r3, r2
 8002506:	d902      	bls.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	74fb      	strb	r3, [r7, #19]
            break;
 800250c:	e006      	b.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800250e:	4b0d      	ldr	r3, [pc, #52]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0ec      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800251c:	7cfb      	ldrb	r3, [r7, #19]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10c      	bne.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002522:	4b08      	ldr	r3, [pc, #32]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002528:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002532:	4904      	ldr	r1, [pc, #16]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002534:	4313      	orrs	r3, r2
 8002536:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800253a:	e009      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800253c:	7cfb      	ldrb	r3, [r7, #19]
 800253e:	74bb      	strb	r3, [r7, #18]
 8002540:	e006      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002542:	bf00      	nop
 8002544:	40021000 	.word	0x40021000
 8002548:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800254c:	7cfb      	ldrb	r3, [r7, #19]
 800254e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002550:	7c7b      	ldrb	r3, [r7, #17]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d105      	bne.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002556:	4b9e      	ldr	r3, [pc, #632]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255a:	4a9d      	ldr	r2, [pc, #628]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800255c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002560:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00a      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800256e:	4b98      	ldr	r3, [pc, #608]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002574:	f023 0203 	bic.w	r2, r3, #3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257c:	4994      	ldr	r1, [pc, #592]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800257e:	4313      	orrs	r3, r2
 8002580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00a      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002590:	4b8f      	ldr	r3, [pc, #572]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002596:	f023 020c 	bic.w	r2, r3, #12
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259e:	498c      	ldr	r1, [pc, #560]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00a      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025b2:	4b87      	ldr	r3, [pc, #540]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	4983      	ldr	r1, [pc, #524]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00a      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025d4:	4b7e      	ldr	r3, [pc, #504]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	497b      	ldr	r1, [pc, #492]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0310 	and.w	r3, r3, #16
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00a      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025f6:	4b76      	ldr	r3, [pc, #472]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002604:	4972      	ldr	r1, [pc, #456]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002606:	4313      	orrs	r3, r2
 8002608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0320 	and.w	r3, r3, #32
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00a      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002618:	4b6d      	ldr	r3, [pc, #436]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800261a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002626:	496a      	ldr	r1, [pc, #424]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002628:	4313      	orrs	r3, r2
 800262a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00a      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800263a:	4b65      	ldr	r3, [pc, #404]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002640:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002648:	4961      	ldr	r1, [pc, #388]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264a:	4313      	orrs	r3, r2
 800264c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00a      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800265c:	4b5c      	ldr	r3, [pc, #368]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002662:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800266a:	4959      	ldr	r1, [pc, #356]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266c:	4313      	orrs	r3, r2
 800266e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00a      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800267e:	4b54      	ldr	r3, [pc, #336]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002684:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800268c:	4950      	ldr	r1, [pc, #320]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800268e:	4313      	orrs	r3, r2
 8002690:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00a      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026a0:	4b4b      	ldr	r3, [pc, #300]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ae:	4948      	ldr	r1, [pc, #288]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00a      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026c2:	4b43      	ldr	r3, [pc, #268]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d0:	493f      	ldr	r1, [pc, #252]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d028      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026e4:	4b3a      	ldr	r3, [pc, #232]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026f2:	4937      	ldr	r1, [pc, #220]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002702:	d106      	bne.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002704:	4b32      	ldr	r3, [pc, #200]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	4a31      	ldr	r2, [pc, #196]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800270e:	60d3      	str	r3, [r2, #12]
 8002710:	e011      	b.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002716:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800271a:	d10c      	bne.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3304      	adds	r3, #4
 8002720:	2101      	movs	r1, #1
 8002722:	4618      	mov	r0, r3
 8002724:	f000 f8c8 	bl	80028b8 <RCCEx_PLLSAI1_Config>
 8002728:	4603      	mov	r3, r0
 800272a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800272c:	7cfb      	ldrb	r3, [r7, #19]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002732:	7cfb      	ldrb	r3, [r7, #19]
 8002734:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d028      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002742:	4b23      	ldr	r3, [pc, #140]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002748:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002750:	491f      	ldr	r1, [pc, #124]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002752:	4313      	orrs	r3, r2
 8002754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002760:	d106      	bne.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002762:	4b1b      	ldr	r3, [pc, #108]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	4a1a      	ldr	r2, [pc, #104]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002768:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800276c:	60d3      	str	r3, [r2, #12]
 800276e:	e011      	b.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002774:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002778:	d10c      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3304      	adds	r3, #4
 800277e:	2101      	movs	r1, #1
 8002780:	4618      	mov	r0, r3
 8002782:	f000 f899 	bl	80028b8 <RCCEx_PLLSAI1_Config>
 8002786:	4603      	mov	r3, r0
 8002788:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800278a:	7cfb      	ldrb	r3, [r7, #19]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002790:	7cfb      	ldrb	r3, [r7, #19]
 8002792:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d02b      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027a0:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ae:	4908      	ldr	r1, [pc, #32]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027be:	d109      	bne.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027c0:	4b03      	ldr	r3, [pc, #12]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	4a02      	ldr	r2, [pc, #8]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027ca:	60d3      	str	r3, [r2, #12]
 80027cc:	e014      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80027ce:	bf00      	nop
 80027d0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027dc:	d10c      	bne.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	3304      	adds	r3, #4
 80027e2:	2101      	movs	r1, #1
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 f867 	bl	80028b8 <RCCEx_PLLSAI1_Config>
 80027ea:	4603      	mov	r3, r0
 80027ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027ee:	7cfb      	ldrb	r3, [r7, #19]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80027f4:	7cfb      	ldrb	r3, [r7, #19]
 80027f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d02f      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002804:	4b2b      	ldr	r3, [pc, #172]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002812:	4928      	ldr	r1, [pc, #160]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002814:	4313      	orrs	r3, r2
 8002816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800281e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002822:	d10d      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3304      	adds	r3, #4
 8002828:	2102      	movs	r1, #2
 800282a:	4618      	mov	r0, r3
 800282c:	f000 f844 	bl	80028b8 <RCCEx_PLLSAI1_Config>
 8002830:	4603      	mov	r3, r0
 8002832:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002834:	7cfb      	ldrb	r3, [r7, #19]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d014      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800283a:	7cfb      	ldrb	r3, [r7, #19]
 800283c:	74bb      	strb	r3, [r7, #18]
 800283e:	e011      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002844:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002848:	d10c      	bne.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3320      	adds	r3, #32
 800284e:	2102      	movs	r1, #2
 8002850:	4618      	mov	r0, r3
 8002852:	f000 f925 	bl	8002aa0 <RCCEx_PLLSAI2_Config>
 8002856:	4603      	mov	r3, r0
 8002858:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800285a:	7cfb      	ldrb	r3, [r7, #19]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002860:	7cfb      	ldrb	r3, [r7, #19]
 8002862:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00a      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002870:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002876:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800287e:	490d      	ldr	r1, [pc, #52]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002880:	4313      	orrs	r3, r2
 8002882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00b      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002892:	4b08      	ldr	r3, [pc, #32]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002898:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028a2:	4904      	ldr	r1, [pc, #16]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80028aa:	7cbb      	ldrb	r3, [r7, #18]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40021000 	.word	0x40021000

080028b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028c2:	2300      	movs	r3, #0
 80028c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028c6:	4b75      	ldr	r3, [pc, #468]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d018      	beq.n	8002904 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80028d2:	4b72      	ldr	r3, [pc, #456]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	f003 0203 	and.w	r2, r3, #3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d10d      	bne.n	80028fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
       ||
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d009      	beq.n	80028fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80028ea:	4b6c      	ldr	r3, [pc, #432]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	091b      	lsrs	r3, r3, #4
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	1c5a      	adds	r2, r3, #1
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
       ||
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d047      	beq.n	800298e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	73fb      	strb	r3, [r7, #15]
 8002902:	e044      	b.n	800298e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2b03      	cmp	r3, #3
 800290a:	d018      	beq.n	800293e <RCCEx_PLLSAI1_Config+0x86>
 800290c:	2b03      	cmp	r3, #3
 800290e:	d825      	bhi.n	800295c <RCCEx_PLLSAI1_Config+0xa4>
 8002910:	2b01      	cmp	r3, #1
 8002912:	d002      	beq.n	800291a <RCCEx_PLLSAI1_Config+0x62>
 8002914:	2b02      	cmp	r3, #2
 8002916:	d009      	beq.n	800292c <RCCEx_PLLSAI1_Config+0x74>
 8002918:	e020      	b.n	800295c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800291a:	4b60      	ldr	r3, [pc, #384]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d11d      	bne.n	8002962 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800292a:	e01a      	b.n	8002962 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800292c:	4b5b      	ldr	r3, [pc, #364]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002934:	2b00      	cmp	r3, #0
 8002936:	d116      	bne.n	8002966 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800293c:	e013      	b.n	8002966 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800293e:	4b57      	ldr	r3, [pc, #348]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10f      	bne.n	800296a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800294a:	4b54      	ldr	r3, [pc, #336]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d109      	bne.n	800296a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800295a:	e006      	b.n	800296a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	73fb      	strb	r3, [r7, #15]
      break;
 8002960:	e004      	b.n	800296c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002962:	bf00      	nop
 8002964:	e002      	b.n	800296c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002966:	bf00      	nop
 8002968:	e000      	b.n	800296c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800296a:	bf00      	nop
    }

    if(status == HAL_OK)
 800296c:	7bfb      	ldrb	r3, [r7, #15]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10d      	bne.n	800298e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002972:	4b4a      	ldr	r3, [pc, #296]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6819      	ldr	r1, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	3b01      	subs	r3, #1
 8002984:	011b      	lsls	r3, r3, #4
 8002986:	430b      	orrs	r3, r1
 8002988:	4944      	ldr	r1, [pc, #272]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 800298a:	4313      	orrs	r3, r2
 800298c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800298e:	7bfb      	ldrb	r3, [r7, #15]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d17d      	bne.n	8002a90 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002994:	4b41      	ldr	r3, [pc, #260]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a40      	ldr	r2, [pc, #256]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 800299a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800299e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029a0:	f7fe fb64 	bl	800106c <HAL_GetTick>
 80029a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029a6:	e009      	b.n	80029bc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029a8:	f7fe fb60 	bl	800106c <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d902      	bls.n	80029bc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	73fb      	strb	r3, [r7, #15]
        break;
 80029ba:	e005      	b.n	80029c8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029bc:	4b37      	ldr	r3, [pc, #220]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1ef      	bne.n	80029a8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d160      	bne.n	8002a90 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d111      	bne.n	80029f8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029d4:	4b31      	ldr	r3, [pc, #196]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80029dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	6892      	ldr	r2, [r2, #8]
 80029e4:	0211      	lsls	r1, r2, #8
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	68d2      	ldr	r2, [r2, #12]
 80029ea:	0912      	lsrs	r2, r2, #4
 80029ec:	0452      	lsls	r2, r2, #17
 80029ee:	430a      	orrs	r2, r1
 80029f0:	492a      	ldr	r1, [pc, #168]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	610b      	str	r3, [r1, #16]
 80029f6:	e027      	b.n	8002a48 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d112      	bne.n	8002a24 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029fe:	4b27      	ldr	r3, [pc, #156]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002a06:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6892      	ldr	r2, [r2, #8]
 8002a0e:	0211      	lsls	r1, r2, #8
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6912      	ldr	r2, [r2, #16]
 8002a14:	0852      	lsrs	r2, r2, #1
 8002a16:	3a01      	subs	r2, #1
 8002a18:	0552      	lsls	r2, r2, #21
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	491f      	ldr	r1, [pc, #124]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	610b      	str	r3, [r1, #16]
 8002a22:	e011      	b.n	8002a48 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a24:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a2c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6892      	ldr	r2, [r2, #8]
 8002a34:	0211      	lsls	r1, r2, #8
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6952      	ldr	r2, [r2, #20]
 8002a3a:	0852      	lsrs	r2, r2, #1
 8002a3c:	3a01      	subs	r2, #1
 8002a3e:	0652      	lsls	r2, r2, #25
 8002a40:	430a      	orrs	r2, r1
 8002a42:	4916      	ldr	r1, [pc, #88]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a48:	4b14      	ldr	r3, [pc, #80]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a13      	ldr	r2, [pc, #76]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a54:	f7fe fb0a 	bl	800106c <HAL_GetTick>
 8002a58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a5a:	e009      	b.n	8002a70 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a5c:	f7fe fb06 	bl	800106c <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d902      	bls.n	8002a70 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	73fb      	strb	r3, [r7, #15]
          break;
 8002a6e:	e005      	b.n	8002a7c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a70:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0ef      	beq.n	8002a5c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d106      	bne.n	8002a90 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a82:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a84:	691a      	ldr	r2, [r3, #16]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	4904      	ldr	r1, [pc, #16]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40021000 	.word	0x40021000

08002aa0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002aae:	4b6a      	ldr	r3, [pc, #424]	; (8002c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d018      	beq.n	8002aec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002aba:	4b67      	ldr	r3, [pc, #412]	; (8002c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f003 0203 	and.w	r2, r3, #3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d10d      	bne.n	8002ae6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
       ||
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d009      	beq.n	8002ae6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002ad2:	4b61      	ldr	r3, [pc, #388]	; (8002c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	091b      	lsrs	r3, r3, #4
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	1c5a      	adds	r2, r3, #1
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
       ||
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d047      	beq.n	8002b76 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	73fb      	strb	r3, [r7, #15]
 8002aea:	e044      	b.n	8002b76 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b03      	cmp	r3, #3
 8002af2:	d018      	beq.n	8002b26 <RCCEx_PLLSAI2_Config+0x86>
 8002af4:	2b03      	cmp	r3, #3
 8002af6:	d825      	bhi.n	8002b44 <RCCEx_PLLSAI2_Config+0xa4>
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d002      	beq.n	8002b02 <RCCEx_PLLSAI2_Config+0x62>
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d009      	beq.n	8002b14 <RCCEx_PLLSAI2_Config+0x74>
 8002b00:	e020      	b.n	8002b44 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b02:	4b55      	ldr	r3, [pc, #340]	; (8002c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d11d      	bne.n	8002b4a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b12:	e01a      	b.n	8002b4a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b14:	4b50      	ldr	r3, [pc, #320]	; (8002c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d116      	bne.n	8002b4e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b24:	e013      	b.n	8002b4e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b26:	4b4c      	ldr	r3, [pc, #304]	; (8002c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10f      	bne.n	8002b52 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b32:	4b49      	ldr	r3, [pc, #292]	; (8002c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d109      	bne.n	8002b52 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b42:	e006      	b.n	8002b52 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	73fb      	strb	r3, [r7, #15]
      break;
 8002b48:	e004      	b.n	8002b54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b4a:	bf00      	nop
 8002b4c:	e002      	b.n	8002b54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b4e:	bf00      	nop
 8002b50:	e000      	b.n	8002b54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b52:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10d      	bne.n	8002b76 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b5a:	4b3f      	ldr	r3, [pc, #252]	; (8002c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6819      	ldr	r1, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	011b      	lsls	r3, r3, #4
 8002b6e:	430b      	orrs	r3, r1
 8002b70:	4939      	ldr	r1, [pc, #228]	; (8002c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b76:	7bfb      	ldrb	r3, [r7, #15]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d167      	bne.n	8002c4c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b7c:	4b36      	ldr	r3, [pc, #216]	; (8002c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a35      	ldr	r2, [pc, #212]	; (8002c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b88:	f7fe fa70 	bl	800106c <HAL_GetTick>
 8002b8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b8e:	e009      	b.n	8002ba4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b90:	f7fe fa6c 	bl	800106c <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d902      	bls.n	8002ba4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	73fb      	strb	r3, [r7, #15]
        break;
 8002ba2:	e005      	b.n	8002bb0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ba4:	4b2c      	ldr	r3, [pc, #176]	; (8002c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1ef      	bne.n	8002b90 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d14a      	bne.n	8002c4c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d111      	bne.n	8002be0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bbc:	4b26      	ldr	r3, [pc, #152]	; (8002c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002bc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6892      	ldr	r2, [r2, #8]
 8002bcc:	0211      	lsls	r1, r2, #8
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	68d2      	ldr	r2, [r2, #12]
 8002bd2:	0912      	lsrs	r2, r2, #4
 8002bd4:	0452      	lsls	r2, r2, #17
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	491f      	ldr	r1, [pc, #124]	; (8002c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	614b      	str	r3, [r1, #20]
 8002bde:	e011      	b.n	8002c04 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002be0:	4b1d      	ldr	r3, [pc, #116]	; (8002c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be2:	695b      	ldr	r3, [r3, #20]
 8002be4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002be8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6892      	ldr	r2, [r2, #8]
 8002bf0:	0211      	lsls	r1, r2, #8
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6912      	ldr	r2, [r2, #16]
 8002bf6:	0852      	lsrs	r2, r2, #1
 8002bf8:	3a01      	subs	r2, #1
 8002bfa:	0652      	lsls	r2, r2, #25
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	4916      	ldr	r1, [pc, #88]	; (8002c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c04:	4b14      	ldr	r3, [pc, #80]	; (8002c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a13      	ldr	r2, [pc, #76]	; (8002c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c0e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c10:	f7fe fa2c 	bl	800106c <HAL_GetTick>
 8002c14:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c16:	e009      	b.n	8002c2c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c18:	f7fe fa28 	bl	800106c <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d902      	bls.n	8002c2c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	73fb      	strb	r3, [r7, #15]
          break;
 8002c2a:	e005      	b.n	8002c38 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c2c:	4b0a      	ldr	r3, [pc, #40]	; (8002c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0ef      	beq.n	8002c18 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d106      	bne.n	8002c4c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c3e:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c40:	695a      	ldr	r2, [r3, #20]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	4904      	ldr	r1, [pc, #16]	; (8002c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40021000 	.word	0x40021000

08002c5c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d079      	beq.n	8002d62 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d106      	bne.n	8002c88 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7fe f860 	bl	8000d48 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f003 0310 	and.w	r3, r3, #16
 8002c9a:	2b10      	cmp	r3, #16
 8002c9c:	d058      	beq.n	8002d50 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	22ca      	movs	r2, #202	; 0xca
 8002ca4:	625a      	str	r2, [r3, #36]	; 0x24
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2253      	movs	r2, #83	; 0x53
 8002cac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 fa4e 	bl	8003150 <RTC_EnterInitMode>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d127      	bne.n	8002d0e <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6812      	ldr	r2, [r2, #0]
 8002cc8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002ccc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cd0:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6899      	ldr	r1, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	68d2      	ldr	r2, [r2, #12]
 8002cf8:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6919      	ldr	r1, [r3, #16]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	041a      	lsls	r2, r3, #16
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 fa52 	bl	80031b8 <RTC_ExitInitMode>
 8002d14:	4603      	mov	r3, r0
 8002d16:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d113      	bne.n	8002d46 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 0203 	bic.w	r2, r2, #3
 8002d2c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	69da      	ldr	r2, [r3, #28]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	22ff      	movs	r2, #255	; 0xff
 8002d4c:	625a      	str	r2, [r3, #36]	; 0x24
 8002d4e:	e001      	b.n	8002d54 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002d50:	2300      	movs	r3, #0
 8002d52:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d103      	bne.n	8002d62 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d6c:	b590      	push	{r4, r7, lr}
 8002d6e:	b087      	sub	sp, #28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <HAL_RTC_SetTime+0x1a>
 8002d82:	2302      	movs	r3, #2
 8002d84:	e08b      	b.n	8002e9e <HAL_RTC_SetTime+0x132>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2202      	movs	r2, #2
 8002d92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	22ca      	movs	r2, #202	; 0xca
 8002d9c:	625a      	str	r2, [r3, #36]	; 0x24
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2253      	movs	r2, #83	; 0x53
 8002da4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 f9d2 	bl	8003150 <RTC_EnterInitMode>
 8002dac:	4603      	mov	r3, r0
 8002dae:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002db0:	7cfb      	ldrb	r3, [r7, #19]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d163      	bne.n	8002e7e <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d126      	bne.n	8002e0a <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d102      	bne.n	8002dd0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 fa2d 	bl	8003234 <RTC_ByteToBcd2>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	785b      	ldrb	r3, [r3, #1]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 fa26 	bl	8003234 <RTC_ByteToBcd2>
 8002de8:	4603      	mov	r3, r0
 8002dea:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002dec:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	789b      	ldrb	r3, [r3, #2]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 fa1e 	bl	8003234 <RTC_ByteToBcd2>
 8002df8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002dfa:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	78db      	ldrb	r3, [r3, #3]
 8002e02:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002e04:	4313      	orrs	r3, r2
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	e018      	b.n	8002e3c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d102      	bne.n	8002e1e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	785b      	ldrb	r3, [r3, #1]
 8002e28:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002e2a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002e30:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	78db      	ldrb	r3, [r3, #3]
 8002e36:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002e46:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002e4a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e5a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6899      	ldr	r1, [r3, #8]
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 f99f 	bl	80031b8 <RTC_ExitInitMode>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	22ff      	movs	r2, #255	; 0xff
 8002e84:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002e86:	7cfb      	ldrb	r3, [r7, #19]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d103      	bne.n	8002e94 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002e9c:	7cfb      	ldrb	r3, [r7, #19]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	371c      	adds	r7, #28
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd90      	pop	{r4, r7, pc}

08002ea6 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b086      	sub	sp, #24
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	60f8      	str	r0, [r7, #12]
 8002eae:	60b9      	str	r1, [r7, #8]
 8002eb0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002ed4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002ed8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	0c1b      	lsrs	r3, r3, #16
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ee4:	b2da      	uxtb	r2, r3
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	0a1b      	lsrs	r3, r3, #8
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	0d9b      	lsrs	r3, r3, #22
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	b2da      	uxtb	r2, r3
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d11a      	bne.n	8002f54 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 f9a6 	bl	8003274 <RTC_Bcd2ToByte>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	785b      	ldrb	r3, [r3, #1]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f000 f99d 	bl	8003274 <RTC_Bcd2ToByte>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	789b      	ldrb	r3, [r3, #2]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 f994 	bl	8003274 <RTC_Bcd2ToByte>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	461a      	mov	r2, r3
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002f5e:	b590      	push	{r4, r7, lr}
 8002f60:	b087      	sub	sp, #28
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d101      	bne.n	8002f78 <HAL_RTC_SetDate+0x1a>
 8002f74:	2302      	movs	r3, #2
 8002f76:	e075      	b.n	8003064 <HAL_RTC_SetDate+0x106>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2202      	movs	r2, #2
 8002f84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10e      	bne.n	8002fac <HAL_RTC_SetDate+0x4e>
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	785b      	ldrb	r3, [r3, #1]
 8002f92:	f003 0310 	and.w	r3, r3, #16
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d008      	beq.n	8002fac <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	785b      	ldrb	r3, [r3, #1]
 8002f9e:	f023 0310 	bic.w	r3, r3, #16
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	330a      	adds	r3, #10
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d11c      	bne.n	8002fec <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	78db      	ldrb	r3, [r3, #3]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 f93c 	bl	8003234 <RTC_ByteToBcd2>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	785b      	ldrb	r3, [r3, #1]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 f935 	bl	8003234 <RTC_ByteToBcd2>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002fce:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	789b      	ldrb	r3, [r3, #2]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 f92d 	bl	8003234 <RTC_ByteToBcd2>
 8002fda:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002fdc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	617b      	str	r3, [r7, #20]
 8002fea:	e00e      	b.n	800300a <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	78db      	ldrb	r3, [r3, #3]
 8002ff0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	785b      	ldrb	r3, [r3, #1]
 8002ff6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002ff8:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002ffe:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003006:	4313      	orrs	r3, r2
 8003008:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	22ca      	movs	r2, #202	; 0xca
 8003010:	625a      	str	r2, [r3, #36]	; 0x24
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2253      	movs	r2, #83	; 0x53
 8003018:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 f898 	bl	8003150 <RTC_EnterInitMode>
 8003020:	4603      	mov	r3, r0
 8003022:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003024:	7cfb      	ldrb	r3, [r7, #19]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10c      	bne.n	8003044 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003034:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003038:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f000 f8bc 	bl	80031b8 <RTC_ExitInitMode>
 8003040:	4603      	mov	r3, r0
 8003042:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	22ff      	movs	r2, #255	; 0xff
 800304a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800304c:	7cfb      	ldrb	r3, [r7, #19]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d103      	bne.n	800305a <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003062:	7cfb      	ldrb	r3, [r7, #19]
}
 8003064:	4618      	mov	r0, r3
 8003066:	371c      	adds	r7, #28
 8003068:	46bd      	mov	sp, r7
 800306a:	bd90      	pop	{r4, r7, pc}

0800306c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003082:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003086:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	0c1b      	lsrs	r3, r3, #16
 800308c:	b2da      	uxtb	r2, r3
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	0a1b      	lsrs	r3, r3, #8
 8003096:	b2db      	uxtb	r3, r3
 8003098:	f003 031f 	and.w	r3, r3, #31
 800309c:	b2da      	uxtb	r2, r3
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	0b5b      	lsrs	r3, r3, #13
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d11a      	bne.n	80030fc <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	78db      	ldrb	r3, [r3, #3]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 f8d2 	bl	8003274 <RTC_Bcd2ToByte>
 80030d0:	4603      	mov	r3, r0
 80030d2:	461a      	mov	r2, r3
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	785b      	ldrb	r3, [r3, #1]
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 f8c9 	bl	8003274 <RTC_Bcd2ToByte>
 80030e2:	4603      	mov	r3, r0
 80030e4:	461a      	mov	r2, r3
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	789b      	ldrb	r3, [r3, #2]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 f8c0 	bl	8003274 <RTC_Bcd2ToByte>
 80030f4:	4603      	mov	r3, r0
 80030f6:	461a      	mov	r2, r3
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3718      	adds	r7, #24
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
	...

08003108 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a0d      	ldr	r2, [pc, #52]	; (800314c <HAL_RTC_WaitForSynchro+0x44>)
 8003116:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003118:	f7fd ffa8 	bl	800106c <HAL_GetTick>
 800311c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800311e:	e009      	b.n	8003134 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003120:	f7fd ffa4 	bl	800106c <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800312e:	d901      	bls.n	8003134 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e007      	b.n	8003144 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f003 0320 	and.w	r3, r3, #32
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0ee      	beq.n	8003120 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	0003ff5f 	.word	0x0003ff5f

08003150 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003158:	2300      	movs	r3, #0
 800315a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003166:	2b00      	cmp	r3, #0
 8003168:	d120      	bne.n	80031ac <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f04f 32ff 	mov.w	r2, #4294967295
 8003172:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003174:	f7fd ff7a 	bl	800106c <HAL_GetTick>
 8003178:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800317a:	e00d      	b.n	8003198 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800317c:	f7fd ff76 	bl	800106c <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800318a:	d905      	bls.n	8003198 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2203      	movs	r2, #3
 8003194:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d102      	bne.n	80031ac <RTC_EnterInitMode+0x5c>
 80031a6:	7bfb      	ldrb	r3, [r7, #15]
 80031a8:	2b03      	cmp	r3, #3
 80031aa:	d1e7      	bne.n	800317c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80031ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
	...

080031b8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031c0:	2300      	movs	r3, #0
 80031c2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80031c4:	4b1a      	ldr	r3, [pc, #104]	; (8003230 <RTC_ExitInitMode+0x78>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	4a19      	ldr	r2, [pc, #100]	; (8003230 <RTC_ExitInitMode+0x78>)
 80031ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031ce:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80031d0:	4b17      	ldr	r3, [pc, #92]	; (8003230 <RTC_ExitInitMode+0x78>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 0320 	and.w	r3, r3, #32
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10c      	bne.n	80031f6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7ff ff93 	bl	8003108 <HAL_RTC_WaitForSynchro>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d01e      	beq.n	8003226 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2203      	movs	r2, #3
 80031ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	73fb      	strb	r3, [r7, #15]
 80031f4:	e017      	b.n	8003226 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80031f6:	4b0e      	ldr	r3, [pc, #56]	; (8003230 <RTC_ExitInitMode+0x78>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	4a0d      	ldr	r2, [pc, #52]	; (8003230 <RTC_ExitInitMode+0x78>)
 80031fc:	f023 0320 	bic.w	r3, r3, #32
 8003200:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7ff ff80 	bl	8003108 <HAL_RTC_WaitForSynchro>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d005      	beq.n	800321a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2203      	movs	r2, #3
 8003212:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800321a:	4b05      	ldr	r3, [pc, #20]	; (8003230 <RTC_ExitInitMode+0x78>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	4a04      	ldr	r2, [pc, #16]	; (8003230 <RTC_ExitInitMode+0x78>)
 8003220:	f043 0320 	orr.w	r3, r3, #32
 8003224:	6093      	str	r3, [r2, #8]
  }

  return status;
 8003226:	7bfb      	ldrb	r3, [r7, #15]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	40002800 	.word	0x40002800

08003234 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	4603      	mov	r3, r0
 800323c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800323e:	2300      	movs	r3, #0
 8003240:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8003242:	79fb      	ldrb	r3, [r7, #7]
 8003244:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8003246:	e005      	b.n	8003254 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	3301      	adds	r3, #1
 800324c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800324e:	7afb      	ldrb	r3, [r7, #11]
 8003250:	3b0a      	subs	r3, #10
 8003252:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8003254:	7afb      	ldrb	r3, [r7, #11]
 8003256:	2b09      	cmp	r3, #9
 8003258:	d8f6      	bhi.n	8003248 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	b2db      	uxtb	r3, r3
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	b2da      	uxtb	r2, r3
 8003262:	7afb      	ldrb	r3, [r7, #11]
 8003264:	4313      	orrs	r3, r2
 8003266:	b2db      	uxtb	r3, r3
}
 8003268:	4618      	mov	r0, r3
 800326a:	3714      	adds	r7, #20
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	4603      	mov	r3, r0
 800327c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800327e:	79fb      	ldrb	r3, [r7, #7]
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	b2db      	uxtb	r3, r3
 8003284:	461a      	mov	r2, r3
 8003286:	0092      	lsls	r2, r2, #2
 8003288:	4413      	add	r3, r2
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800328e:	79fb      	ldrb	r3, [r7, #7]
 8003290:	f003 030f 	and.w	r3, r3, #15
 8003294:	b2da      	uxtb	r2, r3
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	4413      	add	r3, r2
 800329a:	b2db      	uxtb	r3, r3
}
 800329c:	4618      	mov	r0, r3
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e040      	b.n	800333c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d106      	bne.n	80032d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7fd fd6e 	bl	8000dac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2224      	movs	r2, #36	; 0x24
 80032d4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 0201 	bic.w	r2, r2, #1
 80032e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d002      	beq.n	80032f4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 fae0 	bl	80038b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 f825 	bl	8003344 <UART_SetConfig>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e01b      	b.n	800333c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003312:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003322:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0201 	orr.w	r2, r2, #1
 8003332:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 fb5f 	bl	80039f8 <UART_CheckIdleState>
 800333a:	4603      	mov	r3, r0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003348:	b08a      	sub	sp, #40	; 0x28
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800334e:	2300      	movs	r3, #0
 8003350:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	431a      	orrs	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	431a      	orrs	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	4313      	orrs	r3, r2
 800336a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	4ba4      	ldr	r3, [pc, #656]	; (8003604 <UART_SetConfig+0x2c0>)
 8003374:	4013      	ands	r3, r2
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	6812      	ldr	r2, [r2, #0]
 800337a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800337c:	430b      	orrs	r3, r1
 800337e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	68da      	ldr	r2, [r3, #12]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a99      	ldr	r2, [pc, #612]	; (8003608 <UART_SetConfig+0x2c4>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d004      	beq.n	80033b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ac:	4313      	orrs	r3, r2
 80033ae:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c0:	430a      	orrs	r2, r1
 80033c2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a90      	ldr	r2, [pc, #576]	; (800360c <UART_SetConfig+0x2c8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d126      	bne.n	800341c <UART_SetConfig+0xd8>
 80033ce:	4b90      	ldr	r3, [pc, #576]	; (8003610 <UART_SetConfig+0x2cc>)
 80033d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d4:	f003 0303 	and.w	r3, r3, #3
 80033d8:	2b03      	cmp	r3, #3
 80033da:	d81b      	bhi.n	8003414 <UART_SetConfig+0xd0>
 80033dc:	a201      	add	r2, pc, #4	; (adr r2, 80033e4 <UART_SetConfig+0xa0>)
 80033de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e2:	bf00      	nop
 80033e4:	080033f5 	.word	0x080033f5
 80033e8:	08003405 	.word	0x08003405
 80033ec:	080033fd 	.word	0x080033fd
 80033f0:	0800340d 	.word	0x0800340d
 80033f4:	2301      	movs	r3, #1
 80033f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033fa:	e116      	b.n	800362a <UART_SetConfig+0x2e6>
 80033fc:	2302      	movs	r3, #2
 80033fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003402:	e112      	b.n	800362a <UART_SetConfig+0x2e6>
 8003404:	2304      	movs	r3, #4
 8003406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800340a:	e10e      	b.n	800362a <UART_SetConfig+0x2e6>
 800340c:	2308      	movs	r3, #8
 800340e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003412:	e10a      	b.n	800362a <UART_SetConfig+0x2e6>
 8003414:	2310      	movs	r3, #16
 8003416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800341a:	e106      	b.n	800362a <UART_SetConfig+0x2e6>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a7c      	ldr	r2, [pc, #496]	; (8003614 <UART_SetConfig+0x2d0>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d138      	bne.n	8003498 <UART_SetConfig+0x154>
 8003426:	4b7a      	ldr	r3, [pc, #488]	; (8003610 <UART_SetConfig+0x2cc>)
 8003428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342c:	f003 030c 	and.w	r3, r3, #12
 8003430:	2b0c      	cmp	r3, #12
 8003432:	d82d      	bhi.n	8003490 <UART_SetConfig+0x14c>
 8003434:	a201      	add	r2, pc, #4	; (adr r2, 800343c <UART_SetConfig+0xf8>)
 8003436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343a:	bf00      	nop
 800343c:	08003471 	.word	0x08003471
 8003440:	08003491 	.word	0x08003491
 8003444:	08003491 	.word	0x08003491
 8003448:	08003491 	.word	0x08003491
 800344c:	08003481 	.word	0x08003481
 8003450:	08003491 	.word	0x08003491
 8003454:	08003491 	.word	0x08003491
 8003458:	08003491 	.word	0x08003491
 800345c:	08003479 	.word	0x08003479
 8003460:	08003491 	.word	0x08003491
 8003464:	08003491 	.word	0x08003491
 8003468:	08003491 	.word	0x08003491
 800346c:	08003489 	.word	0x08003489
 8003470:	2300      	movs	r3, #0
 8003472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003476:	e0d8      	b.n	800362a <UART_SetConfig+0x2e6>
 8003478:	2302      	movs	r3, #2
 800347a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800347e:	e0d4      	b.n	800362a <UART_SetConfig+0x2e6>
 8003480:	2304      	movs	r3, #4
 8003482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003486:	e0d0      	b.n	800362a <UART_SetConfig+0x2e6>
 8003488:	2308      	movs	r3, #8
 800348a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800348e:	e0cc      	b.n	800362a <UART_SetConfig+0x2e6>
 8003490:	2310      	movs	r3, #16
 8003492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003496:	e0c8      	b.n	800362a <UART_SetConfig+0x2e6>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a5e      	ldr	r2, [pc, #376]	; (8003618 <UART_SetConfig+0x2d4>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d125      	bne.n	80034ee <UART_SetConfig+0x1aa>
 80034a2:	4b5b      	ldr	r3, [pc, #364]	; (8003610 <UART_SetConfig+0x2cc>)
 80034a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80034ac:	2b30      	cmp	r3, #48	; 0x30
 80034ae:	d016      	beq.n	80034de <UART_SetConfig+0x19a>
 80034b0:	2b30      	cmp	r3, #48	; 0x30
 80034b2:	d818      	bhi.n	80034e6 <UART_SetConfig+0x1a2>
 80034b4:	2b20      	cmp	r3, #32
 80034b6:	d00a      	beq.n	80034ce <UART_SetConfig+0x18a>
 80034b8:	2b20      	cmp	r3, #32
 80034ba:	d814      	bhi.n	80034e6 <UART_SetConfig+0x1a2>
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d002      	beq.n	80034c6 <UART_SetConfig+0x182>
 80034c0:	2b10      	cmp	r3, #16
 80034c2:	d008      	beq.n	80034d6 <UART_SetConfig+0x192>
 80034c4:	e00f      	b.n	80034e6 <UART_SetConfig+0x1a2>
 80034c6:	2300      	movs	r3, #0
 80034c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034cc:	e0ad      	b.n	800362a <UART_SetConfig+0x2e6>
 80034ce:	2302      	movs	r3, #2
 80034d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034d4:	e0a9      	b.n	800362a <UART_SetConfig+0x2e6>
 80034d6:	2304      	movs	r3, #4
 80034d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034dc:	e0a5      	b.n	800362a <UART_SetConfig+0x2e6>
 80034de:	2308      	movs	r3, #8
 80034e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034e4:	e0a1      	b.n	800362a <UART_SetConfig+0x2e6>
 80034e6:	2310      	movs	r3, #16
 80034e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ec:	e09d      	b.n	800362a <UART_SetConfig+0x2e6>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a4a      	ldr	r2, [pc, #296]	; (800361c <UART_SetConfig+0x2d8>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d125      	bne.n	8003544 <UART_SetConfig+0x200>
 80034f8:	4b45      	ldr	r3, [pc, #276]	; (8003610 <UART_SetConfig+0x2cc>)
 80034fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003502:	2bc0      	cmp	r3, #192	; 0xc0
 8003504:	d016      	beq.n	8003534 <UART_SetConfig+0x1f0>
 8003506:	2bc0      	cmp	r3, #192	; 0xc0
 8003508:	d818      	bhi.n	800353c <UART_SetConfig+0x1f8>
 800350a:	2b80      	cmp	r3, #128	; 0x80
 800350c:	d00a      	beq.n	8003524 <UART_SetConfig+0x1e0>
 800350e:	2b80      	cmp	r3, #128	; 0x80
 8003510:	d814      	bhi.n	800353c <UART_SetConfig+0x1f8>
 8003512:	2b00      	cmp	r3, #0
 8003514:	d002      	beq.n	800351c <UART_SetConfig+0x1d8>
 8003516:	2b40      	cmp	r3, #64	; 0x40
 8003518:	d008      	beq.n	800352c <UART_SetConfig+0x1e8>
 800351a:	e00f      	b.n	800353c <UART_SetConfig+0x1f8>
 800351c:	2300      	movs	r3, #0
 800351e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003522:	e082      	b.n	800362a <UART_SetConfig+0x2e6>
 8003524:	2302      	movs	r3, #2
 8003526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800352a:	e07e      	b.n	800362a <UART_SetConfig+0x2e6>
 800352c:	2304      	movs	r3, #4
 800352e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003532:	e07a      	b.n	800362a <UART_SetConfig+0x2e6>
 8003534:	2308      	movs	r3, #8
 8003536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800353a:	e076      	b.n	800362a <UART_SetConfig+0x2e6>
 800353c:	2310      	movs	r3, #16
 800353e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003542:	e072      	b.n	800362a <UART_SetConfig+0x2e6>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a35      	ldr	r2, [pc, #212]	; (8003620 <UART_SetConfig+0x2dc>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d12a      	bne.n	80035a4 <UART_SetConfig+0x260>
 800354e:	4b30      	ldr	r3, [pc, #192]	; (8003610 <UART_SetConfig+0x2cc>)
 8003550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003554:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003558:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800355c:	d01a      	beq.n	8003594 <UART_SetConfig+0x250>
 800355e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003562:	d81b      	bhi.n	800359c <UART_SetConfig+0x258>
 8003564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003568:	d00c      	beq.n	8003584 <UART_SetConfig+0x240>
 800356a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800356e:	d815      	bhi.n	800359c <UART_SetConfig+0x258>
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <UART_SetConfig+0x238>
 8003574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003578:	d008      	beq.n	800358c <UART_SetConfig+0x248>
 800357a:	e00f      	b.n	800359c <UART_SetConfig+0x258>
 800357c:	2300      	movs	r3, #0
 800357e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003582:	e052      	b.n	800362a <UART_SetConfig+0x2e6>
 8003584:	2302      	movs	r3, #2
 8003586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800358a:	e04e      	b.n	800362a <UART_SetConfig+0x2e6>
 800358c:	2304      	movs	r3, #4
 800358e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003592:	e04a      	b.n	800362a <UART_SetConfig+0x2e6>
 8003594:	2308      	movs	r3, #8
 8003596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800359a:	e046      	b.n	800362a <UART_SetConfig+0x2e6>
 800359c:	2310      	movs	r3, #16
 800359e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035a2:	e042      	b.n	800362a <UART_SetConfig+0x2e6>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a17      	ldr	r2, [pc, #92]	; (8003608 <UART_SetConfig+0x2c4>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d13a      	bne.n	8003624 <UART_SetConfig+0x2e0>
 80035ae:	4b18      	ldr	r3, [pc, #96]	; (8003610 <UART_SetConfig+0x2cc>)
 80035b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035bc:	d01a      	beq.n	80035f4 <UART_SetConfig+0x2b0>
 80035be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035c2:	d81b      	bhi.n	80035fc <UART_SetConfig+0x2b8>
 80035c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035c8:	d00c      	beq.n	80035e4 <UART_SetConfig+0x2a0>
 80035ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035ce:	d815      	bhi.n	80035fc <UART_SetConfig+0x2b8>
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <UART_SetConfig+0x298>
 80035d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035d8:	d008      	beq.n	80035ec <UART_SetConfig+0x2a8>
 80035da:	e00f      	b.n	80035fc <UART_SetConfig+0x2b8>
 80035dc:	2300      	movs	r3, #0
 80035de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035e2:	e022      	b.n	800362a <UART_SetConfig+0x2e6>
 80035e4:	2302      	movs	r3, #2
 80035e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ea:	e01e      	b.n	800362a <UART_SetConfig+0x2e6>
 80035ec:	2304      	movs	r3, #4
 80035ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035f2:	e01a      	b.n	800362a <UART_SetConfig+0x2e6>
 80035f4:	2308      	movs	r3, #8
 80035f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035fa:	e016      	b.n	800362a <UART_SetConfig+0x2e6>
 80035fc:	2310      	movs	r3, #16
 80035fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003602:	e012      	b.n	800362a <UART_SetConfig+0x2e6>
 8003604:	efff69f3 	.word	0xefff69f3
 8003608:	40008000 	.word	0x40008000
 800360c:	40013800 	.word	0x40013800
 8003610:	40021000 	.word	0x40021000
 8003614:	40004400 	.word	0x40004400
 8003618:	40004800 	.word	0x40004800
 800361c:	40004c00 	.word	0x40004c00
 8003620:	40005000 	.word	0x40005000
 8003624:	2310      	movs	r3, #16
 8003626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a9f      	ldr	r2, [pc, #636]	; (80038ac <UART_SetConfig+0x568>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d17a      	bne.n	800372a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003634:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003638:	2b08      	cmp	r3, #8
 800363a:	d824      	bhi.n	8003686 <UART_SetConfig+0x342>
 800363c:	a201      	add	r2, pc, #4	; (adr r2, 8003644 <UART_SetConfig+0x300>)
 800363e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003642:	bf00      	nop
 8003644:	08003669 	.word	0x08003669
 8003648:	08003687 	.word	0x08003687
 800364c:	08003671 	.word	0x08003671
 8003650:	08003687 	.word	0x08003687
 8003654:	08003677 	.word	0x08003677
 8003658:	08003687 	.word	0x08003687
 800365c:	08003687 	.word	0x08003687
 8003660:	08003687 	.word	0x08003687
 8003664:	0800367f 	.word	0x0800367f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003668:	f7fe fdb0 	bl	80021cc <HAL_RCC_GetPCLK1Freq>
 800366c:	61f8      	str	r0, [r7, #28]
        break;
 800366e:	e010      	b.n	8003692 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003670:	4b8f      	ldr	r3, [pc, #572]	; (80038b0 <UART_SetConfig+0x56c>)
 8003672:	61fb      	str	r3, [r7, #28]
        break;
 8003674:	e00d      	b.n	8003692 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003676:	f7fe fd11 	bl	800209c <HAL_RCC_GetSysClockFreq>
 800367a:	61f8      	str	r0, [r7, #28]
        break;
 800367c:	e009      	b.n	8003692 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800367e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003682:	61fb      	str	r3, [r7, #28]
        break;
 8003684:	e005      	b.n	8003692 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003686:	2300      	movs	r3, #0
 8003688:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003690:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 80fb 	beq.w	8003890 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	4613      	mov	r3, r2
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	4413      	add	r3, r2
 80036a4:	69fa      	ldr	r2, [r7, #28]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d305      	bcc.n	80036b6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036b0:	69fa      	ldr	r2, [r7, #28]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d903      	bls.n	80036be <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80036bc:	e0e8      	b.n	8003890 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	2200      	movs	r2, #0
 80036c2:	461c      	mov	r4, r3
 80036c4:	4615      	mov	r5, r2
 80036c6:	f04f 0200 	mov.w	r2, #0
 80036ca:	f04f 0300 	mov.w	r3, #0
 80036ce:	022b      	lsls	r3, r5, #8
 80036d0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80036d4:	0222      	lsls	r2, r4, #8
 80036d6:	68f9      	ldr	r1, [r7, #12]
 80036d8:	6849      	ldr	r1, [r1, #4]
 80036da:	0849      	lsrs	r1, r1, #1
 80036dc:	2000      	movs	r0, #0
 80036de:	4688      	mov	r8, r1
 80036e0:	4681      	mov	r9, r0
 80036e2:	eb12 0a08 	adds.w	sl, r2, r8
 80036e6:	eb43 0b09 	adc.w	fp, r3, r9
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	603b      	str	r3, [r7, #0]
 80036f2:	607a      	str	r2, [r7, #4]
 80036f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036f8:	4650      	mov	r0, sl
 80036fa:	4659      	mov	r1, fp
 80036fc:	f7fc fdb8 	bl	8000270 <__aeabi_uldivmod>
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	4613      	mov	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800370e:	d308      	bcc.n	8003722 <UART_SetConfig+0x3de>
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003716:	d204      	bcs.n	8003722 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	60da      	str	r2, [r3, #12]
 8003720:	e0b6      	b.n	8003890 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003728:	e0b2      	b.n	8003890 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003732:	d15e      	bne.n	80037f2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003734:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003738:	2b08      	cmp	r3, #8
 800373a:	d828      	bhi.n	800378e <UART_SetConfig+0x44a>
 800373c:	a201      	add	r2, pc, #4	; (adr r2, 8003744 <UART_SetConfig+0x400>)
 800373e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003742:	bf00      	nop
 8003744:	08003769 	.word	0x08003769
 8003748:	08003771 	.word	0x08003771
 800374c:	08003779 	.word	0x08003779
 8003750:	0800378f 	.word	0x0800378f
 8003754:	0800377f 	.word	0x0800377f
 8003758:	0800378f 	.word	0x0800378f
 800375c:	0800378f 	.word	0x0800378f
 8003760:	0800378f 	.word	0x0800378f
 8003764:	08003787 	.word	0x08003787
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003768:	f7fe fd30 	bl	80021cc <HAL_RCC_GetPCLK1Freq>
 800376c:	61f8      	str	r0, [r7, #28]
        break;
 800376e:	e014      	b.n	800379a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003770:	f7fe fd42 	bl	80021f8 <HAL_RCC_GetPCLK2Freq>
 8003774:	61f8      	str	r0, [r7, #28]
        break;
 8003776:	e010      	b.n	800379a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003778:	4b4d      	ldr	r3, [pc, #308]	; (80038b0 <UART_SetConfig+0x56c>)
 800377a:	61fb      	str	r3, [r7, #28]
        break;
 800377c:	e00d      	b.n	800379a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800377e:	f7fe fc8d 	bl	800209c <HAL_RCC_GetSysClockFreq>
 8003782:	61f8      	str	r0, [r7, #28]
        break;
 8003784:	e009      	b.n	800379a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800378a:	61fb      	str	r3, [r7, #28]
        break;
 800378c:	e005      	b.n	800379a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800378e:	2300      	movs	r3, #0
 8003790:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003798:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d077      	beq.n	8003890 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	005a      	lsls	r2, r3, #1
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	085b      	lsrs	r3, r3, #1
 80037aa:	441a      	add	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	2b0f      	cmp	r3, #15
 80037ba:	d916      	bls.n	80037ea <UART_SetConfig+0x4a6>
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c2:	d212      	bcs.n	80037ea <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	f023 030f 	bic.w	r3, r3, #15
 80037cc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	085b      	lsrs	r3, r3, #1
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	b29a      	uxth	r2, r3
 80037da:	8afb      	ldrh	r3, [r7, #22]
 80037dc:	4313      	orrs	r3, r2
 80037de:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	8afa      	ldrh	r2, [r7, #22]
 80037e6:	60da      	str	r2, [r3, #12]
 80037e8:	e052      	b.n	8003890 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80037f0:	e04e      	b.n	8003890 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037f6:	2b08      	cmp	r3, #8
 80037f8:	d827      	bhi.n	800384a <UART_SetConfig+0x506>
 80037fa:	a201      	add	r2, pc, #4	; (adr r2, 8003800 <UART_SetConfig+0x4bc>)
 80037fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003800:	08003825 	.word	0x08003825
 8003804:	0800382d 	.word	0x0800382d
 8003808:	08003835 	.word	0x08003835
 800380c:	0800384b 	.word	0x0800384b
 8003810:	0800383b 	.word	0x0800383b
 8003814:	0800384b 	.word	0x0800384b
 8003818:	0800384b 	.word	0x0800384b
 800381c:	0800384b 	.word	0x0800384b
 8003820:	08003843 	.word	0x08003843
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003824:	f7fe fcd2 	bl	80021cc <HAL_RCC_GetPCLK1Freq>
 8003828:	61f8      	str	r0, [r7, #28]
        break;
 800382a:	e014      	b.n	8003856 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800382c:	f7fe fce4 	bl	80021f8 <HAL_RCC_GetPCLK2Freq>
 8003830:	61f8      	str	r0, [r7, #28]
        break;
 8003832:	e010      	b.n	8003856 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003834:	4b1e      	ldr	r3, [pc, #120]	; (80038b0 <UART_SetConfig+0x56c>)
 8003836:	61fb      	str	r3, [r7, #28]
        break;
 8003838:	e00d      	b.n	8003856 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800383a:	f7fe fc2f 	bl	800209c <HAL_RCC_GetSysClockFreq>
 800383e:	61f8      	str	r0, [r7, #28]
        break;
 8003840:	e009      	b.n	8003856 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003846:	61fb      	str	r3, [r7, #28]
        break;
 8003848:	e005      	b.n	8003856 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800384a:	2300      	movs	r3, #0
 800384c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003854:	bf00      	nop
    }

    if (pclk != 0U)
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d019      	beq.n	8003890 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	085a      	lsrs	r2, r3, #1
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	441a      	add	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	fbb2 f3f3 	udiv	r3, r2, r3
 800386e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	2b0f      	cmp	r3, #15
 8003874:	d909      	bls.n	800388a <UART_SetConfig+0x546>
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800387c:	d205      	bcs.n	800388a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	b29a      	uxth	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	60da      	str	r2, [r3, #12]
 8003888:	e002      	b.n	8003890 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800389c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3728      	adds	r7, #40	; 0x28
 80038a4:	46bd      	mov	sp, r7
 80038a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038aa:	bf00      	nop
 80038ac:	40008000 	.word	0x40008000
 80038b0:	00f42400 	.word	0x00f42400

080038b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	f003 0308 	and.w	r3, r3, #8
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00a      	beq.n	80038de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	430a      	orrs	r2, r1
 80038dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00a      	beq.n	8003900 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00a      	beq.n	8003922 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	430a      	orrs	r2, r1
 8003920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	f003 0304 	and.w	r3, r3, #4
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00a      	beq.n	8003944 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	430a      	orrs	r2, r1
 8003942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	f003 0310 	and.w	r3, r3, #16
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00a      	beq.n	8003966 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396a:	f003 0320 	and.w	r3, r3, #32
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003990:	2b00      	cmp	r3, #0
 8003992:	d01a      	beq.n	80039ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039b2:	d10a      	bne.n	80039ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00a      	beq.n	80039ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	605a      	str	r2, [r3, #4]
  }
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b098      	sub	sp, #96	; 0x60
 80039fc:	af02      	add	r7, sp, #8
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a08:	f7fd fb30 	bl	800106c <HAL_GetTick>
 8003a0c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0308 	and.w	r3, r3, #8
 8003a18:	2b08      	cmp	r3, #8
 8003a1a:	d12e      	bne.n	8003a7a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a24:	2200      	movs	r2, #0
 8003a26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f88c 	bl	8003b48 <UART_WaitOnFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d021      	beq.n	8003a7a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a3e:	e853 3f00 	ldrex	r3, [r3]
 8003a42:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a4a:	653b      	str	r3, [r7, #80]	; 0x50
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	461a      	mov	r2, r3
 8003a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a54:	647b      	str	r3, [r7, #68]	; 0x44
 8003a56:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a5c:	e841 2300 	strex	r3, r2, [r1]
 8003a60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1e6      	bne.n	8003a36 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e062      	b.n	8003b40 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b04      	cmp	r3, #4
 8003a86:	d149      	bne.n	8003b1c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a90:	2200      	movs	r2, #0
 8003a92:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f856 	bl	8003b48 <UART_WaitOnFlagUntilTimeout>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d03c      	beq.n	8003b1c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aaa:	e853 3f00 	ldrex	r3, [r3]
 8003aae:	623b      	str	r3, [r7, #32]
   return(result);
 8003ab0:	6a3b      	ldr	r3, [r7, #32]
 8003ab2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	461a      	mov	r2, r3
 8003abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ac0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ac2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ac6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ac8:	e841 2300 	strex	r3, r2, [r1]
 8003acc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1e6      	bne.n	8003aa2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3308      	adds	r3, #8
 8003ada:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	e853 3f00 	ldrex	r3, [r3]
 8003ae2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f023 0301 	bic.w	r3, r3, #1
 8003aea:	64bb      	str	r3, [r7, #72]	; 0x48
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	3308      	adds	r3, #8
 8003af2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003af4:	61fa      	str	r2, [r7, #28]
 8003af6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af8:	69b9      	ldr	r1, [r7, #24]
 8003afa:	69fa      	ldr	r2, [r7, #28]
 8003afc:	e841 2300 	strex	r3, r2, [r1]
 8003b00:	617b      	str	r3, [r7, #20]
   return(result);
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1e5      	bne.n	8003ad4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e011      	b.n	8003b40 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2220      	movs	r2, #32
 8003b26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3758      	adds	r7, #88	; 0x58
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	603b      	str	r3, [r7, #0]
 8003b54:	4613      	mov	r3, r2
 8003b56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b58:	e049      	b.n	8003bee <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b60:	d045      	beq.n	8003bee <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b62:	f7fd fa83 	bl	800106c <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d302      	bcc.n	8003b78 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e048      	b.n	8003c0e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d031      	beq.n	8003bee <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	f003 0308 	and.w	r3, r3, #8
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	d110      	bne.n	8003bba <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2208      	movs	r2, #8
 8003b9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 f838 	bl	8003c16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2208      	movs	r2, #8
 8003baa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e029      	b.n	8003c0e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bc8:	d111      	bne.n	8003bee <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 f81e 	bl	8003c16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e00f      	b.n	8003c0e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	69da      	ldr	r2, [r3, #28]
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	bf0c      	ite	eq
 8003bfe:	2301      	moveq	r3, #1
 8003c00:	2300      	movne	r3, #0
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	461a      	mov	r2, r3
 8003c06:	79fb      	ldrb	r3, [r7, #7]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d0a6      	beq.n	8003b5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b095      	sub	sp, #84	; 0x54
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c26:	e853 3f00 	ldrex	r3, [r3]
 8003c2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c3c:	643b      	str	r3, [r7, #64]	; 0x40
 8003c3e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c44:	e841 2300 	strex	r3, r2, [r1]
 8003c48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1e6      	bne.n	8003c1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	3308      	adds	r3, #8
 8003c56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c58:	6a3b      	ldr	r3, [r7, #32]
 8003c5a:	e853 3f00 	ldrex	r3, [r3]
 8003c5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f023 0301 	bic.w	r3, r3, #1
 8003c66:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	3308      	adds	r3, #8
 8003c6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c78:	e841 2300 	strex	r3, r2, [r1]
 8003c7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1e5      	bne.n	8003c50 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d118      	bne.n	8003cbe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	e853 3f00 	ldrex	r3, [r3]
 8003c98:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	f023 0310 	bic.w	r3, r3, #16
 8003ca0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003caa:	61bb      	str	r3, [r7, #24]
 8003cac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cae:	6979      	ldr	r1, [r7, #20]
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	e841 2300 	strex	r3, r2, [r1]
 8003cb6:	613b      	str	r3, [r7, #16]
   return(result);
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1e6      	bne.n	8003c8c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003cd2:	bf00      	nop
 8003cd4:	3754      	adds	r7, #84	; 0x54
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
	...

08003ce0 <siprintf>:
 8003ce0:	b40e      	push	{r1, r2, r3}
 8003ce2:	b500      	push	{lr}
 8003ce4:	b09c      	sub	sp, #112	; 0x70
 8003ce6:	ab1d      	add	r3, sp, #116	; 0x74
 8003ce8:	9002      	str	r0, [sp, #8]
 8003cea:	9006      	str	r0, [sp, #24]
 8003cec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003cf0:	4809      	ldr	r0, [pc, #36]	; (8003d18 <siprintf+0x38>)
 8003cf2:	9107      	str	r1, [sp, #28]
 8003cf4:	9104      	str	r1, [sp, #16]
 8003cf6:	4909      	ldr	r1, [pc, #36]	; (8003d1c <siprintf+0x3c>)
 8003cf8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cfc:	9105      	str	r1, [sp, #20]
 8003cfe:	6800      	ldr	r0, [r0, #0]
 8003d00:	9301      	str	r3, [sp, #4]
 8003d02:	a902      	add	r1, sp, #8
 8003d04:	f000 f992 	bl	800402c <_svfiprintf_r>
 8003d08:	9b02      	ldr	r3, [sp, #8]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	701a      	strb	r2, [r3, #0]
 8003d0e:	b01c      	add	sp, #112	; 0x70
 8003d10:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d14:	b003      	add	sp, #12
 8003d16:	4770      	bx	lr
 8003d18:	20000058 	.word	0x20000058
 8003d1c:	ffff0208 	.word	0xffff0208

08003d20 <memset>:
 8003d20:	4402      	add	r2, r0
 8003d22:	4603      	mov	r3, r0
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d100      	bne.n	8003d2a <memset+0xa>
 8003d28:	4770      	bx	lr
 8003d2a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d2e:	e7f9      	b.n	8003d24 <memset+0x4>

08003d30 <__errno>:
 8003d30:	4b01      	ldr	r3, [pc, #4]	; (8003d38 <__errno+0x8>)
 8003d32:	6818      	ldr	r0, [r3, #0]
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	20000058 	.word	0x20000058

08003d3c <__libc_init_array>:
 8003d3c:	b570      	push	{r4, r5, r6, lr}
 8003d3e:	4d0d      	ldr	r5, [pc, #52]	; (8003d74 <__libc_init_array+0x38>)
 8003d40:	4c0d      	ldr	r4, [pc, #52]	; (8003d78 <__libc_init_array+0x3c>)
 8003d42:	1b64      	subs	r4, r4, r5
 8003d44:	10a4      	asrs	r4, r4, #2
 8003d46:	2600      	movs	r6, #0
 8003d48:	42a6      	cmp	r6, r4
 8003d4a:	d109      	bne.n	8003d60 <__libc_init_array+0x24>
 8003d4c:	4d0b      	ldr	r5, [pc, #44]	; (8003d7c <__libc_init_array+0x40>)
 8003d4e:	4c0c      	ldr	r4, [pc, #48]	; (8003d80 <__libc_init_array+0x44>)
 8003d50:	f000 fc6a 	bl	8004628 <_init>
 8003d54:	1b64      	subs	r4, r4, r5
 8003d56:	10a4      	asrs	r4, r4, #2
 8003d58:	2600      	movs	r6, #0
 8003d5a:	42a6      	cmp	r6, r4
 8003d5c:	d105      	bne.n	8003d6a <__libc_init_array+0x2e>
 8003d5e:	bd70      	pop	{r4, r5, r6, pc}
 8003d60:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d64:	4798      	blx	r3
 8003d66:	3601      	adds	r6, #1
 8003d68:	e7ee      	b.n	8003d48 <__libc_init_array+0xc>
 8003d6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d6e:	4798      	blx	r3
 8003d70:	3601      	adds	r6, #1
 8003d72:	e7f2      	b.n	8003d5a <__libc_init_array+0x1e>
 8003d74:	080046e0 	.word	0x080046e0
 8003d78:	080046e0 	.word	0x080046e0
 8003d7c:	080046e0 	.word	0x080046e0
 8003d80:	080046e4 	.word	0x080046e4

08003d84 <__retarget_lock_acquire_recursive>:
 8003d84:	4770      	bx	lr

08003d86 <__retarget_lock_release_recursive>:
 8003d86:	4770      	bx	lr

08003d88 <_free_r>:
 8003d88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d8a:	2900      	cmp	r1, #0
 8003d8c:	d044      	beq.n	8003e18 <_free_r+0x90>
 8003d8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d92:	9001      	str	r0, [sp, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f1a1 0404 	sub.w	r4, r1, #4
 8003d9a:	bfb8      	it	lt
 8003d9c:	18e4      	addlt	r4, r4, r3
 8003d9e:	f000 f8df 	bl	8003f60 <__malloc_lock>
 8003da2:	4a1e      	ldr	r2, [pc, #120]	; (8003e1c <_free_r+0x94>)
 8003da4:	9801      	ldr	r0, [sp, #4]
 8003da6:	6813      	ldr	r3, [r2, #0]
 8003da8:	b933      	cbnz	r3, 8003db8 <_free_r+0x30>
 8003daa:	6063      	str	r3, [r4, #4]
 8003dac:	6014      	str	r4, [r2, #0]
 8003dae:	b003      	add	sp, #12
 8003db0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003db4:	f000 b8da 	b.w	8003f6c <__malloc_unlock>
 8003db8:	42a3      	cmp	r3, r4
 8003dba:	d908      	bls.n	8003dce <_free_r+0x46>
 8003dbc:	6825      	ldr	r5, [r4, #0]
 8003dbe:	1961      	adds	r1, r4, r5
 8003dc0:	428b      	cmp	r3, r1
 8003dc2:	bf01      	itttt	eq
 8003dc4:	6819      	ldreq	r1, [r3, #0]
 8003dc6:	685b      	ldreq	r3, [r3, #4]
 8003dc8:	1949      	addeq	r1, r1, r5
 8003dca:	6021      	streq	r1, [r4, #0]
 8003dcc:	e7ed      	b.n	8003daa <_free_r+0x22>
 8003dce:	461a      	mov	r2, r3
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	b10b      	cbz	r3, 8003dd8 <_free_r+0x50>
 8003dd4:	42a3      	cmp	r3, r4
 8003dd6:	d9fa      	bls.n	8003dce <_free_r+0x46>
 8003dd8:	6811      	ldr	r1, [r2, #0]
 8003dda:	1855      	adds	r5, r2, r1
 8003ddc:	42a5      	cmp	r5, r4
 8003dde:	d10b      	bne.n	8003df8 <_free_r+0x70>
 8003de0:	6824      	ldr	r4, [r4, #0]
 8003de2:	4421      	add	r1, r4
 8003de4:	1854      	adds	r4, r2, r1
 8003de6:	42a3      	cmp	r3, r4
 8003de8:	6011      	str	r1, [r2, #0]
 8003dea:	d1e0      	bne.n	8003dae <_free_r+0x26>
 8003dec:	681c      	ldr	r4, [r3, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	6053      	str	r3, [r2, #4]
 8003df2:	440c      	add	r4, r1
 8003df4:	6014      	str	r4, [r2, #0]
 8003df6:	e7da      	b.n	8003dae <_free_r+0x26>
 8003df8:	d902      	bls.n	8003e00 <_free_r+0x78>
 8003dfa:	230c      	movs	r3, #12
 8003dfc:	6003      	str	r3, [r0, #0]
 8003dfe:	e7d6      	b.n	8003dae <_free_r+0x26>
 8003e00:	6825      	ldr	r5, [r4, #0]
 8003e02:	1961      	adds	r1, r4, r5
 8003e04:	428b      	cmp	r3, r1
 8003e06:	bf04      	itt	eq
 8003e08:	6819      	ldreq	r1, [r3, #0]
 8003e0a:	685b      	ldreq	r3, [r3, #4]
 8003e0c:	6063      	str	r3, [r4, #4]
 8003e0e:	bf04      	itt	eq
 8003e10:	1949      	addeq	r1, r1, r5
 8003e12:	6021      	streq	r1, [r4, #0]
 8003e14:	6054      	str	r4, [r2, #4]
 8003e16:	e7ca      	b.n	8003dae <_free_r+0x26>
 8003e18:	b003      	add	sp, #12
 8003e1a:	bd30      	pop	{r4, r5, pc}
 8003e1c:	2000026c 	.word	0x2000026c

08003e20 <sbrk_aligned>:
 8003e20:	b570      	push	{r4, r5, r6, lr}
 8003e22:	4e0e      	ldr	r6, [pc, #56]	; (8003e5c <sbrk_aligned+0x3c>)
 8003e24:	460c      	mov	r4, r1
 8003e26:	6831      	ldr	r1, [r6, #0]
 8003e28:	4605      	mov	r5, r0
 8003e2a:	b911      	cbnz	r1, 8003e32 <sbrk_aligned+0x12>
 8003e2c:	f000 fba6 	bl	800457c <_sbrk_r>
 8003e30:	6030      	str	r0, [r6, #0]
 8003e32:	4621      	mov	r1, r4
 8003e34:	4628      	mov	r0, r5
 8003e36:	f000 fba1 	bl	800457c <_sbrk_r>
 8003e3a:	1c43      	adds	r3, r0, #1
 8003e3c:	d00a      	beq.n	8003e54 <sbrk_aligned+0x34>
 8003e3e:	1cc4      	adds	r4, r0, #3
 8003e40:	f024 0403 	bic.w	r4, r4, #3
 8003e44:	42a0      	cmp	r0, r4
 8003e46:	d007      	beq.n	8003e58 <sbrk_aligned+0x38>
 8003e48:	1a21      	subs	r1, r4, r0
 8003e4a:	4628      	mov	r0, r5
 8003e4c:	f000 fb96 	bl	800457c <_sbrk_r>
 8003e50:	3001      	adds	r0, #1
 8003e52:	d101      	bne.n	8003e58 <sbrk_aligned+0x38>
 8003e54:	f04f 34ff 	mov.w	r4, #4294967295
 8003e58:	4620      	mov	r0, r4
 8003e5a:	bd70      	pop	{r4, r5, r6, pc}
 8003e5c:	20000270 	.word	0x20000270

08003e60 <_malloc_r>:
 8003e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e64:	1ccd      	adds	r5, r1, #3
 8003e66:	f025 0503 	bic.w	r5, r5, #3
 8003e6a:	3508      	adds	r5, #8
 8003e6c:	2d0c      	cmp	r5, #12
 8003e6e:	bf38      	it	cc
 8003e70:	250c      	movcc	r5, #12
 8003e72:	2d00      	cmp	r5, #0
 8003e74:	4607      	mov	r7, r0
 8003e76:	db01      	blt.n	8003e7c <_malloc_r+0x1c>
 8003e78:	42a9      	cmp	r1, r5
 8003e7a:	d905      	bls.n	8003e88 <_malloc_r+0x28>
 8003e7c:	230c      	movs	r3, #12
 8003e7e:	603b      	str	r3, [r7, #0]
 8003e80:	2600      	movs	r6, #0
 8003e82:	4630      	mov	r0, r6
 8003e84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e88:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003f5c <_malloc_r+0xfc>
 8003e8c:	f000 f868 	bl	8003f60 <__malloc_lock>
 8003e90:	f8d8 3000 	ldr.w	r3, [r8]
 8003e94:	461c      	mov	r4, r3
 8003e96:	bb5c      	cbnz	r4, 8003ef0 <_malloc_r+0x90>
 8003e98:	4629      	mov	r1, r5
 8003e9a:	4638      	mov	r0, r7
 8003e9c:	f7ff ffc0 	bl	8003e20 <sbrk_aligned>
 8003ea0:	1c43      	adds	r3, r0, #1
 8003ea2:	4604      	mov	r4, r0
 8003ea4:	d155      	bne.n	8003f52 <_malloc_r+0xf2>
 8003ea6:	f8d8 4000 	ldr.w	r4, [r8]
 8003eaa:	4626      	mov	r6, r4
 8003eac:	2e00      	cmp	r6, #0
 8003eae:	d145      	bne.n	8003f3c <_malloc_r+0xdc>
 8003eb0:	2c00      	cmp	r4, #0
 8003eb2:	d048      	beq.n	8003f46 <_malloc_r+0xe6>
 8003eb4:	6823      	ldr	r3, [r4, #0]
 8003eb6:	4631      	mov	r1, r6
 8003eb8:	4638      	mov	r0, r7
 8003eba:	eb04 0903 	add.w	r9, r4, r3
 8003ebe:	f000 fb5d 	bl	800457c <_sbrk_r>
 8003ec2:	4581      	cmp	r9, r0
 8003ec4:	d13f      	bne.n	8003f46 <_malloc_r+0xe6>
 8003ec6:	6821      	ldr	r1, [r4, #0]
 8003ec8:	1a6d      	subs	r5, r5, r1
 8003eca:	4629      	mov	r1, r5
 8003ecc:	4638      	mov	r0, r7
 8003ece:	f7ff ffa7 	bl	8003e20 <sbrk_aligned>
 8003ed2:	3001      	adds	r0, #1
 8003ed4:	d037      	beq.n	8003f46 <_malloc_r+0xe6>
 8003ed6:	6823      	ldr	r3, [r4, #0]
 8003ed8:	442b      	add	r3, r5
 8003eda:	6023      	str	r3, [r4, #0]
 8003edc:	f8d8 3000 	ldr.w	r3, [r8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d038      	beq.n	8003f56 <_malloc_r+0xf6>
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	42a2      	cmp	r2, r4
 8003ee8:	d12b      	bne.n	8003f42 <_malloc_r+0xe2>
 8003eea:	2200      	movs	r2, #0
 8003eec:	605a      	str	r2, [r3, #4]
 8003eee:	e00f      	b.n	8003f10 <_malloc_r+0xb0>
 8003ef0:	6822      	ldr	r2, [r4, #0]
 8003ef2:	1b52      	subs	r2, r2, r5
 8003ef4:	d41f      	bmi.n	8003f36 <_malloc_r+0xd6>
 8003ef6:	2a0b      	cmp	r2, #11
 8003ef8:	d917      	bls.n	8003f2a <_malloc_r+0xca>
 8003efa:	1961      	adds	r1, r4, r5
 8003efc:	42a3      	cmp	r3, r4
 8003efe:	6025      	str	r5, [r4, #0]
 8003f00:	bf18      	it	ne
 8003f02:	6059      	strne	r1, [r3, #4]
 8003f04:	6863      	ldr	r3, [r4, #4]
 8003f06:	bf08      	it	eq
 8003f08:	f8c8 1000 	streq.w	r1, [r8]
 8003f0c:	5162      	str	r2, [r4, r5]
 8003f0e:	604b      	str	r3, [r1, #4]
 8003f10:	4638      	mov	r0, r7
 8003f12:	f104 060b 	add.w	r6, r4, #11
 8003f16:	f000 f829 	bl	8003f6c <__malloc_unlock>
 8003f1a:	f026 0607 	bic.w	r6, r6, #7
 8003f1e:	1d23      	adds	r3, r4, #4
 8003f20:	1af2      	subs	r2, r6, r3
 8003f22:	d0ae      	beq.n	8003e82 <_malloc_r+0x22>
 8003f24:	1b9b      	subs	r3, r3, r6
 8003f26:	50a3      	str	r3, [r4, r2]
 8003f28:	e7ab      	b.n	8003e82 <_malloc_r+0x22>
 8003f2a:	42a3      	cmp	r3, r4
 8003f2c:	6862      	ldr	r2, [r4, #4]
 8003f2e:	d1dd      	bne.n	8003eec <_malloc_r+0x8c>
 8003f30:	f8c8 2000 	str.w	r2, [r8]
 8003f34:	e7ec      	b.n	8003f10 <_malloc_r+0xb0>
 8003f36:	4623      	mov	r3, r4
 8003f38:	6864      	ldr	r4, [r4, #4]
 8003f3a:	e7ac      	b.n	8003e96 <_malloc_r+0x36>
 8003f3c:	4634      	mov	r4, r6
 8003f3e:	6876      	ldr	r6, [r6, #4]
 8003f40:	e7b4      	b.n	8003eac <_malloc_r+0x4c>
 8003f42:	4613      	mov	r3, r2
 8003f44:	e7cc      	b.n	8003ee0 <_malloc_r+0x80>
 8003f46:	230c      	movs	r3, #12
 8003f48:	603b      	str	r3, [r7, #0]
 8003f4a:	4638      	mov	r0, r7
 8003f4c:	f000 f80e 	bl	8003f6c <__malloc_unlock>
 8003f50:	e797      	b.n	8003e82 <_malloc_r+0x22>
 8003f52:	6025      	str	r5, [r4, #0]
 8003f54:	e7dc      	b.n	8003f10 <_malloc_r+0xb0>
 8003f56:	605b      	str	r3, [r3, #4]
 8003f58:	deff      	udf	#255	; 0xff
 8003f5a:	bf00      	nop
 8003f5c:	2000026c 	.word	0x2000026c

08003f60 <__malloc_lock>:
 8003f60:	4801      	ldr	r0, [pc, #4]	; (8003f68 <__malloc_lock+0x8>)
 8003f62:	f7ff bf0f 	b.w	8003d84 <__retarget_lock_acquire_recursive>
 8003f66:	bf00      	nop
 8003f68:	20000268 	.word	0x20000268

08003f6c <__malloc_unlock>:
 8003f6c:	4801      	ldr	r0, [pc, #4]	; (8003f74 <__malloc_unlock+0x8>)
 8003f6e:	f7ff bf0a 	b.w	8003d86 <__retarget_lock_release_recursive>
 8003f72:	bf00      	nop
 8003f74:	20000268 	.word	0x20000268

08003f78 <__ssputs_r>:
 8003f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f7c:	688e      	ldr	r6, [r1, #8]
 8003f7e:	461f      	mov	r7, r3
 8003f80:	42be      	cmp	r6, r7
 8003f82:	680b      	ldr	r3, [r1, #0]
 8003f84:	4682      	mov	sl, r0
 8003f86:	460c      	mov	r4, r1
 8003f88:	4690      	mov	r8, r2
 8003f8a:	d82c      	bhi.n	8003fe6 <__ssputs_r+0x6e>
 8003f8c:	898a      	ldrh	r2, [r1, #12]
 8003f8e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f92:	d026      	beq.n	8003fe2 <__ssputs_r+0x6a>
 8003f94:	6965      	ldr	r5, [r4, #20]
 8003f96:	6909      	ldr	r1, [r1, #16]
 8003f98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f9c:	eba3 0901 	sub.w	r9, r3, r1
 8003fa0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003fa4:	1c7b      	adds	r3, r7, #1
 8003fa6:	444b      	add	r3, r9
 8003fa8:	106d      	asrs	r5, r5, #1
 8003faa:	429d      	cmp	r5, r3
 8003fac:	bf38      	it	cc
 8003fae:	461d      	movcc	r5, r3
 8003fb0:	0553      	lsls	r3, r2, #21
 8003fb2:	d527      	bpl.n	8004004 <__ssputs_r+0x8c>
 8003fb4:	4629      	mov	r1, r5
 8003fb6:	f7ff ff53 	bl	8003e60 <_malloc_r>
 8003fba:	4606      	mov	r6, r0
 8003fbc:	b360      	cbz	r0, 8004018 <__ssputs_r+0xa0>
 8003fbe:	6921      	ldr	r1, [r4, #16]
 8003fc0:	464a      	mov	r2, r9
 8003fc2:	f000 faeb 	bl	800459c <memcpy>
 8003fc6:	89a3      	ldrh	r3, [r4, #12]
 8003fc8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fd0:	81a3      	strh	r3, [r4, #12]
 8003fd2:	6126      	str	r6, [r4, #16]
 8003fd4:	6165      	str	r5, [r4, #20]
 8003fd6:	444e      	add	r6, r9
 8003fd8:	eba5 0509 	sub.w	r5, r5, r9
 8003fdc:	6026      	str	r6, [r4, #0]
 8003fde:	60a5      	str	r5, [r4, #8]
 8003fe0:	463e      	mov	r6, r7
 8003fe2:	42be      	cmp	r6, r7
 8003fe4:	d900      	bls.n	8003fe8 <__ssputs_r+0x70>
 8003fe6:	463e      	mov	r6, r7
 8003fe8:	6820      	ldr	r0, [r4, #0]
 8003fea:	4632      	mov	r2, r6
 8003fec:	4641      	mov	r1, r8
 8003fee:	f000 faab 	bl	8004548 <memmove>
 8003ff2:	68a3      	ldr	r3, [r4, #8]
 8003ff4:	1b9b      	subs	r3, r3, r6
 8003ff6:	60a3      	str	r3, [r4, #8]
 8003ff8:	6823      	ldr	r3, [r4, #0]
 8003ffa:	4433      	add	r3, r6
 8003ffc:	6023      	str	r3, [r4, #0]
 8003ffe:	2000      	movs	r0, #0
 8004000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004004:	462a      	mov	r2, r5
 8004006:	f000 fad7 	bl	80045b8 <_realloc_r>
 800400a:	4606      	mov	r6, r0
 800400c:	2800      	cmp	r0, #0
 800400e:	d1e0      	bne.n	8003fd2 <__ssputs_r+0x5a>
 8004010:	6921      	ldr	r1, [r4, #16]
 8004012:	4650      	mov	r0, sl
 8004014:	f7ff feb8 	bl	8003d88 <_free_r>
 8004018:	230c      	movs	r3, #12
 800401a:	f8ca 3000 	str.w	r3, [sl]
 800401e:	89a3      	ldrh	r3, [r4, #12]
 8004020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004024:	81a3      	strh	r3, [r4, #12]
 8004026:	f04f 30ff 	mov.w	r0, #4294967295
 800402a:	e7e9      	b.n	8004000 <__ssputs_r+0x88>

0800402c <_svfiprintf_r>:
 800402c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004030:	4698      	mov	r8, r3
 8004032:	898b      	ldrh	r3, [r1, #12]
 8004034:	061b      	lsls	r3, r3, #24
 8004036:	b09d      	sub	sp, #116	; 0x74
 8004038:	4607      	mov	r7, r0
 800403a:	460d      	mov	r5, r1
 800403c:	4614      	mov	r4, r2
 800403e:	d50e      	bpl.n	800405e <_svfiprintf_r+0x32>
 8004040:	690b      	ldr	r3, [r1, #16]
 8004042:	b963      	cbnz	r3, 800405e <_svfiprintf_r+0x32>
 8004044:	2140      	movs	r1, #64	; 0x40
 8004046:	f7ff ff0b 	bl	8003e60 <_malloc_r>
 800404a:	6028      	str	r0, [r5, #0]
 800404c:	6128      	str	r0, [r5, #16]
 800404e:	b920      	cbnz	r0, 800405a <_svfiprintf_r+0x2e>
 8004050:	230c      	movs	r3, #12
 8004052:	603b      	str	r3, [r7, #0]
 8004054:	f04f 30ff 	mov.w	r0, #4294967295
 8004058:	e0d0      	b.n	80041fc <_svfiprintf_r+0x1d0>
 800405a:	2340      	movs	r3, #64	; 0x40
 800405c:	616b      	str	r3, [r5, #20]
 800405e:	2300      	movs	r3, #0
 8004060:	9309      	str	r3, [sp, #36]	; 0x24
 8004062:	2320      	movs	r3, #32
 8004064:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004068:	f8cd 800c 	str.w	r8, [sp, #12]
 800406c:	2330      	movs	r3, #48	; 0x30
 800406e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004214 <_svfiprintf_r+0x1e8>
 8004072:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004076:	f04f 0901 	mov.w	r9, #1
 800407a:	4623      	mov	r3, r4
 800407c:	469a      	mov	sl, r3
 800407e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004082:	b10a      	cbz	r2, 8004088 <_svfiprintf_r+0x5c>
 8004084:	2a25      	cmp	r2, #37	; 0x25
 8004086:	d1f9      	bne.n	800407c <_svfiprintf_r+0x50>
 8004088:	ebba 0b04 	subs.w	fp, sl, r4
 800408c:	d00b      	beq.n	80040a6 <_svfiprintf_r+0x7a>
 800408e:	465b      	mov	r3, fp
 8004090:	4622      	mov	r2, r4
 8004092:	4629      	mov	r1, r5
 8004094:	4638      	mov	r0, r7
 8004096:	f7ff ff6f 	bl	8003f78 <__ssputs_r>
 800409a:	3001      	adds	r0, #1
 800409c:	f000 80a9 	beq.w	80041f2 <_svfiprintf_r+0x1c6>
 80040a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040a2:	445a      	add	r2, fp
 80040a4:	9209      	str	r2, [sp, #36]	; 0x24
 80040a6:	f89a 3000 	ldrb.w	r3, [sl]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 80a1 	beq.w	80041f2 <_svfiprintf_r+0x1c6>
 80040b0:	2300      	movs	r3, #0
 80040b2:	f04f 32ff 	mov.w	r2, #4294967295
 80040b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040ba:	f10a 0a01 	add.w	sl, sl, #1
 80040be:	9304      	str	r3, [sp, #16]
 80040c0:	9307      	str	r3, [sp, #28]
 80040c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040c6:	931a      	str	r3, [sp, #104]	; 0x68
 80040c8:	4654      	mov	r4, sl
 80040ca:	2205      	movs	r2, #5
 80040cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040d0:	4850      	ldr	r0, [pc, #320]	; (8004214 <_svfiprintf_r+0x1e8>)
 80040d2:	f7fc f87d 	bl	80001d0 <memchr>
 80040d6:	9a04      	ldr	r2, [sp, #16]
 80040d8:	b9d8      	cbnz	r0, 8004112 <_svfiprintf_r+0xe6>
 80040da:	06d0      	lsls	r0, r2, #27
 80040dc:	bf44      	itt	mi
 80040de:	2320      	movmi	r3, #32
 80040e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040e4:	0711      	lsls	r1, r2, #28
 80040e6:	bf44      	itt	mi
 80040e8:	232b      	movmi	r3, #43	; 0x2b
 80040ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040ee:	f89a 3000 	ldrb.w	r3, [sl]
 80040f2:	2b2a      	cmp	r3, #42	; 0x2a
 80040f4:	d015      	beq.n	8004122 <_svfiprintf_r+0xf6>
 80040f6:	9a07      	ldr	r2, [sp, #28]
 80040f8:	4654      	mov	r4, sl
 80040fa:	2000      	movs	r0, #0
 80040fc:	f04f 0c0a 	mov.w	ip, #10
 8004100:	4621      	mov	r1, r4
 8004102:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004106:	3b30      	subs	r3, #48	; 0x30
 8004108:	2b09      	cmp	r3, #9
 800410a:	d94d      	bls.n	80041a8 <_svfiprintf_r+0x17c>
 800410c:	b1b0      	cbz	r0, 800413c <_svfiprintf_r+0x110>
 800410e:	9207      	str	r2, [sp, #28]
 8004110:	e014      	b.n	800413c <_svfiprintf_r+0x110>
 8004112:	eba0 0308 	sub.w	r3, r0, r8
 8004116:	fa09 f303 	lsl.w	r3, r9, r3
 800411a:	4313      	orrs	r3, r2
 800411c:	9304      	str	r3, [sp, #16]
 800411e:	46a2      	mov	sl, r4
 8004120:	e7d2      	b.n	80040c8 <_svfiprintf_r+0x9c>
 8004122:	9b03      	ldr	r3, [sp, #12]
 8004124:	1d19      	adds	r1, r3, #4
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	9103      	str	r1, [sp, #12]
 800412a:	2b00      	cmp	r3, #0
 800412c:	bfbb      	ittet	lt
 800412e:	425b      	neglt	r3, r3
 8004130:	f042 0202 	orrlt.w	r2, r2, #2
 8004134:	9307      	strge	r3, [sp, #28]
 8004136:	9307      	strlt	r3, [sp, #28]
 8004138:	bfb8      	it	lt
 800413a:	9204      	strlt	r2, [sp, #16]
 800413c:	7823      	ldrb	r3, [r4, #0]
 800413e:	2b2e      	cmp	r3, #46	; 0x2e
 8004140:	d10c      	bne.n	800415c <_svfiprintf_r+0x130>
 8004142:	7863      	ldrb	r3, [r4, #1]
 8004144:	2b2a      	cmp	r3, #42	; 0x2a
 8004146:	d134      	bne.n	80041b2 <_svfiprintf_r+0x186>
 8004148:	9b03      	ldr	r3, [sp, #12]
 800414a:	1d1a      	adds	r2, r3, #4
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	9203      	str	r2, [sp, #12]
 8004150:	2b00      	cmp	r3, #0
 8004152:	bfb8      	it	lt
 8004154:	f04f 33ff 	movlt.w	r3, #4294967295
 8004158:	3402      	adds	r4, #2
 800415a:	9305      	str	r3, [sp, #20]
 800415c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004224 <_svfiprintf_r+0x1f8>
 8004160:	7821      	ldrb	r1, [r4, #0]
 8004162:	2203      	movs	r2, #3
 8004164:	4650      	mov	r0, sl
 8004166:	f7fc f833 	bl	80001d0 <memchr>
 800416a:	b138      	cbz	r0, 800417c <_svfiprintf_r+0x150>
 800416c:	9b04      	ldr	r3, [sp, #16]
 800416e:	eba0 000a 	sub.w	r0, r0, sl
 8004172:	2240      	movs	r2, #64	; 0x40
 8004174:	4082      	lsls	r2, r0
 8004176:	4313      	orrs	r3, r2
 8004178:	3401      	adds	r4, #1
 800417a:	9304      	str	r3, [sp, #16]
 800417c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004180:	4825      	ldr	r0, [pc, #148]	; (8004218 <_svfiprintf_r+0x1ec>)
 8004182:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004186:	2206      	movs	r2, #6
 8004188:	f7fc f822 	bl	80001d0 <memchr>
 800418c:	2800      	cmp	r0, #0
 800418e:	d038      	beq.n	8004202 <_svfiprintf_r+0x1d6>
 8004190:	4b22      	ldr	r3, [pc, #136]	; (800421c <_svfiprintf_r+0x1f0>)
 8004192:	bb1b      	cbnz	r3, 80041dc <_svfiprintf_r+0x1b0>
 8004194:	9b03      	ldr	r3, [sp, #12]
 8004196:	3307      	adds	r3, #7
 8004198:	f023 0307 	bic.w	r3, r3, #7
 800419c:	3308      	adds	r3, #8
 800419e:	9303      	str	r3, [sp, #12]
 80041a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041a2:	4433      	add	r3, r6
 80041a4:	9309      	str	r3, [sp, #36]	; 0x24
 80041a6:	e768      	b.n	800407a <_svfiprintf_r+0x4e>
 80041a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80041ac:	460c      	mov	r4, r1
 80041ae:	2001      	movs	r0, #1
 80041b0:	e7a6      	b.n	8004100 <_svfiprintf_r+0xd4>
 80041b2:	2300      	movs	r3, #0
 80041b4:	3401      	adds	r4, #1
 80041b6:	9305      	str	r3, [sp, #20]
 80041b8:	4619      	mov	r1, r3
 80041ba:	f04f 0c0a 	mov.w	ip, #10
 80041be:	4620      	mov	r0, r4
 80041c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041c4:	3a30      	subs	r2, #48	; 0x30
 80041c6:	2a09      	cmp	r2, #9
 80041c8:	d903      	bls.n	80041d2 <_svfiprintf_r+0x1a6>
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0c6      	beq.n	800415c <_svfiprintf_r+0x130>
 80041ce:	9105      	str	r1, [sp, #20]
 80041d0:	e7c4      	b.n	800415c <_svfiprintf_r+0x130>
 80041d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80041d6:	4604      	mov	r4, r0
 80041d8:	2301      	movs	r3, #1
 80041da:	e7f0      	b.n	80041be <_svfiprintf_r+0x192>
 80041dc:	ab03      	add	r3, sp, #12
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	462a      	mov	r2, r5
 80041e2:	4b0f      	ldr	r3, [pc, #60]	; (8004220 <_svfiprintf_r+0x1f4>)
 80041e4:	a904      	add	r1, sp, #16
 80041e6:	4638      	mov	r0, r7
 80041e8:	f3af 8000 	nop.w
 80041ec:	1c42      	adds	r2, r0, #1
 80041ee:	4606      	mov	r6, r0
 80041f0:	d1d6      	bne.n	80041a0 <_svfiprintf_r+0x174>
 80041f2:	89ab      	ldrh	r3, [r5, #12]
 80041f4:	065b      	lsls	r3, r3, #25
 80041f6:	f53f af2d 	bmi.w	8004054 <_svfiprintf_r+0x28>
 80041fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041fc:	b01d      	add	sp, #116	; 0x74
 80041fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004202:	ab03      	add	r3, sp, #12
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	462a      	mov	r2, r5
 8004208:	4b05      	ldr	r3, [pc, #20]	; (8004220 <_svfiprintf_r+0x1f4>)
 800420a:	a904      	add	r1, sp, #16
 800420c:	4638      	mov	r0, r7
 800420e:	f000 f879 	bl	8004304 <_printf_i>
 8004212:	e7eb      	b.n	80041ec <_svfiprintf_r+0x1c0>
 8004214:	080046a4 	.word	0x080046a4
 8004218:	080046ae 	.word	0x080046ae
 800421c:	00000000 	.word	0x00000000
 8004220:	08003f79 	.word	0x08003f79
 8004224:	080046aa 	.word	0x080046aa

08004228 <_printf_common>:
 8004228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800422c:	4616      	mov	r6, r2
 800422e:	4699      	mov	r9, r3
 8004230:	688a      	ldr	r2, [r1, #8]
 8004232:	690b      	ldr	r3, [r1, #16]
 8004234:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004238:	4293      	cmp	r3, r2
 800423a:	bfb8      	it	lt
 800423c:	4613      	movlt	r3, r2
 800423e:	6033      	str	r3, [r6, #0]
 8004240:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004244:	4607      	mov	r7, r0
 8004246:	460c      	mov	r4, r1
 8004248:	b10a      	cbz	r2, 800424e <_printf_common+0x26>
 800424a:	3301      	adds	r3, #1
 800424c:	6033      	str	r3, [r6, #0]
 800424e:	6823      	ldr	r3, [r4, #0]
 8004250:	0699      	lsls	r1, r3, #26
 8004252:	bf42      	ittt	mi
 8004254:	6833      	ldrmi	r3, [r6, #0]
 8004256:	3302      	addmi	r3, #2
 8004258:	6033      	strmi	r3, [r6, #0]
 800425a:	6825      	ldr	r5, [r4, #0]
 800425c:	f015 0506 	ands.w	r5, r5, #6
 8004260:	d106      	bne.n	8004270 <_printf_common+0x48>
 8004262:	f104 0a19 	add.w	sl, r4, #25
 8004266:	68e3      	ldr	r3, [r4, #12]
 8004268:	6832      	ldr	r2, [r6, #0]
 800426a:	1a9b      	subs	r3, r3, r2
 800426c:	42ab      	cmp	r3, r5
 800426e:	dc26      	bgt.n	80042be <_printf_common+0x96>
 8004270:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004274:	1e13      	subs	r3, r2, #0
 8004276:	6822      	ldr	r2, [r4, #0]
 8004278:	bf18      	it	ne
 800427a:	2301      	movne	r3, #1
 800427c:	0692      	lsls	r2, r2, #26
 800427e:	d42b      	bmi.n	80042d8 <_printf_common+0xb0>
 8004280:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004284:	4649      	mov	r1, r9
 8004286:	4638      	mov	r0, r7
 8004288:	47c0      	blx	r8
 800428a:	3001      	adds	r0, #1
 800428c:	d01e      	beq.n	80042cc <_printf_common+0xa4>
 800428e:	6823      	ldr	r3, [r4, #0]
 8004290:	6922      	ldr	r2, [r4, #16]
 8004292:	f003 0306 	and.w	r3, r3, #6
 8004296:	2b04      	cmp	r3, #4
 8004298:	bf02      	ittt	eq
 800429a:	68e5      	ldreq	r5, [r4, #12]
 800429c:	6833      	ldreq	r3, [r6, #0]
 800429e:	1aed      	subeq	r5, r5, r3
 80042a0:	68a3      	ldr	r3, [r4, #8]
 80042a2:	bf0c      	ite	eq
 80042a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042a8:	2500      	movne	r5, #0
 80042aa:	4293      	cmp	r3, r2
 80042ac:	bfc4      	itt	gt
 80042ae:	1a9b      	subgt	r3, r3, r2
 80042b0:	18ed      	addgt	r5, r5, r3
 80042b2:	2600      	movs	r6, #0
 80042b4:	341a      	adds	r4, #26
 80042b6:	42b5      	cmp	r5, r6
 80042b8:	d11a      	bne.n	80042f0 <_printf_common+0xc8>
 80042ba:	2000      	movs	r0, #0
 80042bc:	e008      	b.n	80042d0 <_printf_common+0xa8>
 80042be:	2301      	movs	r3, #1
 80042c0:	4652      	mov	r2, sl
 80042c2:	4649      	mov	r1, r9
 80042c4:	4638      	mov	r0, r7
 80042c6:	47c0      	blx	r8
 80042c8:	3001      	adds	r0, #1
 80042ca:	d103      	bne.n	80042d4 <_printf_common+0xac>
 80042cc:	f04f 30ff 	mov.w	r0, #4294967295
 80042d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042d4:	3501      	adds	r5, #1
 80042d6:	e7c6      	b.n	8004266 <_printf_common+0x3e>
 80042d8:	18e1      	adds	r1, r4, r3
 80042da:	1c5a      	adds	r2, r3, #1
 80042dc:	2030      	movs	r0, #48	; 0x30
 80042de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042e2:	4422      	add	r2, r4
 80042e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042ec:	3302      	adds	r3, #2
 80042ee:	e7c7      	b.n	8004280 <_printf_common+0x58>
 80042f0:	2301      	movs	r3, #1
 80042f2:	4622      	mov	r2, r4
 80042f4:	4649      	mov	r1, r9
 80042f6:	4638      	mov	r0, r7
 80042f8:	47c0      	blx	r8
 80042fa:	3001      	adds	r0, #1
 80042fc:	d0e6      	beq.n	80042cc <_printf_common+0xa4>
 80042fe:	3601      	adds	r6, #1
 8004300:	e7d9      	b.n	80042b6 <_printf_common+0x8e>
	...

08004304 <_printf_i>:
 8004304:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004308:	7e0f      	ldrb	r7, [r1, #24]
 800430a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800430c:	2f78      	cmp	r7, #120	; 0x78
 800430e:	4691      	mov	r9, r2
 8004310:	4680      	mov	r8, r0
 8004312:	460c      	mov	r4, r1
 8004314:	469a      	mov	sl, r3
 8004316:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800431a:	d807      	bhi.n	800432c <_printf_i+0x28>
 800431c:	2f62      	cmp	r7, #98	; 0x62
 800431e:	d80a      	bhi.n	8004336 <_printf_i+0x32>
 8004320:	2f00      	cmp	r7, #0
 8004322:	f000 80d4 	beq.w	80044ce <_printf_i+0x1ca>
 8004326:	2f58      	cmp	r7, #88	; 0x58
 8004328:	f000 80c0 	beq.w	80044ac <_printf_i+0x1a8>
 800432c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004330:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004334:	e03a      	b.n	80043ac <_printf_i+0xa8>
 8004336:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800433a:	2b15      	cmp	r3, #21
 800433c:	d8f6      	bhi.n	800432c <_printf_i+0x28>
 800433e:	a101      	add	r1, pc, #4	; (adr r1, 8004344 <_printf_i+0x40>)
 8004340:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004344:	0800439d 	.word	0x0800439d
 8004348:	080043b1 	.word	0x080043b1
 800434c:	0800432d 	.word	0x0800432d
 8004350:	0800432d 	.word	0x0800432d
 8004354:	0800432d 	.word	0x0800432d
 8004358:	0800432d 	.word	0x0800432d
 800435c:	080043b1 	.word	0x080043b1
 8004360:	0800432d 	.word	0x0800432d
 8004364:	0800432d 	.word	0x0800432d
 8004368:	0800432d 	.word	0x0800432d
 800436c:	0800432d 	.word	0x0800432d
 8004370:	080044b5 	.word	0x080044b5
 8004374:	080043dd 	.word	0x080043dd
 8004378:	0800446f 	.word	0x0800446f
 800437c:	0800432d 	.word	0x0800432d
 8004380:	0800432d 	.word	0x0800432d
 8004384:	080044d7 	.word	0x080044d7
 8004388:	0800432d 	.word	0x0800432d
 800438c:	080043dd 	.word	0x080043dd
 8004390:	0800432d 	.word	0x0800432d
 8004394:	0800432d 	.word	0x0800432d
 8004398:	08004477 	.word	0x08004477
 800439c:	682b      	ldr	r3, [r5, #0]
 800439e:	1d1a      	adds	r2, r3, #4
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	602a      	str	r2, [r5, #0]
 80043a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043ac:	2301      	movs	r3, #1
 80043ae:	e09f      	b.n	80044f0 <_printf_i+0x1ec>
 80043b0:	6820      	ldr	r0, [r4, #0]
 80043b2:	682b      	ldr	r3, [r5, #0]
 80043b4:	0607      	lsls	r7, r0, #24
 80043b6:	f103 0104 	add.w	r1, r3, #4
 80043ba:	6029      	str	r1, [r5, #0]
 80043bc:	d501      	bpl.n	80043c2 <_printf_i+0xbe>
 80043be:	681e      	ldr	r6, [r3, #0]
 80043c0:	e003      	b.n	80043ca <_printf_i+0xc6>
 80043c2:	0646      	lsls	r6, r0, #25
 80043c4:	d5fb      	bpl.n	80043be <_printf_i+0xba>
 80043c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80043ca:	2e00      	cmp	r6, #0
 80043cc:	da03      	bge.n	80043d6 <_printf_i+0xd2>
 80043ce:	232d      	movs	r3, #45	; 0x2d
 80043d0:	4276      	negs	r6, r6
 80043d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043d6:	485a      	ldr	r0, [pc, #360]	; (8004540 <_printf_i+0x23c>)
 80043d8:	230a      	movs	r3, #10
 80043da:	e012      	b.n	8004402 <_printf_i+0xfe>
 80043dc:	682b      	ldr	r3, [r5, #0]
 80043de:	6820      	ldr	r0, [r4, #0]
 80043e0:	1d19      	adds	r1, r3, #4
 80043e2:	6029      	str	r1, [r5, #0]
 80043e4:	0605      	lsls	r5, r0, #24
 80043e6:	d501      	bpl.n	80043ec <_printf_i+0xe8>
 80043e8:	681e      	ldr	r6, [r3, #0]
 80043ea:	e002      	b.n	80043f2 <_printf_i+0xee>
 80043ec:	0641      	lsls	r1, r0, #25
 80043ee:	d5fb      	bpl.n	80043e8 <_printf_i+0xe4>
 80043f0:	881e      	ldrh	r6, [r3, #0]
 80043f2:	4853      	ldr	r0, [pc, #332]	; (8004540 <_printf_i+0x23c>)
 80043f4:	2f6f      	cmp	r7, #111	; 0x6f
 80043f6:	bf0c      	ite	eq
 80043f8:	2308      	moveq	r3, #8
 80043fa:	230a      	movne	r3, #10
 80043fc:	2100      	movs	r1, #0
 80043fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004402:	6865      	ldr	r5, [r4, #4]
 8004404:	60a5      	str	r5, [r4, #8]
 8004406:	2d00      	cmp	r5, #0
 8004408:	bfa2      	ittt	ge
 800440a:	6821      	ldrge	r1, [r4, #0]
 800440c:	f021 0104 	bicge.w	r1, r1, #4
 8004410:	6021      	strge	r1, [r4, #0]
 8004412:	b90e      	cbnz	r6, 8004418 <_printf_i+0x114>
 8004414:	2d00      	cmp	r5, #0
 8004416:	d04b      	beq.n	80044b0 <_printf_i+0x1ac>
 8004418:	4615      	mov	r5, r2
 800441a:	fbb6 f1f3 	udiv	r1, r6, r3
 800441e:	fb03 6711 	mls	r7, r3, r1, r6
 8004422:	5dc7      	ldrb	r7, [r0, r7]
 8004424:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004428:	4637      	mov	r7, r6
 800442a:	42bb      	cmp	r3, r7
 800442c:	460e      	mov	r6, r1
 800442e:	d9f4      	bls.n	800441a <_printf_i+0x116>
 8004430:	2b08      	cmp	r3, #8
 8004432:	d10b      	bne.n	800444c <_printf_i+0x148>
 8004434:	6823      	ldr	r3, [r4, #0]
 8004436:	07de      	lsls	r6, r3, #31
 8004438:	d508      	bpl.n	800444c <_printf_i+0x148>
 800443a:	6923      	ldr	r3, [r4, #16]
 800443c:	6861      	ldr	r1, [r4, #4]
 800443e:	4299      	cmp	r1, r3
 8004440:	bfde      	ittt	le
 8004442:	2330      	movle	r3, #48	; 0x30
 8004444:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004448:	f105 35ff 	addle.w	r5, r5, #4294967295
 800444c:	1b52      	subs	r2, r2, r5
 800444e:	6122      	str	r2, [r4, #16]
 8004450:	f8cd a000 	str.w	sl, [sp]
 8004454:	464b      	mov	r3, r9
 8004456:	aa03      	add	r2, sp, #12
 8004458:	4621      	mov	r1, r4
 800445a:	4640      	mov	r0, r8
 800445c:	f7ff fee4 	bl	8004228 <_printf_common>
 8004460:	3001      	adds	r0, #1
 8004462:	d14a      	bne.n	80044fa <_printf_i+0x1f6>
 8004464:	f04f 30ff 	mov.w	r0, #4294967295
 8004468:	b004      	add	sp, #16
 800446a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800446e:	6823      	ldr	r3, [r4, #0]
 8004470:	f043 0320 	orr.w	r3, r3, #32
 8004474:	6023      	str	r3, [r4, #0]
 8004476:	4833      	ldr	r0, [pc, #204]	; (8004544 <_printf_i+0x240>)
 8004478:	2778      	movs	r7, #120	; 0x78
 800447a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800447e:	6823      	ldr	r3, [r4, #0]
 8004480:	6829      	ldr	r1, [r5, #0]
 8004482:	061f      	lsls	r7, r3, #24
 8004484:	f851 6b04 	ldr.w	r6, [r1], #4
 8004488:	d402      	bmi.n	8004490 <_printf_i+0x18c>
 800448a:	065f      	lsls	r7, r3, #25
 800448c:	bf48      	it	mi
 800448e:	b2b6      	uxthmi	r6, r6
 8004490:	07df      	lsls	r7, r3, #31
 8004492:	bf48      	it	mi
 8004494:	f043 0320 	orrmi.w	r3, r3, #32
 8004498:	6029      	str	r1, [r5, #0]
 800449a:	bf48      	it	mi
 800449c:	6023      	strmi	r3, [r4, #0]
 800449e:	b91e      	cbnz	r6, 80044a8 <_printf_i+0x1a4>
 80044a0:	6823      	ldr	r3, [r4, #0]
 80044a2:	f023 0320 	bic.w	r3, r3, #32
 80044a6:	6023      	str	r3, [r4, #0]
 80044a8:	2310      	movs	r3, #16
 80044aa:	e7a7      	b.n	80043fc <_printf_i+0xf8>
 80044ac:	4824      	ldr	r0, [pc, #144]	; (8004540 <_printf_i+0x23c>)
 80044ae:	e7e4      	b.n	800447a <_printf_i+0x176>
 80044b0:	4615      	mov	r5, r2
 80044b2:	e7bd      	b.n	8004430 <_printf_i+0x12c>
 80044b4:	682b      	ldr	r3, [r5, #0]
 80044b6:	6826      	ldr	r6, [r4, #0]
 80044b8:	6961      	ldr	r1, [r4, #20]
 80044ba:	1d18      	adds	r0, r3, #4
 80044bc:	6028      	str	r0, [r5, #0]
 80044be:	0635      	lsls	r5, r6, #24
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	d501      	bpl.n	80044c8 <_printf_i+0x1c4>
 80044c4:	6019      	str	r1, [r3, #0]
 80044c6:	e002      	b.n	80044ce <_printf_i+0x1ca>
 80044c8:	0670      	lsls	r0, r6, #25
 80044ca:	d5fb      	bpl.n	80044c4 <_printf_i+0x1c0>
 80044cc:	8019      	strh	r1, [r3, #0]
 80044ce:	2300      	movs	r3, #0
 80044d0:	6123      	str	r3, [r4, #16]
 80044d2:	4615      	mov	r5, r2
 80044d4:	e7bc      	b.n	8004450 <_printf_i+0x14c>
 80044d6:	682b      	ldr	r3, [r5, #0]
 80044d8:	1d1a      	adds	r2, r3, #4
 80044da:	602a      	str	r2, [r5, #0]
 80044dc:	681d      	ldr	r5, [r3, #0]
 80044de:	6862      	ldr	r2, [r4, #4]
 80044e0:	2100      	movs	r1, #0
 80044e2:	4628      	mov	r0, r5
 80044e4:	f7fb fe74 	bl	80001d0 <memchr>
 80044e8:	b108      	cbz	r0, 80044ee <_printf_i+0x1ea>
 80044ea:	1b40      	subs	r0, r0, r5
 80044ec:	6060      	str	r0, [r4, #4]
 80044ee:	6863      	ldr	r3, [r4, #4]
 80044f0:	6123      	str	r3, [r4, #16]
 80044f2:	2300      	movs	r3, #0
 80044f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044f8:	e7aa      	b.n	8004450 <_printf_i+0x14c>
 80044fa:	6923      	ldr	r3, [r4, #16]
 80044fc:	462a      	mov	r2, r5
 80044fe:	4649      	mov	r1, r9
 8004500:	4640      	mov	r0, r8
 8004502:	47d0      	blx	sl
 8004504:	3001      	adds	r0, #1
 8004506:	d0ad      	beq.n	8004464 <_printf_i+0x160>
 8004508:	6823      	ldr	r3, [r4, #0]
 800450a:	079b      	lsls	r3, r3, #30
 800450c:	d413      	bmi.n	8004536 <_printf_i+0x232>
 800450e:	68e0      	ldr	r0, [r4, #12]
 8004510:	9b03      	ldr	r3, [sp, #12]
 8004512:	4298      	cmp	r0, r3
 8004514:	bfb8      	it	lt
 8004516:	4618      	movlt	r0, r3
 8004518:	e7a6      	b.n	8004468 <_printf_i+0x164>
 800451a:	2301      	movs	r3, #1
 800451c:	4632      	mov	r2, r6
 800451e:	4649      	mov	r1, r9
 8004520:	4640      	mov	r0, r8
 8004522:	47d0      	blx	sl
 8004524:	3001      	adds	r0, #1
 8004526:	d09d      	beq.n	8004464 <_printf_i+0x160>
 8004528:	3501      	adds	r5, #1
 800452a:	68e3      	ldr	r3, [r4, #12]
 800452c:	9903      	ldr	r1, [sp, #12]
 800452e:	1a5b      	subs	r3, r3, r1
 8004530:	42ab      	cmp	r3, r5
 8004532:	dcf2      	bgt.n	800451a <_printf_i+0x216>
 8004534:	e7eb      	b.n	800450e <_printf_i+0x20a>
 8004536:	2500      	movs	r5, #0
 8004538:	f104 0619 	add.w	r6, r4, #25
 800453c:	e7f5      	b.n	800452a <_printf_i+0x226>
 800453e:	bf00      	nop
 8004540:	080046b5 	.word	0x080046b5
 8004544:	080046c6 	.word	0x080046c6

08004548 <memmove>:
 8004548:	4288      	cmp	r0, r1
 800454a:	b510      	push	{r4, lr}
 800454c:	eb01 0402 	add.w	r4, r1, r2
 8004550:	d902      	bls.n	8004558 <memmove+0x10>
 8004552:	4284      	cmp	r4, r0
 8004554:	4623      	mov	r3, r4
 8004556:	d807      	bhi.n	8004568 <memmove+0x20>
 8004558:	1e43      	subs	r3, r0, #1
 800455a:	42a1      	cmp	r1, r4
 800455c:	d008      	beq.n	8004570 <memmove+0x28>
 800455e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004562:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004566:	e7f8      	b.n	800455a <memmove+0x12>
 8004568:	4402      	add	r2, r0
 800456a:	4601      	mov	r1, r0
 800456c:	428a      	cmp	r2, r1
 800456e:	d100      	bne.n	8004572 <memmove+0x2a>
 8004570:	bd10      	pop	{r4, pc}
 8004572:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004576:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800457a:	e7f7      	b.n	800456c <memmove+0x24>

0800457c <_sbrk_r>:
 800457c:	b538      	push	{r3, r4, r5, lr}
 800457e:	4d06      	ldr	r5, [pc, #24]	; (8004598 <_sbrk_r+0x1c>)
 8004580:	2300      	movs	r3, #0
 8004582:	4604      	mov	r4, r0
 8004584:	4608      	mov	r0, r1
 8004586:	602b      	str	r3, [r5, #0]
 8004588:	f7fc fc96 	bl	8000eb8 <_sbrk>
 800458c:	1c43      	adds	r3, r0, #1
 800458e:	d102      	bne.n	8004596 <_sbrk_r+0x1a>
 8004590:	682b      	ldr	r3, [r5, #0]
 8004592:	b103      	cbz	r3, 8004596 <_sbrk_r+0x1a>
 8004594:	6023      	str	r3, [r4, #0]
 8004596:	bd38      	pop	{r3, r4, r5, pc}
 8004598:	20000264 	.word	0x20000264

0800459c <memcpy>:
 800459c:	440a      	add	r2, r1
 800459e:	4291      	cmp	r1, r2
 80045a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80045a4:	d100      	bne.n	80045a8 <memcpy+0xc>
 80045a6:	4770      	bx	lr
 80045a8:	b510      	push	{r4, lr}
 80045aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045b2:	4291      	cmp	r1, r2
 80045b4:	d1f9      	bne.n	80045aa <memcpy+0xe>
 80045b6:	bd10      	pop	{r4, pc}

080045b8 <_realloc_r>:
 80045b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045bc:	4680      	mov	r8, r0
 80045be:	4614      	mov	r4, r2
 80045c0:	460e      	mov	r6, r1
 80045c2:	b921      	cbnz	r1, 80045ce <_realloc_r+0x16>
 80045c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045c8:	4611      	mov	r1, r2
 80045ca:	f7ff bc49 	b.w	8003e60 <_malloc_r>
 80045ce:	b92a      	cbnz	r2, 80045dc <_realloc_r+0x24>
 80045d0:	f7ff fbda 	bl	8003d88 <_free_r>
 80045d4:	4625      	mov	r5, r4
 80045d6:	4628      	mov	r0, r5
 80045d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045dc:	f000 f81b 	bl	8004616 <_malloc_usable_size_r>
 80045e0:	4284      	cmp	r4, r0
 80045e2:	4607      	mov	r7, r0
 80045e4:	d802      	bhi.n	80045ec <_realloc_r+0x34>
 80045e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80045ea:	d812      	bhi.n	8004612 <_realloc_r+0x5a>
 80045ec:	4621      	mov	r1, r4
 80045ee:	4640      	mov	r0, r8
 80045f0:	f7ff fc36 	bl	8003e60 <_malloc_r>
 80045f4:	4605      	mov	r5, r0
 80045f6:	2800      	cmp	r0, #0
 80045f8:	d0ed      	beq.n	80045d6 <_realloc_r+0x1e>
 80045fa:	42bc      	cmp	r4, r7
 80045fc:	4622      	mov	r2, r4
 80045fe:	4631      	mov	r1, r6
 8004600:	bf28      	it	cs
 8004602:	463a      	movcs	r2, r7
 8004604:	f7ff ffca 	bl	800459c <memcpy>
 8004608:	4631      	mov	r1, r6
 800460a:	4640      	mov	r0, r8
 800460c:	f7ff fbbc 	bl	8003d88 <_free_r>
 8004610:	e7e1      	b.n	80045d6 <_realloc_r+0x1e>
 8004612:	4635      	mov	r5, r6
 8004614:	e7df      	b.n	80045d6 <_realloc_r+0x1e>

08004616 <_malloc_usable_size_r>:
 8004616:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800461a:	1f18      	subs	r0, r3, #4
 800461c:	2b00      	cmp	r3, #0
 800461e:	bfbc      	itt	lt
 8004620:	580b      	ldrlt	r3, [r1, r0]
 8004622:	18c0      	addlt	r0, r0, r3
 8004624:	4770      	bx	lr
	...

08004628 <_init>:
 8004628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800462a:	bf00      	nop
 800462c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800462e:	bc08      	pop	{r3}
 8004630:	469e      	mov	lr, r3
 8004632:	4770      	bx	lr

08004634 <_fini>:
 8004634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004636:	bf00      	nop
 8004638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800463a:	bc08      	pop	{r3}
 800463c:	469e      	mov	lr, r3
 800463e:	4770      	bx	lr
